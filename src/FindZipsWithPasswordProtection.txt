#Specify computer, directory and files with lines
$cn = 'ncat040'
$baseDirectory = 'Temp'
$subDirPattern = '^A\d{1,2}$'

$filePathSeperator = '\'
$uncFileLocationBase = '\\'

# Drive letter to use during this session
$driveletter = 'T'
# Error if the drive letter is in use
if (Get-PSDrive $driveletter -ErrorAction SilentlyContinue) {
  throw "Drive $driveletter is already in use"
} else {
  # Map a drive to the baseDirectory
  if ($cn -eq $Env:Computername) {
    New-PSDrive --Name $driveletter -PSProvider FileSystem -Root $baseDirectory
  }else {
    New-PSDrive -Credential $creds -Name $driveletter -PSProvider FileSystem -Root $uncFileLocationBase+$cn+$filePathSeperator+$baseDirectory
  }
}

# Get the list of subdirectories that match the pattern
# Get all subdirectories that match $subdirPattern
$subDirectoriesToProcess = Get-ChildItem $driveletter+':' | Where-Object { $_.Name -match $subDirPattern }
$subdirlist = gci T: -Attributes Directory | ? { $_.Name -match $subDirPattern }


$archiveFileFn = 'ArchiveFiles.txt'

# Specify self and sub-processes metadata for monitoring subsystem
# Specify output location and format
"$Env:Dropbox/GitHub/"
# Specify process that can check for protection
    # Path: _ @"C:\Program Files\7-Zip\7z.exe";
    # CLIMode:
    # CLIArguments:
        # APITypeAndPort
# Specify expected API responses
# Specify process results

Specify the response processing (send a line, get a response, check for match, process if expected else fault-response)
Specify the process processing (start, restart, end-normal, end-faulted, hung-faulted)

# Loop over all subdirectories that match $subdirPattern
  # Ask user to insert correct disk
  # wait for acknowledgment, and/or wait for disk subsystem to notify that disk has been inserted

bring up process
until process processing says to quit
    open file with lines
    foreach line {
    Send the line to process that can check for protection
    wait for response
    record that line and the process result using output location and format
    }

    check process results
    close input file
Multiple state branches (switch on combinatorial enumerations)
Recording the results supports multiple data fields
record self and sub processes metadata
close output location

