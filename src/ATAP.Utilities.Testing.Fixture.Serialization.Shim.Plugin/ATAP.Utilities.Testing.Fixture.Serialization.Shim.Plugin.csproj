<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Library</OutputType>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IsPackable>true</IsPackable>
    <!-- Assembly, File, and Package Information for this assembly-->
    <!-- Build and revision are created based on date-->
    <MajorVersion>1</MajorVersion>
    <MinorVersion>0</MinorVersion>
    <PatchVersion>0</PatchVersion>
    <!-- Current Lifecycle stage for this assembly-->
    <PackageLifeCycleStage>Production</PackageLifeCycleStage>
    <!-- NuGet Package Label for the Nuget Package if the LifeCyclestage is not Production-->
    <!-- However, if the LifeCyclestage is Production, the NuGet Package Label is ignored, but MSBuild expects a non-null value  -->
    <PackageLabel>NA</PackageLabel>
  </PropertyGroup>

  <PropertyGroup>
    <RuntimeIdentifiers>win-x64</RuntimeIdentifiers>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>


  <!-- referencing xUnit in order to extend it also causes VS 2019 to think this is a test project. and then it crashes test discovery without this added -->
  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" />
    <PackageReference Include="FluentAssertions" />
    <PackageReference Include="Moq" />
    <PackageReference Include="xunit" />
    <PackageReference Include="xunit.runner.console">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="xunit.runner.visualstudio">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="coverlet.collector">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Microsoft Configuration package to support an IConfiguration object as a parameter to methods-->
  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Configuration" />
  </ItemGroup>

  <!-- ATAP Utility Packages that handle IConfiguration -->
  <ItemGroup>
    <ProjectReference Include="../ATAP.Utilities.Configuration.Extensions/ATAP.Utilities.Configuration.Extensions.csproj" />
  </ItemGroup>

  <!-- Third-party libraries used in testing the Serialization Fixtures -->
  <ItemGroup>
    <PackageReference Include="TimePeriodLibrary.NET" />
    <PackageReference Include="UnitsNet" />
  </ItemGroup>

  <!-- Reference a single DI Implementation. eventually move this to a Shim -->
  <ItemGroup>
    <PackageReference Include="Ninject" />
    <PackageReference Include="Ninject.extensions.conventions" />
  </ItemGroup>

  <!-- ATAP Utility Packages For the Testing Fixture hierarchy -->
  <ItemGroup>
    <ProjectReference Include="..\..\src\ATAP.Utilities.Testing\ATAP.Utilities.Testing.csproj" />
    <ProjectReference Include="..\..\src\ATAP.Utilities.Testing.Fixture.Serialization\ATAP.Utilities.Testing.Fixture.Serialization.csproj" />
  </ItemGroup>

  <!-- ATAP Utility Packages For the Serializer -->
  <ItemGroup>
    <ProjectReference Include="../ATAP.Utilities.Serializer.Interfaces\ATAP.Utilities.Serializer.Interfaces.csproj" />
    <ProjectReference Include="../ATAP.Utilities.Serializer.StringConstants/ATAP.Utilities.Serializer.StringConstants.csproj" />
    <ProjectReference Include="../ATAP.Utilities.Serializer\ATAP.Utilities.Serializer.csproj" />
  </ItemGroup>

  <!-- Packages and projects to implement IL Weaving using Fody during the build process -->
  <!-- ETW is not used inTesting (yet), but ATAP libraries used by the testing package have a reference to this. UYnitl I can figure out how to include these as dependent packages in the appropriate `ATAP.Utilitiies.` librarirys, they are included specifically, here -->
  <!-- Packages to implement ETW logging of method entry, method exit, and exceptions -->
  <ItemGroup>
    <!-- Packages to implement ETW logging of method entry, method exit, and exceptions -->
    <PackageReference Include="MethodBoundaryAspect.Fody" />
    <!-- Project Reference to the ETW attribute and log provider -->
    <ProjectReference Include="..\ATAP.Utilities.ETW\ATAP.Utilities.ETW.csproj" />
  </ItemGroup>

  <!-- Packages for tests that use ServiceStack-->
  <ItemGroup>
    <!-- ServiceStack  -->
    <PackageReference Include="ServiceStack" />
    <!-- ServiceStack serializers and dump utility -->
    <PackageReference Include="ServiceStack.Text.EnumMemberSerializer" />
    <PackageReference Include="ServiceStack.Text" />
    <!-- ServiceStack ORMLite and SQLServer -->
    <PackageReference Include="ServiceStack.OrmLite.Core" />
    <PackageReference Include="ServiceStack.OrmLite.SqlServer.Core" />
    <PackageReference Include="ServiceStack.OrmLite.MySql.Core" />
    <PackageReference Include="ServiceStack.OrmLite.Sqlite.Core" />
  </ItemGroup>

  <!-- Loader interfaces and classes for any Assembly that may be loaded by the dynamic Loader, only works for TargetFramework NetCore -->
  <ItemGroup Condition="$(TargetFramework.Contains('5.0'))">
    <ProjectReference Include="..\ATAP.Utilities.Loader.Interfaces\ATAP.Utilities.Loader.Interfaces.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Loader\ATAP.Utilities.Loader.csproj" />
  </ItemGroup>

</Project>
