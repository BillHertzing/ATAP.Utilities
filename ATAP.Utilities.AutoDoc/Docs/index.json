{
  "Index.html": {
    "href": "Index.html",
    "title": "ATAP Utilities Documentation Site | ATAP Utilities",
    "keywords": "ATAP Utilities Documentation Site Welcome to the documentation site for the ATAP Utilities. This site contains information on building and using the ATAP Utility assemblies. It also has articles on how the utilities are built, and distributed. I am actively developing this documentation static website, and publishing to the ATAP Utilities GitHub Pages host. Over the course of the next few weeks, the site will be in a constant state of flux, but hopefully will settle down after the automation tools are completed and content is written. tbd - try to make above paragraph conditional front matter and bring it in from repository level, over-ridable or append-able at the project level. As part of our commitment to Open Source Software, ATAP Technology is releasing the code and content of this repository under the MIT license. tbd - try to make above paragraph conditional front matter and bring it in from repository level, over-ridable or append-able at the project level. For the high-level overview of the purpose for, and the contents of, this repository, start with the repository ReadMe, here:(./Articles/README.html) This documentation website follows the conventions of sites built with the DocFx tool . Across the top are major sections, along the left side is a Table Of Contents (TOC) that changes per the major section content, and along the right side is a content-specific TOC that changes according to which document is being viewed. If you are new to using this repository, please start with the Getting Started guide"
  },
  "Api/ATAP.Utilities.Http.GatewayBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.GatewayBuilder.html",
    "title": "Class GatewayBuilder | ATAP Utilities",
    "keywords": "Class GatewayBuilder Inheritance System.Object GatewayBuilder Implements IGatewayBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class GatewayBuilder : object, IGatewayBuilder Constructors GatewayBuilder() Declaration public GatewayBuilder() Methods AddBaseUri(Uri) Declaration public GatewayBuilder AddBaseUri(Uri baseUri) Parameters Type Name Description Uri baseUri Returns Type Description GatewayBuilder AddDefaultAPIKey(String) Declaration public GatewayBuilder AddDefaultAPIKey(string defaultAPIKey) Parameters Type Name Description System.String defaultAPIKey Returns Type Description GatewayBuilder AddDefaultPolicy(Policy) Declaration public GatewayBuilder AddDefaultPolicy(Policy defaultPolicy) Parameters Type Name Description Policy defaultPolicy Returns Type Description GatewayBuilder AddGatewayEntries(Dictionary<String, IGatewayEntry>) Declaration public GatewayBuilder AddGatewayEntries(Dictionary<string, IGatewayEntry> gatewayEntries) Parameters Type Name Description Dictionary < System.String , IGatewayEntry > gatewayEntries Returns Type Description GatewayBuilder AddGatewayEntry(IGatewayEntry) Declaration public GatewayBuilder AddGatewayEntry(IGatewayEntry gatewayEntry) Parameters Type Name Description IGatewayEntry gatewayEntry Returns Type Description GatewayBuilder AddName(String) Declaration public GatewayBuilder AddName(string name) Parameters Type Name Description System.String name Returns Type Description GatewayBuilder Build() Declaration public IGateway Build() Returns Type Description IGateway CreateNew() Declaration public static GatewayBuilder CreateNew() Returns Type Description GatewayBuilder Implements IGatewayBuilder Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.SingletonHttpClient.html": {
    "href": "Api/ATAP.Utilities.Http.SingletonHttpClient.html",
    "title": "Class SingletonHttpClient | ATAP Utilities",
    "keywords": "Class SingletonHttpClient Inheritance System.Object SingletonHttpClient Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public sealed class SingletonHttpClient : object Methods AsyncFetch(Policy, HttpRequestMessage) Declaration public static Task<HttpResponseMessage> AsyncFetch(Policy policy, HttpRequestMessage httpRequestMessage) Parameters Type Name Description Policy policy HttpRequestMessage httpRequestMessage Returns Type Description Task < HttpResponseMessage > Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.GatewayEntryBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.GatewayEntryBuilder.html",
    "title": "Class GatewayEntryBuilder | ATAP Utilities",
    "keywords": "Class GatewayEntryBuilder Inheritance System.Object GatewayEntryBuilder Implements IGatewayEntryBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class GatewayEntryBuilder : object, IGatewayEntryBuilder Constructors GatewayEntryBuilder() Declaration public GatewayEntryBuilder() Methods AddAPIKey(String) Declaration public GatewayEntryBuilder AddAPIKey(string aPIKey) Parameters Type Name Description System.String aPIKey Returns Type Description GatewayEntryBuilder AddName(String) Declaration public GatewayEntryBuilder AddName(string name) Parameters Type Name Description System.String name Returns Type Description GatewayEntryBuilder AddReqDataPayloadType(Type) Declaration public GatewayEntryBuilder AddReqDataPayloadType(Type reqDataPayloadType) Parameters Type Name Description Type reqDataPayloadType Returns Type Description GatewayEntryBuilder AddRspDataPayloadType(Type) Declaration public GatewayEntryBuilder AddRspDataPayloadType(Type rspDataPayloadType) Parameters Type Name Description Type rspDataPayloadType Returns Type Description GatewayEntryBuilder AddRUri(String) Declaration public GatewayEntryBuilder AddRUri(string rUri) Parameters Type Name Description System.String rUri Returns Type Description GatewayEntryBuilder Build() Declaration public GatewayEntry Build() Returns Type Description GatewayEntry CreateNew() Declaration public static GatewayBuilder CreateNew() Returns Type Description GatewayBuilder Implements IGatewayEntryBuilder Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.GatewayMonitorBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.GatewayMonitorBuilder.html",
    "title": "Class GatewayMonitorBuilder | ATAP Utilities",
    "keywords": "Class GatewayMonitorBuilder Inheritance System.Object GatewayMonitorBuilder Implements IGatewayMonitorBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class GatewayMonitorBuilder : object, IGatewayMonitorBuilder Constructors GatewayMonitorBuilder() Declaration public GatewayMonitorBuilder() Methods AddGatewayEntryMonitor(GatewayEntryMonitor) Declaration public IGatewayMonitorBuilder AddGatewayEntryMonitor(GatewayEntryMonitor gatewayEntryMonitor) Parameters Type Name Description GatewayEntryMonitor gatewayEntryMonitor Returns Type Description IGatewayMonitorBuilder AddName(String) Declaration public IGatewayMonitorBuilder AddName(string name) Parameters Type Name Description System.String name Returns Type Description IGatewayMonitorBuilder Build() Declaration public GatewayMonitor Build() Returns Type Description GatewayMonitor CreateNew() Declaration public static GatewayMonitorBuilder CreateNew() Returns Type Description GatewayMonitorBuilder Implements IGatewayMonitorBuilder Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.Gateway.html": {
    "href": "Api/ATAP.Utilities.Http.Gateway.html",
    "title": "Class Gateway | ATAP Utilities",
    "keywords": "Class Gateway Inheritance System.Object Gateway Implements IGateway Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class Gateway : object, IGateway Constructors Gateway(String, Uri) Declaration public Gateway(string name, Uri baseUrI) Parameters Type Name Description System.String name Uri baseUrI Properties BaseUri Declaration public Uri BaseUri { get; } Property Value Type Description Uri DefaultAPIKey Declaration public string DefaultAPIKey { get; set; } Property Value Type Description System.String DefaultPolicy Declaration public Policy DefaultPolicy { get; set; } Property Value Type Description Policy GatewayEntries Declaration public Dictionary<string, IGatewayEntry> GatewayEntries { get; set; } Property Value Type Description Dictionary < System.String , IGatewayEntry > Name Declaration public string Name { get; } Property Value Type Description System.String Methods GetJsonFromUrl(IGatewayEntry, Action<HttpWebRequest>, Action<HttpWebResponse>) Declaration public string GetJsonFromUrl(IGatewayEntry entry, Action<HttpWebRequest> requestFilter = null, Action<HttpWebResponse> responseFilter = null) Parameters Type Name Description IGatewayEntry entry Action < HttpWebRequest > requestFilter Action < HttpWebResponse > responseFilter Returns Type Description System.String PostJsonToUrlAsync(IGatewayEntry, String, Action<HttpWebRequest>, Action<HttpWebResponse>) Declaration public Task<string> PostJsonToUrlAsync(IGatewayEntry entry, string json, Action<HttpWebRequest> requestFilter = null, Action<HttpWebResponse> responseFilter = null) Parameters Type Name Description IGatewayEntry entry System.String json Action < HttpWebRequest > requestFilter Action < HttpWebResponse > responseFilter Returns Type Description Task < System.String > Implements IGateway Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.GatewayEntryMonitor.html": {
    "href": "Api/ATAP.Utilities.Http.GatewayEntryMonitor.html",
    "title": "Class GatewayEntryMonitor | ATAP Utilities",
    "keywords": "Class GatewayEntryMonitor Inheritance System.Object GatewayEntryMonitor Implements IGatewayEntryMonitor Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class GatewayEntryMonitor : object, IGatewayEntryMonitor Constructors GatewayEntryMonitor(String) Declaration public GatewayEntryMonitor(string name) Parameters Type Name Description System.String name Properties Name Declaration public string Name { get; } Property Value Type Description System.String Implements IGatewayEntryMonitor Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IGatewayEntryMonitorBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.IGatewayEntryMonitorBuilder.html",
    "title": "Interface IGatewayEntryMonitorBuilder | ATAP Utilities",
    "keywords": "Interface IGatewayEntryMonitorBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IGatewayEntryMonitorBuilder Methods Build() Declaration GatewayEntryMonitor Build() Returns Type Description GatewayEntryMonitor Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IGatewayMonitors.html": {
    "href": "Api/ATAP.Utilities.Http.IGatewayMonitors.html",
    "title": "Interface IGatewayMonitors | ATAP Utilities",
    "keywords": "Interface IGatewayMonitors Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IGatewayMonitors Properties GatewayMonitorColl Declaration Dictionary<string, GatewayMonitor> GatewayMonitorColl { get; set; } Property Value Type Description Dictionary < System.String , GatewayMonitor > Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.GatewayEntryMonitorBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.GatewayEntryMonitorBuilder.html",
    "title": "Class GatewayEntryMonitorBuilder | ATAP Utilities",
    "keywords": "Class GatewayEntryMonitorBuilder Inheritance System.Object GatewayEntryMonitorBuilder Implements IGatewayEntryMonitorBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class GatewayEntryMonitorBuilder : object, IGatewayEntryMonitorBuilder Constructors GatewayEntryMonitorBuilder() Declaration public GatewayEntryMonitorBuilder() Methods AddName(String) Declaration public IGatewayEntryMonitorBuilder AddName(string name) Parameters Type Name Description System.String name Returns Type Description IGatewayEntryMonitorBuilder Build() Declaration public GatewayEntryMonitor Build() Returns Type Description GatewayEntryMonitor CreateNew() Declaration public static GatewayEntryMonitorBuilder CreateNew() Returns Type Description GatewayEntryMonitorBuilder Implements IGatewayEntryMonitorBuilder Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IGatewayEntryMonitor.html": {
    "href": "Api/ATAP.Utilities.Http.IGatewayEntryMonitor.html",
    "title": "Interface IGatewayEntryMonitor | ATAP Utilities",
    "keywords": "Interface IGatewayEntryMonitor Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IGatewayEntryMonitor Properties Name Declaration string Name { get; } Property Value Type Description System.String Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IGatewayMonitorBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.IGatewayMonitorBuilder.html",
    "title": "Interface IGatewayMonitorBuilder | ATAP Utilities",
    "keywords": "Interface IGatewayMonitorBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IGatewayMonitorBuilder Methods AddGatewayEntryMonitor(GatewayEntryMonitor) Declaration IGatewayMonitorBuilder AddGatewayEntryMonitor(GatewayEntryMonitor gatewayEntryMonitor) Parameters Type Name Description GatewayEntryMonitor gatewayEntryMonitor Returns Type Description IGatewayMonitorBuilder AddName(String) Declaration IGatewayMonitorBuilder AddName(string name) Parameters Type Name Description System.String name Returns Type Description IGatewayMonitorBuilder Build() Declaration GatewayMonitor Build() Returns Type Description GatewayMonitor Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IGateway.html": {
    "href": "Api/ATAP.Utilities.Http.IGateway.html",
    "title": "Interface IGateway | ATAP Utilities",
    "keywords": "Interface IGateway Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IGateway Properties BaseUri Declaration Uri BaseUri { get; } Property Value Type Description Uri DefaultAPIKey Declaration string DefaultAPIKey { get; set; } Property Value Type Description System.String DefaultPolicy Declaration Policy DefaultPolicy { get; set; } Property Value Type Description Policy GatewayEntries Declaration Dictionary<string, IGatewayEntry> GatewayEntries { get; set; } Property Value Type Description Dictionary < System.String , IGatewayEntry > Name Declaration string Name { get; } Property Value Type Description System.String Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IMultiGatewaysBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.IMultiGatewaysBuilder.html",
    "title": "Interface IMultiGatewaysBuilder | ATAP Utilities",
    "keywords": "Interface IMultiGatewaysBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IMultiGatewaysBuilder Methods Build() Declaration IGateways Build() Returns Type Description IGateways Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IHttpRequestMessageBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.IHttpRequestMessageBuilder.html",
    "title": "Interface IHttpRequestMessageBuilder | ATAP Utilities",
    "keywords": "Interface IHttpRequestMessageBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IHttpRequestMessageBuilder Methods Build() Declaration HttpRequestMessage Build() Returns Type Description HttpRequestMessage Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IGatewayEntry.html": {
    "href": "Api/ATAP.Utilities.Http.IGatewayEntry.html",
    "title": "Interface IGatewayEntry | ATAP Utilities",
    "keywords": "Interface IGatewayEntry Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IGatewayEntry Properties APIKey Declaration string APIKey { get; set; } Property Value Type Description System.String Name Declaration string Name { get; } Property Value Type Description System.String ReqDataPayloadType Declaration Type ReqDataPayloadType { get; set; } Property Value Type Description Type RspDataPayloadType Declaration Type RspDataPayloadType { get; set; } Property Value Type Description Type RUri Declaration string RUri { get; } Property Value Type Description System.String Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.GatewayMonitor.html": {
    "href": "Api/ATAP.Utilities.Http.GatewayMonitor.html",
    "title": "Class GatewayMonitor | ATAP Utilities",
    "keywords": "Class GatewayMonitor Inheritance System.Object GatewayMonitor Implements IGatewayMonitor Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class GatewayMonitor : object, IGatewayMonitor Constructors GatewayMonitor(String) Declaration public GatewayMonitor(string name) Parameters Type Name Description System.String name Properties GatewayEntryMonitors Declaration public Dictionary<string, IGatewayEntryMonitor> GatewayEntryMonitors { get; set; } Property Value Type Description Dictionary < System.String , IGatewayEntryMonitor > Name Declaration public string Name { get; } Property Value Type Description System.String Implements IGatewayMonitor Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.WebGet-1.html": {
    "href": "Api/ATAP.Utilities.Http.WebGet-1.html",
    "title": "Class WebGet<TResult> | ATAP Utilities",
    "keywords": "Class WebGet<TResult> Inheritance System.Object WebGet<TResult> GenericWebGet Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public abstract class WebGet<TResult> : object Type Parameters Name Description TResult Constructors WebGet(Policy, HttpRequestMessage) Declaration public WebGet(Policy policy, HttpRequestMessage httpRequestMessage) Parameters Type Name Description Policy policy HttpRequestMessage httpRequestMessage Properties HttpRequestMessage Declaration public HttpRequestMessage HttpRequestMessage { get; set; } Property Value Type Description HttpRequestMessage Policy Declaration public Policy Policy { get; set; } Property Value Type Description Policy Methods FetchAsync(Policy, HttpRequestMessage) Declaration public virtual Task<HttpResponseMessage> FetchAsync(Policy policy, HttpRequestMessage httpRequestMessage) Parameters Type Name Description Policy policy HttpRequestMessage httpRequestMessage Returns Type Description Task < HttpResponseMessage > FetchAsync(String) Declaration public virtual Task<TResult> FetchAsync(string str) Parameters Type Name Description System.String str Returns Type Description Task <TResult> GetAsync() Declaration public virtual Task<HttpResponseMessage> GetAsync() Returns Type Description Task < HttpResponseMessage > Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.GatewayMonitors.html": {
    "href": "Api/ATAP.Utilities.Http.GatewayMonitors.html",
    "title": "Class GatewayMonitors | ATAP Utilities",
    "keywords": "Class GatewayMonitors Inheritance System.Object GatewayMonitors Implements IGatewayMonitors Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class GatewayMonitors : object, IGatewayMonitors Constructors GatewayMonitors(String) Declaration public GatewayMonitors(string name) Parameters Type Name Description System.String name Properties GatewayMonitorColl Declaration public Dictionary<string, GatewayMonitor> GatewayMonitorColl { get; set; } Property Value Type Description Dictionary < System.String , GatewayMonitor > Name Declaration public string Name { get; } Property Value Type Description System.String Implements IGatewayMonitors Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.HttpRequestMessageBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.HttpRequestMessageBuilder.html",
    "title": "Class HttpRequestMessageBuilder | ATAP Utilities",
    "keywords": "Class HttpRequestMessageBuilder Inheritance System.Object HttpRequestMessageBuilder Implements IHttpRequestMessageBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class HttpRequestMessageBuilder : object, IHttpRequestMessageBuilder Constructors HttpRequestMessageBuilder() Declaration public HttpRequestMessageBuilder() Methods AddAcceptHeader(String) Declaration public HttpRequestMessageBuilder AddAcceptHeader(string acceptHeader) Parameters Type Name Description System.String acceptHeader Returns Type Description HttpRequestMessageBuilder AddBearerToken(String) Declaration public HttpRequestMessageBuilder AddBearerToken(string bearerToken) Parameters Type Name Description System.String bearerToken Returns Type Description HttpRequestMessageBuilder AddContent(HttpContent) Declaration public HttpRequestMessageBuilder AddContent(HttpContent content) Parameters Type Name Description HttpContent content Returns Type Description HttpRequestMessageBuilder AddMethod(HttpMethod) Declaration public HttpRequestMessageBuilder AddMethod(HttpMethod method) Parameters Type Name Description HttpMethod method Returns Type Description HttpRequestMessageBuilder AddRequestUri(Uri) Declaration public HttpRequestMessageBuilder AddRequestUri(Uri requestUri) Parameters Type Name Description Uri requestUri Returns Type Description HttpRequestMessageBuilder Build() Declaration public HttpRequestMessage Build() Returns Type Description HttpRequestMessage CreateNew() Declaration public static HttpRequestMessageBuilder CreateNew() Returns Type Description HttpRequestMessageBuilder Implements IHttpRequestMessageBuilder Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.GatewayMonitorsBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.GatewayMonitorsBuilder.html",
    "title": "Class GatewayMonitorsBuilder | ATAP Utilities",
    "keywords": "Class GatewayMonitorsBuilder Inheritance System.Object GatewayMonitorsBuilder Implements IGatewayMonitorsBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class GatewayMonitorsBuilder : object, IGatewayMonitorsBuilder Constructors GatewayMonitorsBuilder(String) Declaration public GatewayMonitorsBuilder(string name) Parameters Type Name Description System.String name Methods AddGatewayMonitor(GatewayMonitor) Declaration public IGatewayMonitorsBuilder AddGatewayMonitor(GatewayMonitor gatewayMonitor) Parameters Type Name Description GatewayMonitor gatewayMonitor Returns Type Description IGatewayMonitorsBuilder Build() Declaration public GatewayMonitors Build() Returns Type Description GatewayMonitors CreateNew(String) Declaration public static GatewayMonitorsBuilder CreateNew(string name) Parameters Type Name Description System.String name Returns Type Description GatewayMonitorsBuilder Implements IGatewayMonitorsBuilder Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.MultiGatewaysBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.MultiGatewaysBuilder.html",
    "title": "Class MultiGatewaysBuilder | ATAP Utilities",
    "keywords": "Class MultiGatewaysBuilder Inheritance System.Object MultiGatewaysBuilder Implements IMultiGatewaysBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class MultiGatewaysBuilder : object, IMultiGatewaysBuilder Constructors MultiGatewaysBuilder(String) Declaration public MultiGatewaysBuilder(string tier = null) Parameters Type Name Description System.String tier Methods AddDictionarySettings(Dictionary<String, IGateway>) Declaration public MultiGatewaysBuilder AddDictionarySettings(Dictionary<string, IGateway> map) Parameters Type Name Description Dictionary < System.String , IGateway > map Returns Type Description MultiGatewaysBuilder AddEnvironmentalVariables() Declaration public MultiGatewaysBuilder AddEnvironmentalVariables() Returns Type Description MultiGatewaysBuilder AddEnvironmentalVariables(String) Declaration public MultiGatewaysBuilder AddEnvironmentalVariables(string tier) Parameters Type Name Description System.String tier Returns Type Description MultiGatewaysBuilder AddTextFile(String) Declaration public MultiGatewaysBuilder AddTextFile(string path) Parameters Type Name Description System.String path Returns Type Description MultiGatewaysBuilder AddTextFile(String, String) Declaration public MultiGatewaysBuilder AddTextFile(string path, string delimeter) Parameters Type Name Description System.String path System.String delimeter Returns Type Description MultiGatewaysBuilder AddTextFile(String, String, String) Declaration public MultiGatewaysBuilder AddTextFile(string path, string delimeter, string tier) Parameters Type Name Description System.String path System.String delimeter System.String tier Returns Type Description MultiGatewaysBuilder Build() Declaration public IGateways Build() Returns Type Description IGateways CreateNew() Declaration public static MultiGatewaysBuilder CreateNew() Returns Type Description MultiGatewaysBuilder Implements IMultiGatewaysBuilder Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IGatewayMonitor.html": {
    "href": "Api/ATAP.Utilities.Http.IGatewayMonitor.html",
    "title": "Interface IGatewayMonitor | ATAP Utilities",
    "keywords": "Interface IGatewayMonitor Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IGatewayMonitor Properties GatewayEntryMonitors Declaration Dictionary<string, IGatewayEntryMonitor> GatewayEntryMonitors { get; set; } Property Value Type Description Dictionary < System.String , IGatewayEntryMonitor > Name Declaration string Name { get; } Property Value Type Description System.String Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.html": {
    "href": "Api/ATAP.Utilities.Http.html",
    "title": "Namespace ATAP.Utilities.Http | ATAP Utilities",
    "keywords": "Namespace ATAP.Utilities.Http Classes Gateway GatewayBuilder GatewayEntry GatewayEntryBuilder GatewayEntryMonitor GatewayEntryMonitorBuilder GatewayMonitor GatewayMonitorBuilder GatewayMonitors GatewayMonitorsBuilder Gateways GenericWebGet HttpRequestMessageBuilder MultiGatewaysBuilder SingletonHttpClient WebGet<TResult> Interfaces IGateway IGatewayBuilder IGatewayEntry IGatewayEntryBuilder IGatewayEntryMonitor IGatewayEntryMonitorBuilder IGatewayMonitor IGatewayMonitorBuilder IGatewayMonitors IGatewayMonitorsBuilder IGateways IHttpRequestMessageBuilder IMultiGatewaysBuilder"
  },
  "Api/ATAP.Utilities.Http.IGatewayEntryBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.IGatewayEntryBuilder.html",
    "title": "Interface IGatewayEntryBuilder | ATAP Utilities",
    "keywords": "Interface IGatewayEntryBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IGatewayEntryBuilder Methods Build() Declaration GatewayEntry Build() Returns Type Description GatewayEntry Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IGatewayBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.IGatewayBuilder.html",
    "title": "Interface IGatewayBuilder | ATAP Utilities",
    "keywords": "Interface IGatewayBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IGatewayBuilder Methods Build() Declaration IGateway Build() Returns Type Description IGateway Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IGatewayMonitorsBuilder.html": {
    "href": "Api/ATAP.Utilities.Http.IGatewayMonitorsBuilder.html",
    "title": "Interface IGatewayMonitorsBuilder | ATAP Utilities",
    "keywords": "Interface IGatewayMonitorsBuilder Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IGatewayMonitorsBuilder Methods Build() Declaration GatewayMonitors Build() Returns Type Description GatewayMonitors Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.IGateways.html": {
    "href": "Api/ATAP.Utilities.Http.IGateways.html",
    "title": "Interface IGateways | ATAP Utilities",
    "keywords": "Interface IGateways Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public interface IGateways Methods Add(String, IGateway) Declaration void Add(string Key, IGateway gateway) Parameters Type Name Description System.String Key IGateway gateway Get(String) Declaration IGateway Get(string Key) Parameters Type Name Description System.String Key Returns Type Description IGateway Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.GenericWebGet.html": {
    "href": "Api/ATAP.Utilities.Http.GenericWebGet.html",
    "title": "Class GenericWebGet | ATAP Utilities",
    "keywords": "Class GenericWebGet Inheritance System.Object WebGet < HttpResponseMessage > GenericWebGet Inherited Members WebGet<HttpResponseMessage>.FetchAsync(String) WebGet<HttpResponseMessage>.FetchAsync(Policy, HttpRequestMessage) WebGet<HttpResponseMessage>.GetAsync() WebGet<HttpResponseMessage>.HttpRequestMessage WebGet<HttpResponseMessage>.Policy Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class GenericWebGet : WebGet<HttpResponseMessage> Constructors GenericWebGet(Policy, HttpRequestMessage) Declaration public GenericWebGet(Policy policy, HttpRequestMessage httpRequestMessage) Parameters Type Name Description Policy policy HttpRequestMessage httpRequestMessage Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.GatewayEntry.html": {
    "href": "Api/ATAP.Utilities.Http.GatewayEntry.html",
    "title": "Class GatewayEntry | ATAP Utilities",
    "keywords": "Class GatewayEntry Inheritance System.Object GatewayEntry Implements IGatewayEntry Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class GatewayEntry : object, IGatewayEntry Constructors GatewayEntry(String, String) Declaration public GatewayEntry(string name, string rUri) Parameters Type Name Description System.String name System.String rUri Properties APIKey Declaration public string APIKey { get; set; } Property Value Type Description System.String Name Declaration public string Name { get; } Property Value Type Description System.String ReqDataPayloadType Declaration public Type ReqDataPayloadType { get; set; } Property Value Type Description Type RspDataPayloadType Declaration public Type RspDataPayloadType { get; set; } Property Value Type Description Type RUri Declaration public string RUri { get; } Property Value Type Description System.String Implements IGatewayEntry Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Api/ATAP.Utilities.Http.Gateways.html": {
    "href": "Api/ATAP.Utilities.Http.Gateways.html",
    "title": "Class Gateways | ATAP Utilities",
    "keywords": "Class Gateways Inheritance System.Object Gateways Implements IGateways Namespace : ATAP.Utilities.Http Assembly : ATAP.Utilities.Http.dll Syntax public class Gateways : object, IGateways Constructors Gateways() Declaration public Gateways() Methods Add(String, IGateway) Declaration public void Add(string Key, IGateway gateway) Parameters Type Name Description System.String Key IGateway gateway Get(String) Declaration public IGateway Get(string Key) Parameters Type Name Description System.String Key Returns Type Description IGateway Implements IGateways Extension Methods ATAP.Utilities.ZSandbox.ObjectUtilities.ArePropertiesNotNull<T>(T)"
  },
  "Articles/ATAP.Utilities.1ConsoleTestRunner/Docs/ReadMe.html": {
    "href": "Articles/ATAP.Utilities.1ConsoleTestRunner/Docs/ReadMe.html",
    "title": "Placeholder | ATAP Utilities",
    "keywords": "Placeholder"
  },
  "Articles/ATAP.Utilities.BuildTooling.Chocolatey/Docs/ReadMe.html": {
    "href": "Articles/ATAP.Utilities.BuildTooling.Chocolatey/Docs/ReadMe.html",
    "title": "Placeholder | ATAP Utilities",
    "keywords": "Placeholder"
  },
  "Articles/Docs/VisualStudioExtensions.html": {
    "href": "Articles/Docs/VisualStudioExtensions.html",
    "title": "Visual Studio settings and Extensions needed to build ATAP.Utilities solution and project | ATAP Utilities",
    "keywords": "Visual Studio settings and Extensions needed to build ATAP.Utilities solution and project VSIX extensions GhostDoc Community Edition (tbd) * Used to create XML documentation inside each .cs file that socuments public classes, fields, methods, and properties. * Machine-wide configuration settings for GhostDoc are stored here: TBD * Solution-wide configuration settings for GhostDoc are stored here: TBD * Project-wide configuration settings for GhostDoc are stored here: TBD Installation Details * use standard installation instructions DocFx (tbd) * used to create a static web site from the XML documentation in the .cs files * Templates for the static web site are stored here: * additional content (CSS and JS) are stored here: * Configuration information to publish the static website to GitHub pages is stored here: Installation Details * use standard installation instructions choco install docfx -y for a machine-wide installation The AutoDoc project in a Solution This project builds the static documentation website. The gh-pages branch of a repository should point to the latest release version of this project. The repository's ReadMe.md file should contain a prominent link to the Doc directroy of this project see also https://dzone.com/articles/generating-documentation-with-docfx-as-part-of-a-v To speed up development, dot NOT build the AutoDoc project automatically. On the menu bar, choose Build > Configuration Manager. In the Project contexts table, locate the project you want to exclude from the build. In the Build column for the project, clear the check box. Build the AutoDoc project using the command line and the --serve option to preview your changes. Visual Studio Configuration settings tbd msBuild custom targets and tasks from ATAP Targets * Target that executes if a projects output are invalid with respect to the project's inputs * Target that creates a lockfile * Target that deletes a lockfile * Target that calls the Task to create a lockfile if project outputs are invalid with respoect to inputs :TBD Tasks GetVersion: Task to read the Version Information from a specified file SetVersion: Task to modify the Version Information in a specified file UpdateVersion: Task to produces the new values for ASsembly Version, FileVersion, and AssemblyInformationalVersion attributes Installation Details * create a .build folder under the solution dir * Add the ATAP.BuildTooling.CSharp NuGet Package msBuild custom targets and tasks from MSBuild Community project Tasks * Create a file (lockfile) * Remove a file (lockfile) Installation Details * create a .build folder under the solution dir * Add the Community Tools NuGet Package How to distribute cross-framework custom tasks via NuGet for cro https://natemcmaster.com/blog/2017/07/05/msbuild-task-in-nuget/ Custom PowerShell scripts for Visual Studio Installation Details * create a .build folder under the solution dir * Add the ATAP.BuildTooling.PPowerShell NuGet Package Useful utility programs outside of Visual Studio MSbuild Structured log viewer *** Unstable for VS 2018 15.8.9 MSbuild logging can be turned on for visual studio with the vsix package https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools MSBuild logs are written to C:\\Users<username>\\AppData\\Local\\Temp AKA %APPDATA%\\Local\\Temp (cmd.exe) or \"$Env:AppData\\Local\\Temp\" (PowerShell) Installation Details Use Chocolatey https://chocolatey.org/packages/msbuild-structured-log-viewer choco install msbuild-structured-log-viewer"
  },
  "Articles/Docs/ATTRIBUTION.html": {
    "href": "Articles/Docs/ATTRIBUTION.html",
    "title": "Attribution of ideas | ATAP Utilities",
    "keywords": "Attribution of ideas The maintainers and contributors to this repository feel it is important to credit the individuals and organizations who have taken their time to publish ideas and guides. This document provides a place to mention ALL of teh works that have influenced the design and implementation of teh repository's content. Documentation Creation of a repository or project's ReadMe file https://github.com/noffle/art-of-readme https://github.com/jehna/readme-best-practices https://blog.algorithmia.com/github-readme-analyzer/ Creation of a repository's documentation site https://dotnet.github.io/docfx/ https://visualstudiomagazine.com/articles/2017/02/21/vs-dotnet-code-documentation-tools-roundup.aspx Adding triple-Slash (///) comments to code https://submain.com/products/ghostdoc.aspx * Commercial editions as well as free community version Visual Studio Doing Builds Build Logging Project System Tools (Structured MSBUILD log viewer) https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools and http://msbuildlog.com/ New Project System for MSBuild https://github.com/dotnet/project-system/blob/master/docs/opening-with-new-project-system.md\" Obsolete The following links are to projects or articles no longer included in the solution. However, they were considered relevant at one time, and certainly will contain information worth reviewing. MSBump: Used for automatic build number bumping and Nuget Package versioning https://github.com/BalassaMarton/MSBump"
  },
  "Articles/README.html": {
    "href": "Articles/README.html",
    "title": "ATAP.Utilities | ATAP Utilities",
    "keywords": "--ToDo - AltText for accessibility I am actively developing this documentation static website, and publishing to the ATAP Utilities GitHub Pages host. Over the course of the next few weeks, the site will be in a constant state of flux, but hopefully will settle down after the automation tools are completed and content is written. ATAP.Utilities These are a collection of Projects/Assemblies that provide a variety of data structures and algorithms to make programming life easier. Much of the features of ATAP's ACE project and the Blazor-related demos are implemented in these utilities. This repository includes enhancements to Visual Studio, in the form of MSBuild tooling, including MSBuild Tasks, Targets, and properties, along with PowerShell scripts and Modules. The setup and usage instructions for the projects, along with QuickStarts, Guides and Tutorials for these projects and articles on using other 3rd party Open Source Software (OSS) and commercial products to make programming withing Visual Studdio easier are contained in the repository and published to the repository's documentation site, currently hosted in GitHub Pages here: https://billhertzing.github.io/ATAP.Utilities/Index.html Documentation specifically on using the AutoDoc project within this repository to help you create a static documentation website for your repository can be found here. here Installing / Getting started The only way at the moment is to fork the repository, build the packages, and work with your own copy. The following distribution methods are under active development, but not yet released beyond local feed. The extended MSBuild tooling in this Repository is where the development and eventual production code will reside. The individual assemblies are distributed as NuGet packages. The entire repository can be installed via NuGet. There is a NuGet package dedicated to installing just the MSBuild tooling enhancements. There is a NuGet package dedicated to installing just the AutoDoc project to a repository. Instructions for adding individual assemblies to your projects via NuGet: (tbd) In addition to NuGet, the packages are distributed by Chocolatey. Instructions for getting the MSuild tooling enhancements via Chocolatey: (tbd) /<placeholder - continue writing repository README from here> Did you know that there are blogs dedicated to helping you write a ReadMe.md file for a GitHub repository? https://github.com/noffle/art-of-readme https://github.com/jehna/readme-best-practices The content below came from the template in https://github.com/jehna/readme-best-practices Here you should say what actually happens when you execute the code above. Initial Configuration Some projects require initial configuration (e.g. access tokens or keys, npm i ). This is the section where you would document those requirements. Developing Here's a brief intro about what a developer must do in order to start developing the project further: git clone https://github.com/your/awesome-project.git cd awesome-project/ packagemanager install And state what happens step-by-step. Building If your project needs some additional steps for the developer to build the project after some code changes, state them here: ./configure make make install Here again you should state what actually happens when the code above gets executed. Deploying / Publishing In case there's some step you have to take that publishes this project to a server, this is the right time to state it. packagemanager deploy awesome-project -s server.com -u username -p password And again you'd need to tell what the previous code actually does. Features What's all the bells and whistles this project can perform? What's the main functionality You can also do another thing If you get really randy, you can even do this Configuration Here you should write what are all of the configurations a user can enter when using the project. Argument 1 Type: String Default: 'default value' State what an argument does and how you can use it. If needed, you can provide an example below. Example: awesome-project \"Some other value\" # Prints \"You're nailing this readme!\" Argument 2 Type: Number|Boolean Default: 100 Copy-paste as many of these as you need. Contributing When you publish something open source, one of the greatest motivations is that anyone can just jump in and start contributing to your project. These paragraphs are meant to welcome those kind souls to feel that they are needed. You should state something like: \"If you'd like to contribute, please fork the repository and use a feature branch. Pull requests are warmly welcome.\" If there's anything else the developer needs to know (e.g. the code style guide), you should link it here. If there's a lot of things to take into consideration, it is common to separate this section to its own file called CONTRIBUTING.md (or similar). If so, you should say that it exists here. Links Even though this information can be found inside the project on machine-readable format like in a .json file, it's good to include a summary of most useful links to humans using your project. You can include links like: Project homepage: https://your.github.com/awesome-project/ Repository: https://github.com/your/awesome-project/ Issue tracker: https://github.com/your/awesome-project/issues In case of sensitive bugs like security vulnerabilities, please contact info@ATAPConsulting.com directly instead of using issue tracker. We value your effort to improve the security and privacy of this project! Related projects: Your other project: https://github.com/BillHertzing/Ace Licensing The code in this project is licensed under MIT license."
  },
  "Articles/Docs/Building.html": {
    "href": "Articles/Docs/Building.html",
    "title": "Building the libraries | ATAP Utilities",
    "keywords": "Building the libraries I am actively developing this documentation static website, and publishing to the ATAP Utilities GitHub Pages host. Over the course of the next few weeks, the site will be in a constant state of flux, but hopefully will settle down after the automation tools are completed and content is written. Solution item Directory.Build.props has solution-wide settings for all build tasks Solution item Directory.Build.targets has solution-wide targets and tasks for all build tasks It includes the default targetframeworks, *** because TargetFrameworks is being imported from Directory.Build.Props, and does not appear in the .csproj file, using the default project type GUID will result in Visual Studio thinking the project is old-style, and attempt an upgrade. Ensuring that the project type GUID for .csproj files in the .sln is {9A19103F-16F7-4668-BE54-9A1E7A4F7556} will tell Visual studio that the .csproj is a new-style project. For example, Project(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Library3\", \"Library3.csproj\", \"{ADFEAAF5-225C-4E13-8B65-77057AAC44B8}\"<EndProject> see also \"Project Type GUIDs in the article https://github.com/dotnet/project-system/blob/master/docs/opening-with-new-project-system.md\" it includes the NuGet packaging and pusking properties and tasks Versioning is very difficult problem, the ATAP.Utilities.BuildTools projects contains files that extend the build process and include tasks and functions that perform versioning andpackaging Visual Studio Extensions CodeRush for Roslyn GitHub Extensions Powershell Tools for Visual Studio VisualStudio.GitStashExtension Microsoft Visual Studio Test Extensions Project System Tools (Structured MSBUILD log viewer) https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools and http://msbuildlog.com/ NuGet packages Solution-wide Install the MSBuild tasks and tooing to support rapid development builds, where each build should propagate to (local) NuGet feed. Install-Package UtilPack.NuGet.Push.MSBuild Library Specific Common to all Unit Test projects Xunit FluentAsserrtations MOQ Polly Servicestack Historical lessons learned Need is a way to version every Assembly/DDLL File/NugetPackage for lifecyclestages Development, QA, Staging, and Production Versioning should be able to be applied at a solution level to all projects Versioning should be applied to individual projects during development, and QA lifecycle stages. Every visual studio build should increment the build number (or revision), and the NuGet packageversion NuGet PackageVersion should mirror the major.minor.patch numbers found in the assembly version, with the addition of the string alpha/beta/RC-nnn Solution-wide version numbers are stored in the .sln file, and represent the last public released version (major,minor.patch) Project-specific version numbers are stored in a properties/AssemblyInfo.cs file. Hardest part of the problem is hooking up the tasks that reads and changes the data inside of AssemblyInfo.cs fiile task should run only if an assembly is going to be built (i.e., the .proj outputs are out-of-date with respect to the .proj inputs. assemblyInfo.cs file should be changed only if the assembly is being built. AssemblyVersion, AssemblyFileVersion, and AssemblyInformationalVersion are read from the assemblyInfo.cs file, and possibly modified and written back out to the same file. If the solution or project is multitargeted, the assembly info is changed only once, and before the compilation portion of the build ocures. If the solution or project is not multitargeted, the assembly info is still changed only once, and still before the compilation portion of the build ocures. If the Major, Minor, Patch, Build, Version, and/or PackageVersion info in the Solution is greater than the corresponding version in the .proj file, then assemblyInfo.cs should be changed, and this should be done before the evaluation of inputs and outputs takes place Set the parallel build options to build only 1 tasks to see the exact order that build tasks are called Set the build verbosity to detailed so the output has lots oof data about the build process tried adding properties and tasks in the Directory.Build.props file tried the Visual Studio marketplace extensions Automatic Versioning from Precision Infinity tried the Visual Studio marketplace extensions MsBump tried extending the msbuild tasks by adding the MSCommunity Build Tasks files MSBuildTasks tried adding properties and tasks in the Directory.Build.targets file tried adding a new .targets file to the solution, ATAP.Utilities.BuildTooling.targets tried adding inline task code written in C# to ATAP.Utilities.BuildTooling.targets Learend that inline code uses an old compiler, not Roslyn tried adding the NuGet package RoslynCodeTaskFactory projects coulld not find the installed package location, the variable that is supposed to identify the path to the DLL was never set tried building a DLL that holds the new tasks C# code, compiled and ready to run ToDo: Build the packages in Visual Studio and deploy to a local feed Add tasks to sign assemblies Deploy Beta checkin or better to a CI build tool (MyGet feed) deploy RC or better to a public feed (NuGet) Move other packages dependencies to package from project Build Chocolatey package and install scripts Add commands to the visual studio IDE using tasks.vs.json Directory.Build.props are loaded before the microsoft targets Directory.Build.targets are loaded after the microsoft targets Directory.Build.props specifies the SolutionDir relative to the location where the build takes place Directory.Build.props specifies the SolutionBuildToolsBaseDir where all the custom build tools are located, relative to the SolutionDir Directory.Build.props specifies the MSBuildCommunityTasksPath where the MSBuild Community Extensions project's tasks extensions are located, relative to the SolutionBuildToolsBaseDir Directory.Build.props specifies the ATAPUtilitiesBuildToolingTasksPath path, relative to the SolutionBuildToolsBaseDir There are two different ATAP.Utilities.BuildTooling Assemblies, one for Net Full (used by Visual Studio IDE builds), and one for .NetCore (used by dotnet builds) There are two diifferent configurations of the ATAP.Utilities.BuildTooling Assemblies, Release, which has no additional Debug logging, and Debug, which instructs the custom ATAP code to invoke additional debugging messages when it runs Directory.Build.props specifies the correct ATAPUtilitiesBuildToolingTasksAssembly, based on the MSBuildRuntimeType, (VS IDE or DotNet), and the Release/Debug configuration. Directory.Build.props specifies how version bumping happens Directory.Build.props specifies where per-assembly version information is stored, in the VersionFile property the VersionFile property in Directory.Build.props specifies the path to the AssemblyInfo.cs relative to the $(MSBuildProjectDirectory) Directory.Build.props specifies NuGetLocalFeedPath which is the absolute location for a local BuGet package feed, but only if that property has not yet been defined. Directory.Build.targets imports the MSBuild Community Extensions project's MSBuildTasks.Targets based on the MSBuildCommunityTasksPath Directory.Build.targets imports the ATAP.Utilities.BuildTooling.Target based on the ATAPUtilitiesBuildToolingTasksPath Directory.Build.targets defines a custom target \"PublishAfterBuild\", which runs after \"Generate NuSpec\" which uses Command=\"NuGet.exe push ...\" to push the newly crteated NuGet package to NuGetLocalFeedPath ATAP.Utilities.BuildTooling.Target contains the target PrintBuildVariables PrintBuildVariables will log the values of many built-in and custom MSBuild properties, if the ATAPBuildToolingConfiguration property, as specified in the Directory.Build.props, is 'Debug' PrintBuildVariables runs after the following targets: AfterTargets=\"_SetBuildInnerTarget; BeforeBuild; BeforeCoreBuild; GenerateNuspec\"> ATAP.Utilities.BuildTooling.Target imports the tasks \"\"ATAP.Utilities.BuildTooling.GetVersion\", \"ATAP.Utilities.BuildTooling.NewVersionIfNeeded\", \"ATAP.Utilities.BuildTooling.SetVersion\" from $(ATAPUtilitiesBuildToolingTasksAssembly) ATAP.Utilities.BuildTooling.Target contains the target UpdateVersionifNecessary UpdateVersionifNecessary runs before the target: BeforeTargets=\"DispatchToInnerBuilds\" UpdateVersionifNecessary calls the C# function GetVersion (found in $(ATAPUtilitiesBuildToolingTasksAssembly)) to parse the version information out of the $(VersionFile) UpdateVersionifNecessary calls the C# function NewVersionIfNeeded (found in $(ATAPUtilitiesBuildToolingTasksAssembly)) to perform the logic that decides if the $(VersionFile) needs to be modified UpdateVersionifNecessary calls the C# function SetVersion (found in $(ATAPUtilitiesBuildToolingTasksAssembly)) to modify the version information in the $(VersionFile), but only if NewVersionIfNeeded sets the property $(NewVersionNeeded) to true $(ATAPUtilitiesBuildToolingTasksAssembly) contains C# functions used by the build tools. Utilities.MakeBuild (static function) creates an integer used as the value of Build Utilities.MakePackageVersion (static function) creates a string from the used as the value of NuGet Package Version Utilities.TryParsePackageVersion (static function) returns a boolean, and creates a number of integers and strings that are the individual pieces of a parsed Nuget Package Version The BuildTooling Assembly gets locked by VS IDE when it does a build, the only way to replace/update it is to quit out of VS IDE. It is important to build both the debug and release versions together. Visual Studio 2017 15. 8. 3 create new spec files during a build and pack. If a dependency on another packages found, the Noose Tech file will specify a version of the required package of greater than 1.0.0. but before a package reaches version one while it is under development, the new spec file will not restore the new Subspace Subspace Library . one way around this dilemma is to always create a version 1.0 as a package and there she was, even if there is only placeholders for functionality.. a better approach, is to put two minimal identifying piece of functionality into version 1.0.0. and includes unit test the test all four combinations of interrogation. Every solution has a directory wide props and targets file. the targets file simply drains in the community msbuild extensions and VHF utilities buildtooling extensions Custom tasks written in C sharp that help build Solutions and projects, are found in the project atsp.utilities. buikdtooljng. This is compiled into a dll, and package into a nougat package. Built in Drbug and release mode. is there or issue with Dell to installation, for when building something similar to Bill to him before the first version to ever exist. CC top targets file has examples on turning on and turning off conditionally calls to the custom task. ATAP.Utilities.BuildTooling.CSharp C's files contains the code for tasks It demonstrates 3 custom tasks. One task gets the version file information to get the current information. Another tasks knows how to update the version file. A third task, UpdateVersion , Knows how to get version information from the current .csproj file, calls Get version for version information, compares the two, decides what the new version information should be, and sets that information into the version file. The version information is inspected once for each project involved on every build. . #Visual Studio Tips and Techniques This section provides informatio on how to use the features of Visual Studio 2017, and theinstalled extensions, to improve your code quality and reduce your coding frustrations MSBuild Logging and Build Log Viewer Visual Studio 2017 (version 15.4 or later) Install the Project System Tools extension (insert xref to instructions) In Visual Studio, choose the View > Other Windows > Build Logging menu item. Click on the \"play\" button. This will cause design time builds to show up in the build logging tool window. If you have the MSBuild Binary and Structured Log Viewer installed, you can double-click on a log to view it in the viewer, otherwise you can right-click and choose Save As... to save the log in the new binary log format. Installing the structure log vieweer https://github.com/KirillOsenkov/MSBuildStructuredLog/releases/download/v2.0.46/MSBuildStructuredLogSetup.exe"
  }
}