using System.Collections.Generic;
using ATAP.Utilities.Philote;

namespace ATAP.Utilities.GenerateProgram {

  public record GCompilationUnit : IGCompilationUnit {
    public GCompilationUnit(string gName = default, string gRelativePath = default, string gFileSuffix = default, Dictionary<IPhilote<IGUsing>, IGUsing> gUsings = default,
      Dictionary<IPhilote<IGUsingGroup>, IGUsingGroup> gUsingGroups = default,
      Dictionary<IPhilote<IGNamespace>, IGNamespace> gNamespaces = default,
      IGPatternReplacement gPatternReplacement = default,
    IGComment gComment = default
      ) {
      GName = gName == default ? "" : gName;
      GRelativePath = gRelativePath == default ? "" : gRelativePath;
      GFileSuffix = gFileSuffix == default ? ".cs" : gFileSuffix;
      GUsings = gUsings == default ? new Dictionary<Philote<GUsing>, GUsing>() : gUsings;
      GUsingGroups = gUsingGroups == default ? new Dictionary<Philote<GUsingGroup>, GUsingGroup>() : gUsingGroups;
      GNamespaces = gNamespaces == default ? new Dictionary<Philote<GNamespace>, GNamespace>() : gNamespaces;
      GPatternReplacement = gPatternReplacement == default ? new GPatternReplacement() : gPatternReplacement;
      GComment = gComment == default ? new GComment() : gComment;
      Philote = new Philote<GCompilationUnit>();
    }

    public string GName { get; init; }
    public Dictionary<IPhilote<IGUsingGroup>, IGUsingGroup> GUsingGroups { get; init; }
    public Dictionary<IPhilote<IGUsing>, IGUsing> GUsings { get; init; }
    public Dictionary<IPhilote<IGNamespace>, IGNamespace> GNamespaces { get; init; }
    public string GRelativePath { get; init; }
    public string GFileSuffix { get; init; }
    public IGPatternReplacement GPatternReplacement { get; init; }
    public IGComment GComment { get; init; }
    public IPhilote<IGCompilationUnit> Philote { get; init; }
    public static string Header { get; } = "// " + StringConstants.AutoGeneratedHeaderCommentTextStringDefault;
  }
}

