C:\Dropbox\whertzing\Visual Studio 2013\Projects\Modules\FileIO\packages\StudioShell.Provider.1.6.4.0\tools\chocolateyInstall.ps1
#
#   Copyright (c) 2013 Code Owls LLC, All Rights Reserved.
#
#   Licensed under the Microsoft Reciprocal License (Ms-RL) (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.opensource.org/licenses/ms-rl
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

try
{
    $mydocs = [environment]::getFolderPath( 'mydocuments' );
    $packagePath = Split-Path -parent $MyInvocation.MyCommand.Definition;
	$modulePath = $Env:PSModulePath -split ';' -match [regex]::escape($mydocs) | select -First 1;
	
    write-debug "installing StudioShell into local module repository at $modulePath" 
	
    if( test-path "$modulepath/StudioShell" )
    {
        remove-item $modulePath/StudioShell -force -recurse -erroraction 0;
    }
    
	ls $packagePath | Copy-Item -recurse -Destination $modulePath -Force;	
    
	$addInInstallPath = $modulePath | Join-Path -ChildPath "StudioShell\bin";
	
	$settingsSpec = join-path $addInInstallPath -child "UserProfile/settings.txt";
	$profileSpec = join-path $addInInstallPath -child "UserProfile/profile.ps1";
	$addinAssemblyPath = join-path $addInInstallPath -child "CodeOwls.StudioShell.dll";

	pushd $env:HOMEDRIVE;
    try
	{
		$studioShellProfileFolder = "$mydocs/CodeOwlsLLC.StudioShell";
		$profilePath = "$mydocs/CodeOwlsLLC.StudioShell/profile.ps1";
		$settingsPath = "$mydocs/CodeOwlsLLC.StudioShell/settings.txt";

		mkdir $studioShellProfileFolder -erroraction silentlycontinue;

        '2008','2010','2012', '9','10','11','12' | where { test-path "~/documents/Visual Studio $_" }  | % { 
            $n = @{ '9'='2008'; '10'='2010'; '11'='2012';'12'='2013' }[ $_ ], $_ | select -first 1;
            $addinFolder = "$mydocs/Visual Studio $_/Addins";
		    $addinFilePath = join-path $addinFolder -child "StudioShell.addin";
		    $addinSpec = join-path $addInInstallPath -child "StudioShell.VS${n}.AddIn";
        
            mkdir $addinFolder -erroraction silentlycontinue;
		    ( gc $addinSpec ) -replace '<Assembly>.+?</Assembly>',"<Assembly>$addinAssemblyPath</Assembly>" | out-file $addinFilePath;
        }
		if( -not( test-path $settingsPath ) )
        {
            cp $settingsSpec $settingsPath;
        }
        if( -not( test-path $profilePath ) )
        {
		  cp $profileSpec $profilePath
        }
	}
	finally
	{
		popd;
	}
	
    '10','11' | foreach {
	    if( test-path "HKCU:\software\Microsoft\VisualStudio\$_.0\PreloadAddinStateManaged" )
	    {
		    # reset addin registry flags to force a reload of UI extensions
		    Remove-ItemProperty -Path "HKCU:\software\Microsoft\VisualStudio\$_.0\PreloadAddinStateManaged" -Name *StudioShell*;
	    }
    }

  Write-ChocolateySuccess 'studioshell'
} 
catch 
{
  Write-ChocolateyFailure 'studioshell' $($_.Exception.Message)
  throw
}
C:\Dropbox\whertzing\Visual Studio 2013\Projects\psp1\packages\StudioShell.Provider.1.6.4.0\tools\chocolateyInstall.ps1
#
#   Copyright (c) 2013 Code Owls LLC, All Rights Reserved.
#
#   Licensed under the Microsoft Reciprocal License (Ms-RL) (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.opensource.org/licenses/ms-rl
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

try
{
    $mydocs = [environment]::getFolderPath( 'mydocuments' );
    $packagePath = Split-Path -parent $MyInvocation.MyCommand.Definition;
	$modulePath = $Env:PSModulePath -split ';' -match [regex]::escape($mydocs) | select -First 1;
	
    write-debug "installing StudioShell into local module repository at $modulePath" 
	
    if( test-path "$modulepath/StudioShell" )
    {
        remove-item $modulePath/StudioShell -force -recurse -erroraction 0;
    }
    
	ls $packagePath | Copy-Item -recurse -Destination $modulePath -Force;	
    
	$addInInstallPath = $modulePath | Join-Path -ChildPath "StudioShell\bin";
	
	$settingsSpec = join-path $addInInstallPath -child "UserProfile/settings.txt";
	$profileSpec = join-path $addInInstallPath -child "UserProfile/profile.ps1";
	$addinAssemblyPath = join-path $addInInstallPath -child "CodeOwls.StudioShell.dll";

	pushd $env:HOMEDRIVE;
    try
	{
		$studioShellProfileFolder = "$mydocs/CodeOwlsLLC.StudioShell";
		$profilePath = "$mydocs/CodeOwlsLLC.StudioShell/profile.ps1";
		$settingsPath = "$mydocs/CodeOwlsLLC.StudioShell/settings.txt";

		mkdir $studioShellProfileFolder -erroraction silentlycontinue;

        '2008','2010','2012', '9','10','11','12' | where { test-path "~/documents/Visual Studio $_" }  | % { 
            $n = @{ '9'='2008'; '10'='2010'; '11'='2012';'12'='2013' }[ $_ ], $_ | select -first 1;
            $addinFolder = "$mydocs/Visual Studio $_/Addins";
		    $addinFilePath = join-path $addinFolder -child "StudioShell.addin";
		    $addinSpec = join-path $addInInstallPath -child "StudioShell.VS${n}.AddIn";
        
            mkdir $addinFolder -erroraction silentlycontinue;
		    ( gc $addinSpec ) -replace '<Assembly>.+?</Assembly>',"<Assembly>$addinAssemblyPath</Assembly>" | out-file $addinFilePath;
        }
		if( -not( test-path $settingsPath ) )
        {
            cp $settingsSpec $settingsPath;
        }
        if( -not( test-path $profilePath ) )
        {
		  cp $profileSpec $profilePath
        }
	}
	finally
	{
		popd;
	}
	
    '10','11' | foreach {
	    if( test-path "HKCU:\software\Microsoft\VisualStudio\$_.0\PreloadAddinStateManaged" )
	    {
		    # reset addin registry flags to force a reload of UI extensions
		    Remove-ItemProperty -Path "HKCU:\software\Microsoft\VisualStudio\$_.0\PreloadAddinStateManaged" -Name *StudioShell*;
	    }
    }

  Write-ChocolateySuccess 'studioshell'
} 
catch 
{
  Write-ChocolateyFailure 'studioshell' $($_.Exception.Message)
  throw
}
C:\Dropbox\whertzing\Visual Studio 2013\Projects\Modules\CustomerAutomation\packages\StudioShell.Provider.1.6.4.0\tools\chocolateyInstall.ps1
#
#   Copyright (c) 2013 Code Owls LLC, All Rights Reserved.
#
#   Licensed under the Microsoft Reciprocal License (Ms-RL) (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.opensource.org/licenses/ms-rl
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

try
{
    $mydocs = [environment]::getFolderPath( 'mydocuments' );
    $packagePath = Split-Path -parent $MyInvocation.MyCommand.Definition;
	$modulePath = $Env:PSModulePath -split ';' -match [regex]::escape($mydocs) | select -First 1;
	
    write-debug "installing StudioShell into local module repository at $modulePath" 
	
    if( test-path "$modulepath/StudioShell" )
    {
        remove-item $modulePath/StudioShell -force -recurse -erroraction 0;
    }
    
	ls $packagePath | Copy-Item -recurse -Destination $modulePath -Force;	
    
	$addInInstallPath = $modulePath | Join-Path -ChildPath "StudioShell\bin";
	
	$settingsSpec = join-path $addInInstallPath -child "UserProfile/settings.txt";
	$profileSpec = join-path $addInInstallPath -child "UserProfile/profile.ps1";
	$addinAssemblyPath = join-path $addInInstallPath -child "CodeOwls.StudioShell.dll";

	pushd $env:HOMEDRIVE;
    try
	{
		$studioShellProfileFolder = "$mydocs/CodeOwlsLLC.StudioShell";
		$profilePath = "$mydocs/CodeOwlsLLC.StudioShell/profile.ps1";
		$settingsPath = "$mydocs/CodeOwlsLLC.StudioShell/settings.txt";

		mkdir $studioShellProfileFolder -erroraction silentlycontinue;

        '2008','2010','2012', '9','10','11','12' | where { test-path "~/documents/Visual Studio $_" }  | % { 
            $n = @{ '9'='2008'; '10'='2010'; '11'='2012';'12'='2013' }[ $_ ], $_ | select -first 1;
            $addinFolder = "$mydocs/Visual Studio $_/Addins";
		    $addinFilePath = join-path $addinFolder -child "StudioShell.addin";
		    $addinSpec = join-path $addInInstallPath -child "StudioShell.VS${n}.AddIn";
        
            mkdir $addinFolder -erroraction silentlycontinue;
		    ( gc $addinSpec ) -replace '<Assembly>.+?</Assembly>',"<Assembly>$addinAssemblyPath</Assembly>" | out-file $addinFilePath;
        }
		if( -not( test-path $settingsPath ) )
        {
            cp $settingsSpec $settingsPath;
        }
        if( -not( test-path $profilePath ) )
        {
		  cp $profileSpec $profilePath
        }
	}
	finally
	{
		popd;
	}
	
    '10','11' | foreach {
	    if( test-path "HKCU:\software\Microsoft\VisualStudio\$_.0\PreloadAddinStateManaged" )
	    {
		    # reset addin registry flags to force a reload of UI extensions
		    Remove-ItemProperty -Path "HKCU:\software\Microsoft\VisualStudio\$_.0\PreloadAddinStateManaged" -Name *StudioShell*;
	    }
    }

  Write-ChocolateySuccess 'studioshell'
} 
catch 
{
  Write-ChocolateyFailure 'studioshell' $($_.Exception.Message)
  throw
}
C:\Dropbox\whertzing\Visual Studio 2013\Projects\Modules\FileIO\FileIO.Packager\tools\ChocolateyInstall.ps1
# Runs every time a package is installed in a project

param($installPath, $toolsPath, $package, $project)

# $installPath is the path to the folder where the package is installed.
# $toolsPath is the path to the tools directory in the folder where the package is installed.
# $package is a reference to the package object.
# $project is a reference to the project the package was installed to.
C:\Dropbox\whertzing\Visual Studio 2013\Projects\Modules\PsakeATAP\packages\psake.4.3.2\tools\chocolateyInstall.ps1
try { 
  $nugetPath = $env:ChocolateyInstall
  $nugetExePath = Join-Path $nuGetPath 'bin'
  $packageBatchFileName = Join-Path $nugetExePath "psake.bat"

  $psakeDir = (Split-Path -parent $MyInvocation.MyCommand.Definition)
  #$path = ($psakeDir | Split-Path | Join-Path -ChildPath  'psake.cmd')
  $path = Join-Path $psakeDir  'psake.cmd'
  Write-Host "Adding $packageBatchFileName and pointing to $path"
  "@echo off
  ""$path"" %*" | Out-File $packageBatchFileName -encoding ASCII 

  write-host "PSake is now ready. You can type 'psake' from any command line at any path. Get started by typing 'psake /?'"

  Write-ChocolateySuccess 'psake'
} catch {
  Write-ChocolateyFailure 'psake' "$($_.Exception.Message)"
  throw 
}
C:\Dropbox\whertzing\Visual Studio 2013\Projects\Modules\PsakeATAP\PsakeATAP\ChocolateyInstall.ps1
$packageName = 'psakeATAP'
$url = 'file:\\fs\c$\Prd\InstallableSW\PSakeATAP.0.1.1.0047.nupkg'
$unzipLocation = (join-path $env:ProgramFiles 'WindowsPowerShell\Modules\test')

Install-ChocolateyZipPackage $packageName $url $unzipLocation
C:\Temp\ChocolateyCache\ChocolateyScratch\rabbitmq\3.7.3\tools\.chocolateyInstall.ps1.un~
Vim�UnDo� ��J�Y�m�N�I�P�:��t}A��)�b�S�Z              1                       Z�t�    _�                             ����                                                                                                                                                                                                                                                                                                                                                             Z�t�     �      
          5�_�                       ^    ����                                                                                                                                                                                                                                                                                                                                                             Z�t�     �      
         ^https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.3/rabbitmq-server-3.7.3.exe5�_�                       1    ����                                                                                                                                                                                                                                                                                                                               1          �       v   �    Z�t�     �   
            �Install-ChocolateyPackage 'rabbitmq' 'EXE' '/S' 'https://github.com/rabbitmq/rabbitmq-server/releases/download/rabbitmq_v3_6_14/rabbitmq-server-3.6.14.exe'5�_�                       1    ����                                                                                                                                                                                                                                                                                                                               1          �       v   �    Z�t�     �   
            2Install-ChocolateyPackage 'rabbitmq' 'EXE' '/S' ''5�_�                       0    ����                                                                                                                                                                                                                                                                                                                               1          �       v   �    Z�t�     �   
            1Install-ChocolateyPackage 'rabbitmq' 'EXE' '/S' '   _https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.3/rabbitmq-server-3.7.3.exe'5�_�                       1    ����                                                                                                                                                                                                                                                                                                                               1          �       v   �    Z�t�     �   
            �Install-ChocolateyPackage 'rabbitmq' 'EXE' '/S' ' https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.3/rabbitmq-server-3.7.3.exe'5�_�                            ����                                                                                                                                                                                                                                                                                                                               1          �       v   �    Z�t�    �      
       5�
C:\Temp\ChocolateyCache\ChocolateyScratch\rabbitmq\3.7.3\tools\chocolateyInstall.ps1
if(!$PSScriptRoot){ $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent }
. "$PSScriptRoot\ChocolateyHelpers.ps1"

$arguments = Get-ChocolateyPackageParameters ${Env:ChocolateyPackageParameters}

if ($arguments['RABBITMQBASE']) {
  [System.Environment]::SetEnvironmentVariable("RABBITMQ_BASE", $arguments['RABBITMQBASE'], "Machine" )
  ${Env:RABBITMQ_BASE} = $arguments['RABBITMQBASE']
}

Install-ChocolateyPackage 'rabbitmq' 'EXE' '/S' 'https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.3/rabbitmq-server-3.7.3.exe'

$rabbitPath = Get-RabbitMQPath
if (-not $arguments.ContainsKey('NOMANAGEMENT')) {
  Start-Process "$rabbitPath\sbin\rabbitmq-service.bat" 'enable rabbitmq_management --offline' -NoNewWindow -Wait
  Start-Process "$rabbitPath\sbin\rabbitmq-plugins.bat" 'enable rabbitmq_management' -NoNewWindow -Wait
}

Start-Process "$rabbitPath\sbin\rabbitmq-service.bat" 'install' -NoNewWindow -Wait
C:\Temp\ChocolateyCache\ChocolateyScratch\rabbitmq\3.7.3\tools\chocolateyInstall.ps1~
if(!$PSScriptRoot){ $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent }
. "$PSScriptRoot\ChocolateyHelpers.ps1"

$arguments = Get-ChocolateyPackageParameters ${Env:ChocolateyPackageParameters}

if ($arguments['RABBITMQBASE']) {
  [System.Environment]::SetEnvironmentVariable("RABBITMQ_BASE", $arguments['RABBITMQBASE'], "Machine" )
  ${Env:RABBITMQ_BASE} = $arguments['RABBITMQBASE']
}

Install-ChocolateyPackage 'rabbitmq' 'EXE' '/S' 'https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.3/rabbitmq-server-3.7.3.exe'

$rabbitPath = Get-RabbitMQPath
if (-not $arguments.ContainsKey('NOMANAGEMENT')) {
  Start-Process "$rabbitPath\sbin\rabbitmq-service.bat" 'enable rabbitmq_management --offline' -NoNewWindow -Wait
  Start-Process "$rabbitPath\sbin\rabbitmq-plugins.bat" 'enable rabbitmq_management' -NoNewWindow -Wait
}

Start-Process "$rabbitPath\sbin\rabbitmq-service.bat" 'install' -NoNewWindow -Wait
C:\Users\whertzing\.nuget\packages\carbon\2.8.1\Tools\chocolateyInstall.ps1
<#
.SYNOPSIS
Chocolately install script for Carbon.
#>
[CmdletBinding()]
param(
)

#Requires -Version 4
Set-StrictMode -Version 'Latest'
$ErrorActionPreference = 'Stop'

& (Join-Path -Path $PSScriptRoot -ChildPath '..\Carbon\Import-Carbon.ps1' -Resolve)

$installPath = Get-PowerShellModuleInstallPath
$installPath = Join-Path -Path $installPath -ChildPath 'Carbon'

$source = Join-Path -Path $PSScriptRoot -ChildPath '..\Carbon' -Resolve
if( -not $source )
{
    return
}

if( (Test-Path -Path $installPath -PathType Container) )
{
    $newName = 'Carbon{0}' -f [IO.Path]::GetRandomFileName()
    Write-Verbose ('Renaming existing Carbon module: {0} -> {1}' -f $installPath,$newName)
    Rename-Item -Path $installPath $newName
    $oldModulePath = Join-Path -Path (Get-PowerShellModuleInstallPath) -ChildPath $newName
    if( Test-Path -Path $oldModulePath -PathType Container )
    {
        Write-Verbose ('Removing old Carbon module: {0}' -f $oldModulePath)
        Remove-Item -Path $oldModulePath -Force -Recurse
    }
    else
    {
        return
    }

    if( Test-Path -Path $oldModulePath -PathType Container )
    {
        return
    }
}

Write-Verbose -Message ('Installing Carbon: {0} -> {1}' -f $source,$installPath)
Copy-Item -Path $source -Destination $installPath -Recurse
C:\Windows\WinSxS\amd64_microsoft.powershell.pester_31bf3856ad364e35_10.0.19041.1_none_8a237828132e61da\chocolateyInstall.ps1
[CmdletBinding()]
param ( )

end
{
    $modulePath      = Join-Path $env:ProgramFiles WindowsPowerShell\Modules
    $targetDirectory = Join-Path $modulePath Pester
    $scriptRoot      = Split-Path $MyInvocation.MyCommand.Path -Parent
    $sourceDirectory = Join-Path $scriptRoot Tools

    if ($PSVersionTable.PSVersion.Major -ge 5)
    {
        $manifestFile    = Join-Path $sourceDirectory Pester.psd1
        $manifest        = Test-ModuleManifest -Path $manifestFile -WarningAction Ignore -ErrorAction Stop
        $targetDirectory = Join-Path $targetDirectory $manifest.Version.ToString()
    }

    Update-Directory -Source $sourceDirectory -Destination $targetDirectory
    
    $binPath = Join-Path $targetDirectory bin
    Install-ChocolateyPath $binPath

    if ($PSVersionTable.PSVersion.Major -lt 4)
    {
        $modulePaths = [Environment]::GetEnvironmentVariable('PSModulePath', 'Machine') -split ';'
        if ($modulePaths -notcontains $modulePath)
        {
            Write-Verbose "Adding '$modulePath' to PSModulePath."

            $modulePaths = @(
                $modulePath
                $modulePaths
            )

            $newModulePath = $modulePaths -join ';'

            [Environment]::SetEnvironmentVariable('PSModulePath', $newModulePath, 'Machine')
            $env:PSModulePath += ";$modulePath"
        }
    }
}

begin
{
    function Update-Directory
    {
        [CmdletBinding()]
        param (
            [Parameter(Mandatory = $true)]
            [string] $Source,

            [Parameter(Mandatory = $true)]
            [string] $Destination
        )

        $Source = $PSCmdlet.GetUnresolvedProviderPathFromPSPath($Source)
        $Destination = $PSCmdlet.GetUnresolvedProviderPathFromPSPath($Destination)

        if (-not (Test-Path -LiteralPath $Destination))
        {
            $null = New-Item -Path $Destination -ItemType Directory -ErrorAction Stop
        }

        try
        {
            $sourceItem = Get-Item -LiteralPath $Source -ErrorAction Stop
            $destItem = Get-Item -LiteralPath $Destination -ErrorAction Stop

            if ($sourceItem -isnot [System.IO.DirectoryInfo] -or $destItem -isnot [System.IO.DirectoryInfo])
            {
                throw 'Not Directory Info'
            }
        }
        catch
        {
            throw 'Both Source and Destination must be directory paths.'
        }

        $sourceFiles = Get-ChildItem -Path $Source -Recurse |
                       Where-Object { -not $_.PSIsContainer }

        foreach ($sourceFile in $sourceFiles)
        {
            $relativePath = Get-RelativePath $sourceFile.FullName -RelativeTo $Source
            $targetPath = Join-Path $Destination $relativePath

            $sourceHash = Get-FileHash -Path $sourceFile.FullName
            $destHash = Get-FileHash -Path $targetPath

            if ($sourceHash -ne $destHash)
            {
                $targetParent = Split-Path $targetPath -Parent

                if (-not (Test-Path -Path $targetParent -PathType Container))
                {
                    $null = New-Item -Path $targetParent -ItemType Directory -ErrorAction Stop
                }

                Write-Verbose "Updating file $relativePath to new version."
                Copy-Item $sourceFile.FullName -Destination $targetPath -Force -ErrorAction Stop
            }
        }

        $targetFiles = Get-ChildItem -Path $Destination -Recurse |
                       Where-Object { -not $_.PSIsContainer }

        foreach ($targetFile in $targetFiles)
        {
            $relativePath = Get-RelativePath $targetFile.FullName -RelativeTo $Destination
            $sourcePath = Join-Path $Source $relativePath

            if (-not (Test-Path $sourcePath -PathType Leaf))
            {
                Write-Verbose "Removing unknown file $relativePath from module folder."
                Remove-Item -LiteralPath $targetFile.FullName -Force -ErrorAction Stop
            }
        }

    }

    function Get-RelativePath
    {
        param ( [string] $Path, [string] $RelativeTo )
        return $Path -replace "^$([regex]::Escape($RelativeTo))\\?"
    }

    function Get-FileHash
    {
        param ([string] $Path)

        if (-not (Test-Path -LiteralPath $Path -PathType Leaf))
        {
            return $null
        }

        $item = Get-Item -LiteralPath $Path
        if ($item -isnot [System.IO.FileSystemInfo])
        {
            return $null
        }

        $stream = $null

        try
        {
            $sha = New-Object System.Security.Cryptography.SHA256CryptoServiceProvider
            $stream = $item.OpenRead()
            $bytes = $sha.ComputeHash($stream)
            return [convert]::ToBase64String($bytes)
        }
        finally
        {
            if ($null -ne $stream) { $stream.Close() }
            if ($null -ne $sha)    { $sha.Clear() }
        }
    }
}
C:\$RECYCLE.BIN\S-1-5-21-79966073-2694646102-2002113053-1001\$RZ8699Q\3.4.0\chocolateyInstall.ps1
[CmdletBinding()]
param ( )

end
{
    $modulePath      = Join-Path $env:ProgramFiles WindowsPowerShell\Modules
    $targetDirectory = Join-Path $modulePath Pester
    $scriptRoot      = Split-Path $MyInvocation.MyCommand.Path -Parent
    $sourceDirectory = Join-Path $scriptRoot Tools

    if ($PSVersionTable.PSVersion.Major -ge 5)
    {
        $manifestFile    = Join-Path $sourceDirectory Pester.psd1
        $manifest        = Test-ModuleManifest -Path $manifestFile -WarningAction Ignore -ErrorAction Stop
        $targetDirectory = Join-Path $targetDirectory $manifest.Version.ToString()
    }

    Update-Directory -Source $sourceDirectory -Destination $targetDirectory
    
    $binPath = Join-Path $targetDirectory bin
    Install-ChocolateyPath $binPath

    if ($PSVersionTable.PSVersion.Major -lt 4)
    {
        $modulePaths = [Environment]::GetEnvironmentVariable('PSModulePath', 'Machine') -split ';'
        if ($modulePaths -notcontains $modulePath)
        {
            Write-Verbose "Adding '$modulePath' to PSModulePath."

            $modulePaths = @(
                $modulePath
                $modulePaths
            )

            $newModulePath = $modulePaths -join ';'

            [Environment]::SetEnvironmentVariable('PSModulePath', $newModulePath, 'Machine')
            $env:PSModulePath += ";$modulePath"
        }
    }
}

begin
{
    function Update-Directory
    {
        [CmdletBinding()]
        param (
            [Parameter(Mandatory = $true)]
            [string] $Source,

            [Parameter(Mandatory = $true)]
            [string] $Destination
        )

        $Source = $PSCmdlet.GetUnresolvedProviderPathFromPSPath($Source)
        $Destination = $PSCmdlet.GetUnresolvedProviderPathFromPSPath($Destination)

        if (-not (Test-Path -LiteralPath $Destination))
        {
            $null = New-Item -Path $Destination -ItemType Directory -ErrorAction Stop
        }

        try
        {
            $sourceItem = Get-Item -LiteralPath $Source -ErrorAction Stop
            $destItem = Get-Item -LiteralPath $Destination -ErrorAction Stop

            if ($sourceItem -isnot [System.IO.DirectoryInfo] -or $destItem -isnot [System.IO.DirectoryInfo])
            {
                throw 'Not Directory Info'
            }
        }
        catch
        {
            throw 'Both Source and Destination must be directory paths.'
        }

        $sourceFiles = Get-ChildItem -Path $Source -Recurse |
                       Where-Object { -not $_.PSIsContainer }

        foreach ($sourceFile in $sourceFiles)
        {
            $relativePath = Get-RelativePath $sourceFile.FullName -RelativeTo $Source
            $targetPath = Join-Path $Destination $relativePath

            $sourceHash = Get-FileHash -Path $sourceFile.FullName
            $destHash = Get-FileHash -Path $targetPath

            if ($sourceHash -ne $destHash)
            {
                $targetParent = Split-Path $targetPath -Parent

                if (-not (Test-Path -Path $targetParent -PathType Container))
                {
                    $null = New-Item -Path $targetParent -ItemType Directory -ErrorAction Stop
                }

                Write-Verbose "Updating file $relativePath to new version."
                Copy-Item $sourceFile.FullName -Destination $targetPath -Force -ErrorAction Stop
            }
        }

        $targetFiles = Get-ChildItem -Path $Destination -Recurse |
                       Where-Object { -not $_.PSIsContainer }

        foreach ($targetFile in $targetFiles)
        {
            $relativePath = Get-RelativePath $targetFile.FullName -RelativeTo $Destination
            $sourcePath = Join-Path $Source $relativePath

            if (-not (Test-Path $sourcePath -PathType Leaf))
            {
                Write-Verbose "Removing unknown file $relativePath from module folder."
                Remove-Item -LiteralPath $targetFile.FullName -Force -ErrorAction Stop
            }
        }

    }

    function Get-RelativePath
    {
        param ( [string] $Path, [string] $RelativeTo )
        return $Path -replace "^$([regex]::Escape($RelativeTo))\\?"
    }

    function Get-FileHash
    {
        param ([string] $Path)

        if (-not (Test-Path -LiteralPath $Path -PathType Leaf))
        {
            return $null
        }

        $item = Get-Item -LiteralPath $Path
        if ($item -isnot [System.IO.FileSystemInfo])
        {
            return $null
        }

        $stream = $null

        try
        {
            $sha = New-Object System.Security.Cryptography.SHA256CryptoServiceProvider
            $stream = $item.OpenRead()
            $bytes = $sha.ComputeHash($stream)
            return [convert]::ToBase64String($bytes)
        }
        finally
        {
            if ($null -ne $stream) { $stream.Close() }
            if ($null -ne $sha)    { $sha.Clear() }
        }
    }
}
C:\Windows\WinSxS\wow64_microsoft.powershell.pester_31bf3856ad364e35_10.0.19041.1_none_9478227a478f23d5\chocolateyInstall.ps1
[CmdletBinding()]
param ( )

end
{
    $modulePath      = Join-Path $env:ProgramFiles WindowsPowerShell\Modules
    $targetDirectory = Join-Path $modulePath Pester
    $scriptRoot      = Split-Path $MyInvocation.MyCommand.Path -Parent
    $sourceDirectory = Join-Path $scriptRoot Tools

    if ($PSVersionTable.PSVersion.Major -ge 5)
    {
        $manifestFile    = Join-Path $sourceDirectory Pester.psd1
        $manifest        = Test-ModuleManifest -Path $manifestFile -WarningAction Ignore -ErrorAction Stop
        $targetDirectory = Join-Path $targetDirectory $manifest.Version.ToString()
    }

    Update-Directory -Source $sourceDirectory -Destination $targetDirectory
    
    $binPath = Join-Path $targetDirectory bin
    Install-ChocolateyPath $binPath

    if ($PSVersionTable.PSVersion.Major -lt 4)
    {
        $modulePaths = [Environment]::GetEnvironmentVariable('PSModulePath', 'Machine') -split ';'
        if ($modulePaths -notcontains $modulePath)
        {
            Write-Verbose "Adding '$modulePath' to PSModulePath."

            $modulePaths = @(
                $modulePath
                $modulePaths
            )

            $newModulePath = $modulePaths -join ';'

            [Environment]::SetEnvironmentVariable('PSModulePath', $newModulePath, 'Machine')
            $env:PSModulePath += ";$modulePath"
        }
    }
}

begin
{
    function Update-Directory
    {
        [CmdletBinding()]
        param (
            [Parameter(Mandatory = $true)]
            [string] $Source,

            [Parameter(Mandatory = $true)]
            [string] $Destination
        )

        $Source = $PSCmdlet.GetUnresolvedProviderPathFromPSPath($Source)
        $Destination = $PSCmdlet.GetUnresolvedProviderPathFromPSPath($Destination)

        if (-not (Test-Path -LiteralPath $Destination))
        {
            $null = New-Item -Path $Destination -ItemType Directory -ErrorAction Stop
        }

        try
        {
            $sourceItem = Get-Item -LiteralPath $Source -ErrorAction Stop
            $destItem = Get-Item -LiteralPath $Destination -ErrorAction Stop

            if ($sourceItem -isnot [System.IO.DirectoryInfo] -or $destItem -isnot [System.IO.DirectoryInfo])
            {
                throw 'Not Directory Info'
            }
        }
        catch
        {
            throw 'Both Source and Destination must be directory paths.'
        }

        $sourceFiles = Get-ChildItem -Path $Source -Recurse |
                       Where-Object { -not $_.PSIsContainer }

        foreach ($sourceFile in $sourceFiles)
        {
            $relativePath = Get-RelativePath $sourceFile.FullName -RelativeTo $Source
            $targetPath = Join-Path $Destination $relativePath

            $sourceHash = Get-FileHash -Path $sourceFile.FullName
            $destHash = Get-FileHash -Path $targetPath

            if ($sourceHash -ne $destHash)
            {
                $targetParent = Split-Path $targetPath -Parent

                if (-not (Test-Path -Path $targetParent -PathType Container))
                {
                    $null = New-Item -Path $targetParent -ItemType Directory -ErrorAction Stop
                }

                Write-Verbose "Updating file $relativePath to new version."
                Copy-Item $sourceFile.FullName -Destination $targetPath -Force -ErrorAction Stop
            }
        }

        $targetFiles = Get-ChildItem -Path $Destination -Recurse |
                       Where-Object { -not $_.PSIsContainer }

        foreach ($targetFile in $targetFiles)
        {
            $relativePath = Get-RelativePath $targetFile.FullName -RelativeTo $Destination
            $sourcePath = Join-Path $Source $relativePath

            if (-not (Test-Path $sourcePath -PathType Leaf))
            {
                Write-Verbose "Removing unknown file $relativePath from module folder."
                Remove-Item -LiteralPath $targetFile.FullName -Force -ErrorAction Stop
            }
        }

    }

    function Get-RelativePath
    {
        param ( [string] $Path, [string] $RelativeTo )
        return $Path -replace "^$([regex]::Escape($RelativeTo))\\?"
    }

    function Get-FileHash
    {
        param ([string] $Path)

        if (-not (Test-Path -LiteralPath $Path -PathType Leaf))
        {
            return $null
        }

        $item = Get-Item -LiteralPath $Path
        if ($item -isnot [System.IO.FileSystemInfo])
        {
            return $null
        }

        $stream = $null

        try
        {
            $sha = New-Object System.Security.Cryptography.SHA256CryptoServiceProvider
            $stream = $item.OpenRead()
            $bytes = $sha.ComputeHash($stream)
            return [convert]::ToBase64String($bytes)
        }
        finally
        {
            if ($null -ne $stream) { $stream.Close() }
            if ($null -ne $sha)    { $sha.Clear() }
        }
    }
}
C:\ProgramData\chocolatey\lib\KB2919442\tools\ChocolateyInstall.ps1
$kb = "KB2919442"
$packageName = "KB2919442"
$silentArgs = "/quiet /norestart /log:`"$env:TEMP\$kb.Install.evt`""

$os = Get-WmiObject -Class Win32_OperatingSystem
$version = [Version]$os.Version

if ($version -eq $null -or $version -lt [Version]'6.3' -or $version -ge [Version]'6.4') {
	Write-Host "Skipping installation because this hotfix only applies to Windows 8.1 and Windows Server 2012 R2."
	return
}

if (Get-HotFix -id $kb -ea SilentlyContinue)
{
	Write-Host "Skipping installation because hotfix $kb is already installed."
	return
}

if ($os.ProductType -eq '1') {
	# Windows 8.1
	$url = "https://download.microsoft.com/download/9/D/A/9DA6C939-9E65-4681-BBBE-A8F73A5C116F/Windows8.1-KB2919442-x86.msu"
	$url64 = "https://download.microsoft.com/download/C/F/8/CF821C31-38C7-4C5C-89BB-B283059269AF/Windows8.1-KB2919442-x64.msu"
	$checksum = '3368C3A329F402FD982B15B399368627B96973F008A5456B5286BDFC10C1169B'
	$checksum64 = 'C10787E669B484674584A990E069295E8B81B5366F98508010A3AE181B729482'
} else {
	# Windows Server 2012 R2
	$url64 = "https://download.microsoft.com/download/D/6/0/D60ED3E0-93A5-4505-8F6A-8D0A5DA16C8A/Windows8.1-KB2919442-x64.msu"
	$checksum64 = 'C10787E669B484674584A990E069295E8B81B5366F98508010A3AE181B729482'
}

Install-ChocolateyPackage $packageName 'msu' $silentArgs $url $url64 -checksum $checksum -checksum64 $checksum64 -checksumType 'sha256' -validExitCodes @(0, 3010, 0x80240017)
C:\ProgramData\chocolatey\lib\KB2919355\tools\ChocolateyInstall.ps1
$kb = "KB2919355"
$packageName = "KB2919355"
$silentArgs = "/quiet /norestart /log:`"$env:TEMP\$kb.Install.evt`""

$os = Get-WmiObject -Class Win32_OperatingSystem
$version = [Version]$os.Version

if ($version -eq $null -or $version -lt [Version]'6.3' -or $version -ge [Version]'6.4') {
	Write-Host "Skipping installation because this hotfix only applies to Windows 8.1 and Windows Server 2012 R2."
	return
}

if (Get-HotFix -id $kb -ea SilentlyContinue)
{
	Write-Host "Skipping installation because hotfix $kb is already installed."
	return
}

if ($os.ProductType -eq '1') {
	# Windows 8.1
	$url = "https://download.microsoft.com/download/4/E/C/4EC66C83-1E15-43FD-B591-63FB7A1A5C04/Windows8.1-KB2919355-x86.msu"
	$url64 = "https://download.microsoft.com/download/D/B/1/DB1F29FC-316D-481E-B435-1654BA185DCF/Windows8.1-KB2919355-x64.msu"
	$checksum = 'F8BECA5B463A36E1FEF45AD0DCA6A0DE7606930380514AC1852DF5CA6E3F6C1D'
	$checksum64 = 'B0C9ADA530F5EE90BB962AFA9ED26218C582362315E13B1BA97E59767CB7825D'
} else {
	# Windows Server 2012 R2
	$url64 = "https://download.microsoft.com/download/2/5/6/256CCCFB-5341-4A8D-A277-8A81B21A1E35/Windows8.1-KB2919355-x64.msu"
	$checksum64 = 'B0C9ADA530F5EE90BB962AFA9ED26218C582362315E13B1BA97E59767CB7825D'
}

Install-ChocolateyPackage $packageName 'msu' $silentArgs $url $url64 -checksum $checksum -checksum64 $checksum64 -checksumType 'sha256' -validExitCodes @(0, 3010, 0x80240017)
C:\ProgramData\chocolatey\lib\PowerShell\tools\ChocolateyInstall.ps1
<#
See http://technet.microsoft.com/en-us/library/hh847769.aspx and http://technet.microsoft.com/en-us/library/hh847837.aspx
Windows PowerShell 5.0 runs on the following versions of Windows.
	Windows 10, installed by default
	Windows Server 2012 R2, install Windows Management Framework 5.0 to run Windows PowerShell 5.0
	Windows 8.1, install Windows Management Framework 5.0 to run Windows PowerShell 5.0
	Windows 7 with Service Pack 1, install Windows Management Framework 4.0 and THEN WMF 5.0 (as of 5.0.10105)
	Windows Server 2008 R2 with Service Pack 1, install Windows Management Framework 5.0 (as of 5.0.10105)
	Previous Windows versions - 5.0 is not supported.

Windows PowerShell 4.0 runs on the following versions of Windows.
	Windows 8.1, installed by default
	Windows Server 2012 R2, installed by default
	Windows 7 with Service Pack 1, install Windows Management Framework 4.0 (http://go.microsoft.com/fwlink/?LinkId=293881) to run Windows PowerShell 4.0
	Windows Server 2008 R2 with Service Pack 1, install Windows Management Framework 4.0 (http://go.microsoft.com/fwlink/?LinkId=293881) to run Windows PowerShell 4.0

Windows PowerShell 3.0 runs on the following versions of Windows.
	Windows 8, installed by default
	Windows Server 2012, installed by default
	Windows 7 with Service Pack 1, install Windows Management Framework 3.0 to run Windows PowerShell 3.0
	Windows Server 2008 R2 with Service Pack 1, install Windows Management Framework 3.0 to run Windows PowerShell 3.0
	Windows Server 2008 with Service Pack 2, install Windows Management Framework 3.0 to run Windows PowerShell 3.0
#>

[string]$packageName="PowerShell"
[string]$installerType="msu"
[string]$installlogfilename = "$env:TEMP\PowerShell-Install-$(Get-date -format 'yyyyMMddhhmm').evtx"
[string]$ThisPackagePSHVersion = '5.1.14409.1005'
[string]$silentArgs="/quiet /norestart /log:`"$installlogfilename`""
$toolsDir   = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"

[string]$urlWin81x86   =                 'https://download.microsoft.com/download/6/F/5/6F5FF66C-6775-42B0-86C4-47D41F2DA187/Win8.1-KB3191564-x86.msu'
[string]$urlWin81x86checksum   =         'F3430A90BE556A77A30BAB3AC36DC9B92A43055D5FCC5869DA3BFDA116DBD817'
[string]$urlWin2k12R2andWin81x64 =       'https://download.microsoft.com/download/6/F/5/6F5FF66C-6775-42B0-86C4-47D41F2DA187/Win8.1AndW2K12R2-KB3191564-x64.msu'
[string]$urlWin2k12R2andWin81x64checksum = 'A8D788FA31B02A999CC676FB546FC782E86C2A0ACD837976122A1891CEEE42C0'
[string]$urlWin7x86   =                  'https://download.microsoft.com/download/6/F/5/6F5FF66C-6775-42B0-86C4-47D41F2DA187/Win7-KB3191566-x86.zip'
[string]$urlWin7x86checksum   =          'EB7E2C4CE2C6CB24206474A6CB8610D9F4BD3A9301F1CD8963B4FF64E529F563'
[string]$urlWin2k8R2andWin7x64 =         'https://download.microsoft.com/download/6/F/5/6F5FF66C-6775-42B0-86C4-47D41F2DA187/Win7AndW2K8R2-KB3191566-x64.zip'
[string]$urlWin2k8R2andWin7x64checksum = 'F383C34AA65332662A17D95409A2DDEDADCEDA74427E35D05024CD0A6A2FA647'
[string]$urlWin2012 =                    'https://download.microsoft.com/download/6/F/5/6F5FF66C-6775-42B0-86C4-47D41F2DA187/W2K12-KB3191565-x64.msu'
[string]$urlWin2012checksum =            '4A1385642C1F08E3BE7BC70F4A9D74954E239317F50D1A7F60AA444D759D4F49'
[string]$ChecksumType       =            'sha256'

[string[]] $validExitCodes = @(0, 3010) # 2359302 occurs if the package is already installed

$osversionLookup = @{
"5.1.2600" = "XP";
"5.1.3790" = "2003";
"6.0.6001" = "Vista/2008";
"6.1.7600" = "Win7/2008R2";
"6.1.7601" = "Win7 SP1/2008R2 SP1"; # SP1 or later.
"6.2.9200" = "Win8/2012";
"6.3.9600" = "Win8.1/2012R2";
"10.0.*" = "Windows 10/Server 2016"
}

function Install-PowerShell5([string]$urlx86, [string]$urlx64 = $null, [string]$checksumx86 = $null,[string]$checksumx64 = $null) {
    $MinimumNet4Version = 378389
    $Net4Version = (get-itemproperty "hklm:software\microsoft\net framework setup\ndp\v4\full" -ea silentlycontinue | Select -Expand Release -ea silentlycontinue)
    if ($Net4Version -ge $MinimumNet4Version) {
        Install-ChocolateyPackage "$packageName" "$installerType" "$silentArgs" -url $urlx86 -url64 $urlx64 -checksum $checksumx86 -ChecksumType $ChecksumType -checksum64 $checksumx64 -ChecksumType64 $ChecksumType -validExitCodes $validExitCodes
        Write-Warning "$packageName requires a reboot to complete the installation."
    }
    else {
        throw ".NET Framework 4.5.2 or later required.  Use package named `"dotnet4.5` to upgrade.  Your .NET Release is `"$Net4Version`" but needs to be at least `"$MinimumNet4Version`"."
    }
}

$os = Get-WmiObject Win32_OperatingSystem
$osVersion = $os.version

$ProductName = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion' -Name 'ProductName').ProductName
$EditionId = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion' -Name 'EditionID').EditionId

#This will show us if we are running on Nano Server (Kernel version alone won't show this)
Write-Output "Running on: $ProductName, ($EditionId), Windows Kernel: $osVersion"

If ((get-service wuauserv).starttype -ieq 'Disabled')
{
  Throw "Windows Update Service is disabled - PowerShell updates are distributed as windows updates and so require the service.  Consider temporarily enabling it before calling this package and disabling again afterward."
}

try
{
    if ($PSVersionTable -and ($PSVersionTable.PSVersion -ge [Version]$ThisPackagePSHVersion)) {
	    Write-Warning "PowerShell version, $($PSVersionTable.PSVersion), is already installed."
	}
    else {
        #The following should not occur as PowerShell 5 is already installed
        if( ([version]$osVersion).Major -eq "10" ) {
            $osVersion = "$(([version]$osVersion).Major).$(([version]$osVersion).Minor).*"
        }

        Write-Output "Installing for OS: $($osversionLookup[$osVersion])"

		    switch ($osversionLookup[$osVersion]) {
            "Vista/2008" {
                Write-Warning "PowerShell 3 is the highest supported on Windows $($osversionLookup[$osVersion])."
                Write-Output "You can install PowerShell 3 using these parameters: 'PowerShell -version 3.0.20121027'"
            }
            "Win7/2008R2" {
                Write-Warning "PowerShell $ThisPackagePSHVersion Requires SP1 for Windows $($osversionLookup[$osVersion])."
                Write-Warning "Update to SP1 and re-run this package to install WMF/PowerShell 5"
                Write-Output "You can install PowerShell 3 using these parameters: 'PowerShell -version 3.0.20121027'"
            }
            "Win7 SP1/2008R2 SP1" {
                #Special Procedures for WMF 5.1
                $MinimumNet4Version = 378389
                $Net4Version = (get-itemproperty "hklm:software\microsoft\net framework setup\ndp\v4\full" -ea silentlycontinue | Select -Expand Release -ea silentlycontinue)
                if ($Net4Version -lt $MinimumNet4Version)
                {
                  throw ".NET Framework 4.5.2 or later required.  Use package named `"dotnet4.5` to upgrade.  Your .NET Release is `"$MinimumNet4Version`" but needs to be at least `"$MinimumNet4Version`"."
                }
                Else
                {
                  If ($PSVersionTable.PSVersion.Major -eq 3)
                  {
                    Write-Warning "Found WMF 3 On Win 7 or Server 2008 R2"
                    If (!(test-path env:ChocolateyForce))
                    {
                        Throw "This package will not install WMF 5.1 over 3.0 on Windows 7 or Server 2008 R2 Unless you use the -Force switch on the package command line."
                    }
                    Else
                    {
                        Write-Host " " 
                        Write-Host "  ***********************************************************************************************"
                        Write-Host "  *  This machine is running Windows or Server 2008 R2 with WMF 3 installed and                 *"
                        Write-Host "  *  -Force was used, Experimental PSModulePath Backup and Attempted Restore Will Be Performed  *"
                        Write-Host "  *     What will be done:                                                                      *"
                        Write-Host "  *       1) The custom parts of the PSModulePath backed up to BackupPSModulePath               *"
                        Write-Host "  *       2) A fix up script that appends those values to the PSModulePath is written to:       *"
                        Write-Host "  *             %WINDIR%\Temp\psmodulepathfixup.ps1                                             *"
                        Write-Host "  *       3) A scheduled task is setup for the next reboot that runs the fix up script          *"
                        Write-Host "  *                                                                                             *"
                        Write-Host "  *   If you find that #3 does not work correctly, then you can use #1 or #2 with some of your  *"
                        Write-Host "  *   own automation to recover from the situation                                              *"
                        Write-Host "  ***********************************************************************************************"
                        Write-Host " " 
                        
                        $StandardPathsToFilterOut = @('%ProgramFiles%\WindowsPowerShell\Modules','%SystemRoot%\System32\WindowsPowerShell\v1.0\Modules','%SystemRoot%\System32\WindowsPowerShell\v1.0\Modules\')
                        [string[]]$currentpsmodulepath = (get-Item 'hklm:system\CurrentControlSet\Control\Session Manager\Environment').GetValue("PsModulePath","Default",[Microsoft.WIN32.RegistryValueOptions]::DoNotExpandEnvironmentNames).split(';')
                        $FilteredList = ($CurrentPSModulePath | Where {$StandardPathsToFilterOut -inotcontains $_}) -join ';'
                        Write-host "PSModulePath contains the following values that are not in the PSH 5 default values: $FilteredList, backing them up to BackupPSModulePath Environment Variable"
                        If ($FilteredList) {New-Itemproperty 'hklm:system\CurrentControlSet\Control\Session Manager\Environment' -name 'BackupPsModulePath' -PropertyType 'ExpandString' -value "$FilteredList" | out-null}
                        $WMF5Over3WasForced = $True
                    }
                  }
                  Install-ChocolateyZipPackage -PackageName "$packagename" -unziplocation "$toolsdir" -url "$urlWin7x86" -checksum "$urlWin7x86checksum" -checksumtype "$ChecksumType" -url64bit "$urlWin2k8R2andWin7x64" -checksum64 "$urlWin2k8R2andWin7x64checksum" -checksumtype64 "$ChecksumType"
                  $x64MSUName = "$toolsdir\$(($urlWin2k8R2andWin7x64.split('/') | select -last 1).replace('.zip','.msu'))"
                  $x86MSUName = "$toolsdir\$(($urlwin7x86.split('/') | select -last 1).replace('.zip','.msu'))"
                  Write-Host "64-bit file: $x64MSUName"
                      Install-ChocolateyPackage "$packageName" 'MSU' "$SilentArgs" -url $x86MSUName -url64 $x64MSUName -validExitCodes $validExitCodes
                  If ($WMF5Over3WasForced)
                  {
                    If (!$FilteredList)
                    {
                        Write-Host "PSModulePath does not contain any customized paths that need to be preserved."
                    }
                    Else
                    {
                        $scriptlocation = "$env:windir\temp\psmodulepathfixup.ps1"

                        $code = "set-Itemproperty 'hklm:system\CurrentControlSet\Control\Session Manager\Environment' -name 'PsModulePath' -value `$((get-Item 'hklm:system\CurrentControlSet\Control\Session Manager\Environment').GetValue('PsModulePath','Default',[Microsoft.WIN32.RegistryValueOptions]::DoNotExpandEnvironmentNames)" + "+`';$(invoke-expression -command '(get-variable FilteredList).value')`'" + ')'
                        $code | out-file $scriptlocation
                        "start-sleep -s 2" | out-file $scriptlocation -append
                        "schtasks.exe /delete /f /tn `"PSModulePathFixUp`"" | out-file $scriptlocation -append

                        schtasks.exe /create /tn "PSModulePathFixUp" /ru SYSTEM /Sc ONSTART /tr "powershell.exe -file $scriptlocation"

                        Write-Host "`"$scriptlocation`" is scheduled to run on reboot."

                        Write-Warning "ATTENTION: This Computer Must Be Restarted."
                    }
                  }
                }
            }
            "Win8/2012" {
                if($os.ProductType -gt 1) {
                    #Windows 2012
                    Install-PowerShell5 -urlx86 "$urlWin2012" -checksumx86 $urlWin2012checksum
                }
                else {
                    #Windows 8
                    Write-Verbose "Windows 8 (not 8.1) is not supported"
                    throw "$packageName not supported on Windows 8. You must upgrade to Windows 8.1 to install WMF/PowerShell 5.0."
                }
            }
            "Win8.1/2012R2" {
              Install-PowerShell5 -urlx86 "$urlWin81x86" -checksumx86 $urlWin81x86checksum -urlx64 "$urlWin2k12R2andWin81x64" -checksumx64 $urlWin2k12R2andWin81x64checksum -checksumtype "$ChecksumType" -checksumtype64 "$ChecksumType"
            }
            "Windows 10/Server 2016" {
                #Should never be reached.
                Write-Warning "Windows 10 / Server 2016 has WMF/PowerShell 5 pre-installed which is maintained by Windows Updates."
            }
            default {
                # Windows XP, Windows 2003, Windows Vista, or unknown?
                throw "$packageName $ThisPackagePSHVersion is not supported on $ProductName, ($EditionId), Windows Kernel: $osVersion"
            }
	    }
    }
}
catch {
  If (Test-Path "$installlogfilename")
  {
    Write-Host "Opps we had a error."
    $logfileerrors = @(Get-WinEvent -Path "$installlogfilename" -oldest | where {($_.level -ge 2) -AND ($_.level -le 3)})
    If ($logfileerrors.count -gt 0)
    {
      Write-Host "Found the following error(s) and warnings in the MSU log `"$installlogfilename`""
      $logfileerrors | Format-List ID, Message | out-string | write-host
    }
  }
  Throw $_.Exception
}
C:\ProgramData\chocolatey\lib\KB3118401\Tools\ChocolateyInstall.ps1
$msuData = @{
    '6.0-client' = @{
        # Windows Vista
        Url = 'https://download.microsoft.com/download/B/5/C/B5CDC4AA-8209-47B0-B8E4-8AD9DA347EA3/Windows6.0-KB3118401-x86.msu'
        Url64 = 'https://download.microsoft.com/download/6/6/D/66D6F070-4CA6-40CA-804C-71BBC818E048/Windows6.0-KB3118401-x64.msu'
        Checksum = '2C1291C574D7BC31F16BE94EA2296B1AC12C1C42A789A46C8153F3179EDB4B8E'
        Checksum64 = 'E3C47F702ABD982EC9C513936463BE7660AC2EB01A267C63F3241F0198285EC3'
    }
    '6.0-server' = @{
        # Windows Server 2008
        Url = 'https://download.microsoft.com/download/7/4/0/740EA069-D3FB-4604-84FC-E5547C652281/Windows6.0-KB3118401-x86.msu'
        Url64 = 'https://download.microsoft.com/download/B/7/A/B7A3ACB0-AE3C-43CF-8E4D-4E25B6303D33/Windows6.0-KB3118401-x64.msu'
        Checksum = '2C1291C574D7BC31F16BE94EA2296B1AC12C1C42A789A46C8153F3179EDB4B8E'
        Checksum64 = 'E3C47F702ABD982EC9C513936463BE7660AC2EB01A267C63F3241F0198285EC3'
    }
    '6.1-client' = @{
        # Windows 7
        Url = 'https://download.microsoft.com/download/6/1/D/61DE9D89-5A69-401A-B5BD-E74F1D6E1BD5/Windows6.1-KB3118401-x86.msu'
        Url64 = 'https://download.microsoft.com/download/D/1/0/D107EB4D-2295-4127-A187-97FB290D7A3F/Windows6.1-KB3118401-x64.msu'
        Checksum = '46AF0FB4EB4452B03790887950ADD4590F0754657760940F6DAEFDF7EEE1003F'
        Checksum64 = '145623E0B85037B90E1EF5C45AEE1AAA4120C4D12A388D94C48CFBB083E914E4'
    }
    '6.1-server' = @{
        # Windows Server 2008 R2
        Url64 = 'https://download.microsoft.com/download/E/6/5/E658276A-0ADF-439B-A63F-7E60C60728B6/Windows6.1-KB3118401-x64.msu'
        Checksum64 = '145623E0B85037B90E1EF5C45AEE1AAA4120C4D12A388D94C48CFBB083E914E4'
    }
    '6.2-server' = @{
        # Windows Server 2012
        Url64 = 'https://download.microsoft.com/download/8/E/3/8E3AED94-65F6-43A4-A502-1DE3881EA4DA/Windows8-RT-KB3118401-x64.msu'
        Checksum64 = 'FC2FB2DD6F25739F7E0938B9D24FE590EE03E62DE3B4132193F424F0BBB8B0FD'
    }
    '6.3-client' = @{
        # Windows 8.1
        Url = 'https://download.microsoft.com/download/5/E/8/5E888014-D156-44C8-A25B-CA30F0CCDA9F/Windows8.1-KB3118401-x86.msu'
        Url64 = 'https://download.microsoft.com/download/F/E/7/FE776F83-5C58-47F2-A8CF-9065FE6E2775/Windows8.1-KB3118401-x64.msu'
        Checksum = '35A00B48795DCC17D4BFD9AAC4D8A31C52B08DCF0AA5BD63E1A92A40FFCEF5D1'
        Checksum64 = '0E44AD74AA341909865DC6A72B2BCB80564FCD0DF7E1E388BE81A7E04868C98F'
    }
    '6.3-server' = @{
        # Windows Server 2012 R2
        Url64 = 'https://download.microsoft.com/download/C/D/6/CD6C8488-8491-43FA-AD1C-FB448B9836E1/Windows8.1-KB3118401-x64.msu'
        Checksum64 = '0E44AD74AA341909865DC6A72B2BCB80564FCD0DF7E1E388BE81A7E04868C98F'
    }
}

$servicePackRequirements = @{
    '6.1' = @{ ServicePackNumber = 1; ChocolateyPackage = 'KB976932' }
    '6.0' = @{ ServicePackNumber = 2; ChocolateyPackage = $null }
}

chocolateyInstaller\Install-WindowsUpdate -Id 'KB3118401' -MsuData $msuData -ChecksumType 'SHA256' -ServicePackRequirements $servicePackRequirements
C:\ProgramData\chocolatey\lib\audacity-lame\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir   = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"

$ZipFile = (Get-ChildItem "$toolsDir" -Filter '*.zip').FullName

Get-ChocolateyUnzip -FileFullPath "$ZipFile" -Destination "$env:ChocolateyPackageFolder"

# Create registry key for Audacity to recognize LAME
Write-Debug 'Setting registry key for LAME location.'
$RegXtra = ''
If (Get-OSArchitectureWidth -Compare 64) {
   $RegXtra = '\Wow6432Node'
}
$RegPath = "HKLM:\SOFTWARE$RegXtra\Lame For Audacity"
New-Item "$RegPath" -Force | Write-Debug
New-ItemProperty -Path "$RegPath" -Name 'InstallPath' -Value "$env:ChocolateyPackageFolder" -force | Write-Debug

C:\ProgramData\chocolatey\lib\googleearth\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop'
$packageName   = 'googleearth'
$installerType = 'EXE'
$toolsDir      = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$url           = 'https://dl.google.com/earth/client/GE7/release_7_1_8/googleearth-win-7.1.8.3036.exe' 
$checksum      = 'B64FFC6F31E3E42F154E7D19DFA301376DE987403A9C50B575DAC04022E06576'
$silentArgs    = 'OMAHA=1'
$validExitCodes= @(0)

$packageArgs = @{
  packageName   = $packageName
  fileType      = 'EXE' 
  url           = $url
  softwareName  = 'Google Earth*' 
  checksum      = $checksum
  checksumType  = 'sha256'
  silentArgs    = $silentArgs
  validExitCodes= $validExitCodes
}

Install-ChocolateyPackage @packageArgs 
C:\ProgramData\chocolatey\lib\ngrok.portable\tools\chocolateyInstall.ps1
$packageName = 'ngrok.portable'
$url = 'https://ngrok.com/download'
$validExitCodes = @(0)

$chocTempDir = Join-Path $env:TEMP "chocolatey"
$tempDir = Join-Path $chocTempDir "$packageName"
if (![System.IO.Directory]::Exists($tempDir)) {[System.IO.Directory]::CreateDirectory($tempDir)}

$indexFile = Join-Path $tempDir "$($packageName).html"
Get-ChocolateyWebFile "$packageName" "$indexFile" "$url"

write-host "[$packageName] Trying to find a link to a ngrok."

$contentIndexFile = Get-Content "$indexFile"
if ((Get-ProcessorBits 64) -and !$env:chocolateyForceX86) {
    $regxp = '<a id="dl-windows-amd64"[^>]+?href="(http[s]?:\/\/[^"]*?)"'
} else {
    $regxp = '<a id="dl-windows-386"[^>]+?href="(http[s]?:\/\/[^"]*?)"'
}
if("$contentIndexFile" -match "$regxp") {`
    $downloadUrl = $matches[1]
    $downloadUrl = $downloadUrl.Replace("&amp;","&") 
    write-host "[$packageName] Link is found. $downloadUrl"
    
    Install-ChocolateyZipPackage "$packageName" "$downloadUrl" "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
} else {
    write-host "[$packageName] Link is not found."
    throw
}

Remove-Item "$indexFile" -Recurse
C:\ProgramData\chocolatey\lib\MSFilterPack2-redist-x64\tools\ChocolateyInstall.ps1
#if(-not (test-path "hklm:\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\.NETFramework,Version=v4.5")) {
Install-ChocolateyPackage `
	'MSFilterPack2-redist-x64' 'exe' "/quiet /norestart /Log:$($env:temp)\MSFilterPack2-redist-x64.log" `
	'http://download.microsoft.com/download/0/A/2/0A28BBFA-CBFA-4C03-A739-30CCA5E21659/FilterPack64bit.exe'
#}
#else {
#     Write-Host "Microsoft Filter Pack 2.0 Redistributable is already installed on your machine."
# } 
C:\ProgramData\chocolatey\lib\KB3035131\Tools\ChocolateyInstall.ps1
$msuData = @{
    '6.3-client' = @{
        Url = 'https://download.microsoft.com/download/D/2/B/D2B466AA-E011-42D6-92DA-4FA8FCDAB8CB/Windows8.1-KB3035131-x86.msu'
        Checksum = '61C80C09EBE58558A7CF15F6892B392BC73A2EF669255A236562B6196FFE47C0'
        Url64 = 'https://download.microsoft.com/download/A/B/7/AB7824E4-A7BC-49A0-BBAB-0556344F8747/Windows8.1-KB3035131-x64.msu'
        Checksum64 = 'A9D6F7B519AD3A22ABDE3AF7CE3EBB90FF84A028EDE2154AC5D0548C88CCFEDD'
    }
    '6.3-server' = @{
        Url64 = 'https://download.microsoft.com/download/B/2/4/B24FB08A-DEA8-4B4C-8EE4-B9F0FB180200/Windows8.1-KB3035131-x64.msu'
        Checksum64 = 'A9D6F7B519AD3A22ABDE3AF7CE3EBB90FF84A028EDE2154AC5D0548C88CCFEDD'
    }
    '6.2-client' = @{
        Url = 'https://download.microsoft.com/download/F/A/1/FA163776-A65D-49DA-BCAA-BD4173B0656E/Windows8-RT-KB3035131-x86.msu'
        Checksum = '3CBA7162DE2ECFD14E2C5B8805C15C74E15898E1D1DEAAAEDCC18BB50ACB5BC3'
        Url64 = 'https://download.microsoft.com/download/4/3/1/431125D8-FAA3-4420-B7C0-2794E71F50FB/Windows8-RT-KB3035131-x64.msu'
        Checksum64 = '22CBF7E733C55C4F90DFA0864AE8B61F07E522825DE7DDD94439FF4D1F4D2766'
    }
    '6.2-server' = @{
        Url64 = 'https://download.microsoft.com/download/4/7/6/47682024-8C3B-4D81-B019-24E34EAC3ABA/Windows8-RT-KB3035131-x64.msu'
        Checksum64 = '22CBF7E733C55C4F90DFA0864AE8B61F07E522825DE7DDD94439FF4D1F4D2766'
    }
    '6.1-client' = @{
        Url = 'https://download.microsoft.com/download/8/A/3/8A3E90CC-AEC3-4645-8CF3-2BD205E26B5E/Windows6.1-KB3035131-x86.msu'
        Checksum = '65608782ED5A77293436ADE0B1CDA37668A30D8E27198A6CD331704ADDC3D782'
        Url64 = 'https://download.microsoft.com/download/3/D/F/3DF6B0B1-D849-4272-AA98-3AA8BB456CCC/Windows6.1-KB3035131-x64.msu'
        Checksum64 = '589F6BA1097937E99B3CECC113D3535FBF7DE4E40623D3145E89E4EBCBE028AC'
    }
    '6.1-server' = @{
        Url64 = 'https://download.microsoft.com/download/1/1/4/1140E6A6-D865-48FD-BF91-5FF8975F8BE5/Windows6.1-KB3035131-x64.msu'
        Checksum64 = '589F6BA1097937E99B3CECC113D3535FBF7DE4E40623D3145E89E4EBCBE028AC'
    }
    '6.0-client' = @{
        Url = 'https://download.microsoft.com/download/7/1/4/714C40B3-7A8A-4DE5-B082-51E5054D1EEC/Windows6.0-KB3035131-x86.msu'
        Checksum = 'E883D65A9DB0669DA158DC27C8FD63C4C91D1EEA46C3B415391030EA6B3C1083'
        Url64 = 'https://download.microsoft.com/download/C/B/5/CB536E82-8BFC-4256-B729-543F91CF7344/Windows6.0-KB3035131-x64.msu'
        Checksum64 = '391D27E4A62C52F2DD83DEC869728EC67A76694C6181E4E0287B565B86E8FE0E'
    }
    '6.0-server' = @{
        Url = 'https://download.microsoft.com/download/8/0/E/80E3D2ED-D8C1-40C0-9CAA-9431D3F1A0A6/Windows6.0-KB3035131-x86.msu'
        Checksum = 'E883D65A9DB0669DA158DC27C8FD63C4C91D1EEA46C3B415391030EA6B3C1083'
        Url64 = 'https://download.microsoft.com/download/F/6/B/F6B87903-3523-4761-BE50-0982E5B3674A/Windows6.0-KB3035131-x64.msu'
        Checksum64 = '391D27E4A62C52F2DD83DEC869728EC67A76694C6181E4E0287B565B86E8FE0E'
    }
}

$servicePackRequirements = @{
    '6.1' = @{ ServicePackNumber = 1; ChocolateyPackage = 'KB976932' }
    '6.0' = @{ ServicePackNumber = 2; ChocolateyPackage = $null }
}

chocolateyInstaller\Install-WindowsUpdate -Id 'KB3035131' -MsuData $msuData -ChecksumType 'sha256' -ServicePackRequirements $servicePackRequirements
C:\ProgramData\chocolatey\lib\KB3033929\Tools\ChocolateyInstall.ps1
$msuData = @{
    '6.1-client' = @{
        Url = 'https://download.microsoft.com/download/3/7/4/37473F39-5728-4153-9A25-64C09DE9ED52/Windows6.1-KB3033929-x86.msu'
        Checksum = '246C300A6AE6DCA99453F6839745AC0015953528A7065BED1B015F91B80CF64D'
        Url64 = 'https://download.microsoft.com/download/C/8/7/C87AE67E-A228-48FB-8F02-B2A9A1238099/Windows6.1-KB3033929-x64.msu'
        Checksum64 = '5318587007EDB6C8B29310FF18DA479A162B486B9101A7DE735F94A70DBC3B31'
    }
    '6.1-server' = @{
        Url64 = 'https://download.microsoft.com/download/A/4/E/A4E91F1E-83D8-4926-9CC5-3B3B4F371B80/Windows6.1-KB3033929-x64.msu'
        Checksum64 = '5318587007EDB6C8B29310FF18DA479A162B486B9101A7DE735F94A70DBC3B31'
    }
}

$servicePackRequirements = @{
    '6.1' = @{ ServicePackNumber = 1; ChocolateyPackage = 'KB976932' }
}

chocolateyInstaller\Install-WindowsUpdate -Id 'KB3033929' -MsuData $msuData -ChecksumType 'sha256' -ServicePackRequirements $servicePackRequirements
C:\ProgramData\chocolatey\lib\KB2999226\tools\chocolateyinstall.ps1
$msuData = @{
  '6.0-client' = @{
    Url = 'https://download.microsoft.com/download/D/8/3/D838D576-232C-4C17-A402-75913F27113B/Windows6.0-KB2999226-x86.msu'
    Url64 = 'https://download.microsoft.com/download/5/4/E/54E27BE2-CFB2-4FC9-AB03-C39302CA68A0/Windows6.0-KB2999226-x64.msu'
    Checksum = 'AE380F63BF4E8700ADA686406B04B01230A339B09EDF7819814A4C0BF4AB72E1'
    Checksum64 = '10069DE7315CA3F405E2579846AF5DAB3089A8496AE4C1AB61763480F43A05A8'
  }
  '6.0-server' = @{
    Url = 'https://download.microsoft.com/download/B/5/7/B5757251-DAB0-4E23-AA46-ABC233FDB90E/Windows6.0-KB2999226-x86.msu'
    Url64 = 'https://download.microsoft.com/download/A/7/A/A7A70B17-ADF9-4FC3-A722-69FA89B79756/Windows6.0-KB2999226-x64.msu'
    Checksum = 'AE380F63BF4E8700ADA686406B04B01230A339B09EDF7819814A4C0BF4AB72E1'
    Checksum64 = '10069DE7315CA3F405E2579846AF5DAB3089A8496AE4C1AB61763480F43A05A8'
  }
  '6.1-client' = @{
    Url = 'https://download.microsoft.com/download/4/F/E/4FE73868-5EDD-4B47-8B33-CE1BB7B2B16A/Windows6.1-KB2999226-x86.msu'
    Url64 = 'https://download.microsoft.com/download/1/1/5/11565A9A-EA09-4F0A-A57E-520D5D138140/Windows6.1-KB2999226-x64.msu'
    Checksum = '909E76C81EF0EB176144B253DDFFE7A8FDFACEBFAA15E97DEF003D2262FBF084'
    Checksum64 = '43234D2986CA9B0DE75D5183977964D161A8395C3396279DDFC9B20698E5BC34'
  }
  '6.1-server' = @{
    Url64 = 'https://download.microsoft.com/download/F/1/3/F13BEC9A-8FC6-4489-9D6A-F84BDC9496FE/Windows6.1-KB2999226-x64.msu'
    Checksum64 = '43234D2986CA9B0DE75D5183977964D161A8395C3396279DDFC9B20698E5BC34'
  }
  '6.2-client' = @{
    Url = 'https://download.microsoft.com/download/1/E/8/1E8AFE90-5217-464D-9292-7D0B95A56CE4/Windows8-RT-KB2999226-x86.msu'
    Url64 = 'https://download.microsoft.com/download/A/C/1/AC15393F-A6E6-469B-B222-C44B3BB6ECCC/Windows8-RT-KB2999226-x64.msu'
    Checksum = '0F36750FBB06FEE23131F68B4D0943841EED24730EC1D5D77DEDC41D359BE88D'
    Checksum64 = '50CAE25DA33FA950222D1A803E42567291EB7FEB087FA119B1C97FE9D41CD9F8'
  }
  '6.2-server' = @{
    Url64 = 'https://download.microsoft.com/download/9/3/E/93E0745A-EAE9-4B5A-B50C-012F2D3B6659/Windows8-RT-KB2999226-x64.msu'
    Checksum64 = '50CAE25DA33FA950222D1A803E42567291EB7FEB087FA119B1C97FE9D41CD9F8'
  }
  '6.3-client' = @{
    Url = 'https://download.microsoft.com/download/E/4/6/E4694323-8290-4A08-82DB-81F2EB9452C2/Windows8.1-KB2999226-x86.msu'
    Url64 = 'https://download.microsoft.com/download/9/6/F/96FD0525-3DDF-423D-8845-5F92F4A6883E/Windows8.1-KB2999226-x64.msu'
    Checksum = 'B83251219C5390536B02BEBAF5E43A6F13381CE1DB43E76483BCE07C4BCF877B'
    Checksum64 = '9F707096C7D279ED4BC2A40BA695EFAC69C20406E0CA97E2B3E08443C6381D15'
  }
  '6.3-server' = @{
    Url64 = 'https://download.microsoft.com/download/D/1/3/D13E3150-3BB2-4B22-9D8A-47EE2D609FFF/Windows8.1-KB2999226-x64.msu'
    Checksum64 = '9F707096C7D279ED4BC2A40BA695EFAC69C20406E0CA97E2B3E08443C6381D15'
  }
}

$servicePackRequirements = @{
  '6.0' = @{ ServicePackNumber = 1; ChocolateyPackage = $null }
  '6.1' = @{ ServicePackNumber = 1; ChocolateyPackage = 'KB976932' }
}

chocolateyInstaller\Install-WindowsUpdate -Id 'KB2999226' -MsuData $msuData -ChecksumType 'sha256' -ServicePackRequirements $servicePackRequirements
C:\ProgramData\chocolatey\lib\KB3063858\Tools\ChocolateyInstall.ps1
$msuData = @{
    '6.0-client' = @{
        # Windows Vista
        Url = 'https://download.microsoft.com/download/8/B/F/8BF76ABD-2A61-470A-BE45-84700728286D/Windows6.0-KB3063858-x86.msu'
        Url64 = 'https://download.microsoft.com/download/C/E/6/CE6BBF49-4D23-4FAC-A80C-41FC06B7D3EE/Windows6.0-KB3063858-x64.msu'
        Checksum = 'A00EF5C74E0410AD2A3945DF7026DFD00AEC0E6C86DCC2AF4667DAB98850495A'
        Checksum64 = '1697468B2502D3F28E5DC1B3B829EDC391CF6FB9235FDDC8EE133A183BEF227F'
    }
    '6.0-server' = @{
        # Windows Server 2008
        Url = 'https://download.microsoft.com/download/8/B/F/8BF76ABD-2A61-470A-BE45-84700728286D/Windows6.0-KB3063858-x86.msu'
        Url64 = 'https://download.microsoft.com/download/C/E/6/CE6BBF49-4D23-4FAC-A80C-41FC06B7D3EE/Windows6.0-KB3063858-x64.msu'
        Checksum = 'A00EF5C74E0410AD2A3945DF7026DFD00AEC0E6C86DCC2AF4667DAB98850495A'
        Checksum64 = '1697468B2502D3F28E5DC1B3B829EDC391CF6FB9235FDDC8EE133A183BEF227F'
    }
    '6.1-client' = @{
        # Windows 7
        Url = 'https://download.microsoft.com/download/C/9/6/C96CD606-3E05-4E1C-B201-51211AE80B1E/Windows6.1-KB3063858-x86.msu'
        Url64 = 'https://download.microsoft.com/download/0/8/E/08E0386B-F6AF-4651-8D1B-C0A95D2731F0/Windows6.1-KB3063858-x64.msu'
        Checksum = 'A95DDA6B57B8012B0ADA9543BA667F48A99DE8FE93030A8FE8C9D5C2E5C038C1'
        Checksum64 = '6FEC4E38CDCBDAA334937A2EF38BAD6800E9C80CB513183451B4049E84479A85'
    }
    '6.1-server' = @{
        # Windows Server 2008 R2
        Url64 = 'https://download.microsoft.com/download/D/0/7/D0757054-F917-4728-935B-200AEAFE0308/Windows6.1-KB3063858-x64.msu'
        Checksum64 = '6FEC4E38CDCBDAA334937A2EF38BAD6800E9C80CB513183451B4049E84479A85'
    }
    '6.2-client' = @{
        # Windows 8
        Url = 'https://download.microsoft.com/download/E/9/B/E9B2ACE6-4291-400E-86D0-B6E708B58843/Windows8-RT-KB3063858-x86.msu'
        Url64 = 'https://download.microsoft.com/download/9/E/E/9EEB707E-2896-4890-8082-2D9FB930C615/Windows8-RT-KB3063858-x64.msu'
        Checksum = '4643AEF02CCC6EB7BFA95DA515EC43520D7A4D7AB1CC745B006E2CA231B0438F'
        Checksum64 = '64ACF31484023625E19DD45613AA8926AA3837218AA5B2A955745EED9FBFF7DF'
    }
    '6.2-server' = @{
        # Windows Server 2012
        Url64 = 'https://download.microsoft.com/download/9/E/E/9EEB707E-2896-4890-8082-2D9FB930C615/Windows8-RT-KB3063858-x64.msu'
        Checksum64 = '64ACF31484023625E19DD45613AA8926AA3837218AA5B2A955745EED9FBFF7DF'
    }
}

chocolateyInstaller\Install-WindowsUpdate -Id 'KB3063858' -MsuData $msuData -ChecksumType 'SHA256'
C:\ProgramData\chocolatey\lib\DotNet4.6\tools\ChocolateyInstall.ps1
Function IsInstalled {
    $ver = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full').Release
    return (!($ver -eq $null) -and ($ver -ge 393295))
}

if (IsInstalled) {
    Write-Host "Microsoft .NET Framework 4.6 or later is already installed"
}
else {
    $packageName = 'DotNet46'
    $installerType = 'exe'
    $Url = 'http://download.microsoft.com/download/C/3/A/C3A5200B-D33C-47E9-9D70-2F7C65DAAD94/NDP46-KB3045557-x86-x64-AllOS-ENU.exe'
    $silentArgs = "/Passive /NoRestart /Log ""$env:temp\net46.log"""
    $validExitCodes = @(
        0, # success
        3010 # success, restart required
    )

    Install-ChocolateyPackage $packageName $installerType $silentArgs $Url -validExitCodes $validExitCodes

    if (-Not (IsInstalled)) {
        Write-Host "A restart is required to finalise the Microsoft .NET Framework 4.6 installation"
    }
}
C:\ProgramData\chocolatey\lib\DotNet4.5.2\Tools\ChocolateyInstall.ps1
if(-not (test-path "hklm:\SOFTWARE\Microsoft\.NETFramework\v4.0.30319\SKUs\.NETFramework,Version=v4.5.2")) {
Install-ChocolateyPackage 'dotnet452' 'exe' "/Passive /NoRestart /Log $env:temp\net451.log" 'http://download.microsoft.com/download/E/2/1/E21644B5-2DF2-47C2-91BD-63C560427900/NDP452-KB2901907-x86-x64-AllOS-ENU.exe' -validExitCodes @(0,3010)
}
else {
     Write-Host "Microsoft .Net 4.5.2 Framework is already installed on your machine."
 } 
C:\ProgramData\chocolatey\lib\speedtest-chrome\tools\ChocolateyInstall.ps1
$bits = Get-ProcessorBits
$packageName = 'speedtest-chrome'
$extensionID = 'pgjjikdiikihdfpoppgaidccahalehjh'
if ($bits -eq 64)
   {
    if (Test-Path -Path "HKLM:\SOFTWARE\Wow6432node\Google\Chrome\Extensions\$extensionID")
       {
       Write-Host "Extension already installed." -foreground "magenta" –backgroundcolor "blue"
       } else {
         New-Item -Force -Path "HKLM:\SOFTWARE\Wow6432node\Google\Chrome\Extensions\$extensionID" | out-null
         New-ItemProperty -Path "HKLM:\SOFTWARE\Wow6432node\Google\Chrome\Extensions\$extensionID\" -Name "update_url" -Value "https://clients2.google.com/service/update2/crx" | out-null
         New-ItemProperty -Path "HKLM:\SOFTWARE\Wow6432node\Google\Chrome\Extensions\$extensionID\" -Name "ChocolateyPackageName" -Value "$packageName" | out-null
         }
    } else {
      New-Item -Force -Path "HKLM:\SOFTWARE\Google\Chrome\Extensions\$extensionID" | out-null
      New-ItemProperty -Path "HKLM:\SOFTWARE\Google\Chrome\Extensions\$extensionID\" -Name "update_url" -Value "https://clients2.google.com/service/update2/crx" | out-null
      }
C:\ProgramData\chocolatey\lib\sentinel\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop';

$packageName= 'sentinel'
$toolsDir   = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$url        = 'https://github.com/yarseyah/sentinel/releases/download/0.14.1/Sentinel-Setup-0.14.1.exe'

$packageArgs = @{
  packageName   = $packageName
  fileType      = 'exe'
  softwareName  = 'sentinel*'
  url           = $url
  silentArgs    = '--silent'

  checksum      = 'D58D8E3E52CF34B5882FBFD80FADCE375A1CA75CDBA878A63F71F33DE7D933B8'
  checksumType  = 'sha256'
}

Install-ChocolateyPackage @packageArgs 
C:\ProgramData\chocolatey\lib-bad\gopro-quik\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop';
$toolsDir = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"

$packageArgs = @{
  packageName  = $env:ChocolateyPackageName

  url          = 'https://software.gopro.com/PC/GoPro_Quik-WinInstaller-2.7.0.945.exe'
  checksum     = 'A7B28741E415C5E4D04EAC2768B02A005F28EFF1DF3F6540457DCCD0F3542C66'
  checksumType = 'sha256'
  validExitCodes = @(1)
}

Start-Process "AutoHotKey" -Verb runas -ArgumentList "`"$toolsDir\chocolateyinstall.ahk`""
Install-ChocolateyPackage @packageArgs

$packageArgs = @{
  packageName    = $env:ChocolateyPackageName
  filetype       = 'MSI'

  file           = "${env:ProgramData}\Package Cache\{AA5F7FCE-311C-46D8-B93A-ABF4DDCAB832}v0.1.945\GDA.msi"
  silentArgs     = "/qn /norestart /l*v `"$($env:TEMP)\$($packageName).$($env:chocolateyPackageVersion).MsiInstall.log`""
  validExitCodes = @(0, 3010, 1641)
}
Install-ChocolateyPackage @packageArgs
C:\ProgramData\chocolatey\lib\vcredist2008\tools\chocolateyInstall.ps1
$params = @{
  PackageName    = 'vcredist2008'
  FileType       = 'exe'
  Url            = 'https://download.microsoft.com/download/5/D/8/5D8C65CB-C849-4025-8E95-C3966CAFD8AE/vcredist_x86.exe'
  Url64          = 'https://download.microsoft.com/download/5/D/8/5D8C65CB-C849-4025-8E95-C3966CAFD8AE/vcredist_x64.exe'
  Checksum       = '8742bcbf24ef328a72d2a27b693cc7071e38d3bb4b9b44dec42aa3d2c8d61d92'
  Checksum64     = 'c5e273a4a16ab4d5471e91c7477719a2f45ddadb76c7f98a38fa5074a6838654'
  ChecksumType   = 'sha256'
  ChecksumType64 = 'sha256'
  SilentArgs     = '/Q /NORESTART'
  ValidExitCodes = @(0,3010)  # http://msdn.microsoft.com/en-us/library/aa368542(VS.85).aspx
}
Install-ChocolateyPackage @params

# Install both 32bit and 64bit on a 64bit OS
# If a program is compiled as x86 and the 32bit version of vcredist isn't installed, then the program would fail to start.
if (Get-ProcessorBits 64 -and ($env:chocolateyForceX86 -ne $true)) {
  $originalChocolateyForceX86 = $Env:chocolateyForceX86
  $Env:chocolateyForceX86 = $true
  Install-ChocolateyPackage @params
  $Env:chocolateyForceX86 = $originalChocolateyForceX86
}
C:\ProgramData\chocolatey\lib\previewconfig\tools\chocolateyInstall.ps1
$packageName = 'previewconfig' # arbitrary name for the package, used in messages
$url = 'http://www.winhelponline.com/utils/previewconfig.zip' # download url
$validExitCodes = @(0)
$checksum      = '5BB3D6BD48086D604685C2C1EC06F98B6BA4BB18'
$checksumType  = 'sha1'

Install-ChocolateyZipPackage "$packageName" "$url" "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"  -checksum $checksum -checksumType $checksumType

Write-Output "*************************************************************************************************************************************"
Write-Output "*  INSTRUCTIONS: Type `"previewconfig.exe`" to edit file type associations.                                                         *"
Write-Output "*       More Info: http://www.winhelponline.com/blog/previewconfig-tool-registers-file-types-for-the-preview-pane-in-windows-vista/ *"
Write-Output "*************************************************************************************************************************************"
C:\ProgramData\chocolatey\lib\NSSM\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir = Split-Path $MyInvocation.MyCommand.Definition
if ((Get-OSArchitectureWidth 64) -and $env:chocolateyForceX86 -ne 'true') {
         Write-Host "Installing 64 bit version"; $is64 = $true
} else { Write-Host "Installing 32 bit version"} 

$packageArgs = @{
    PackageName  = 'nssm'
    FileFullPath = Get-Item $toolsDir\*.zip
    Destination  = $toolsDir
}
Get-ChildItem $toolsDir\* | Where-Object { $_.PSISContainer } | Remove-Item -Recurse -Force #remove older package dirs
Get-ChocolateyUnzip @packageArgs

$source = if ($is64) { 'win64' } else { 'win32' }
Copy-Item $toolsDir\nssm-*\$source\nssm.exe $toolsDir
Remove-Item -Force $toolsDir\nssm*.zip -ea 0
Remove-Item -Recurse $toolsDir\nssm-*
C:\Dropbox\whertzing\GitHub\ATAP.Utilities\src\ATAP.Utilities.Powershell\Packages\ATAP.Utilities.Powershell\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'


$packageName   = 'ATAP.Utilities.Ppowershell'
$toolsDir      = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$ZipName       = ''
$url           = ""



$packageArgs = @{
    PackageName   = $packageName
    FileFullPath  = Join-Path $toolsDir $ZipName
    url           = $url
    checksum      = 'D46F54ECF5A64FB1649A2B20A0F4DD4882E54E7259BFF98BAE2DE0397A85379B'
    checksumType  = 'sha256'
}


if (-not(Get-Module -Name chocolateyInstaller))
{
    try{
        Import-Module (Join-Path $env:ProgramData 'chocolatey' 'helpers' 'chocolateyInstaller.psm1') -Force
    }
    catch{
        Write-Warning -Message 'Unable to import chocolateyInstaller'
        Write-Error -ErrorRecord $Error[0]
        exit -1
    }
}


try{
    Get-ChocolateyWebFile @packageArgs
}
catch{
    Write-Warning -Message "Unable to download $PackageName"
    Write-Error -ErrorRecord $Error[0]
    exit -1
}

try{
    $ZipPath = Get-Item (Join-Path $toolsDir $ZipName)

    Expand-Archive -Path $ZipPath -DestinationPath (Join-Path $toolsDir $packageName)

    $props = @{
        Wait         = $true
        FilePath     = (Join-Path $toolsDir $packageName 'setup.exe')
        PassThru     = $true
    }

    Start-Process @props
}
catch{
    Write-Warning -Message "Unable to install $PackageName"
    Write-Error -ErrorRecord $Error[0]
    exit -1
}
C:\Dropbox\whertzing\GitHub\ATAP.Utilities\src\ATAP.Utilities.Security.Powershell\Packages\ATAP.Utilities.Powershell\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'


$packageName   = 'ATAP.Utilities.Ppowershell'
$toolsDir      = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$ZipName       = ''
$url           = ""



$packageArgs = @{
    PackageName   = $packageName
    FileFullPath  = Join-Path $toolsDir $ZipName
    url           = $url
    checksum      = 'D46F54ECF5A64FB1649A2B20A0F4DD4882E54E7259BFF98BAE2DE0397A85379B'
    checksumType  = 'sha256'
}


if (-not(Get-Module -Name chocolateyInstaller))
{
    try{
        Import-Module (Join-Path $env:ProgramData 'chocolatey' 'helpers' 'chocolateyInstaller.psm1') -Force
    }
    catch{
        Write-Warning -Message 'Unable to import chocolateyInstaller'
        Write-Error -ErrorRecord $Error[0]
        exit -1
    }
}


try{
    Get-ChocolateyWebFile @packageArgs
}
catch{
    Write-Warning -Message "Unable to download $PackageName"
    Write-Error -ErrorRecord $Error[0]
    exit -1
}

try{
    $ZipPath = Get-Item (Join-Path $toolsDir $ZipName)

    Expand-Archive -Path $ZipPath -DestinationPath (Join-Path $toolsDir $packageName)

    $props = @{
        Wait         = $true
        FilePath     = (Join-Path $toolsDir $packageName 'setup.exe')
        PassThru     = $true
    }

    Start-Process @props
}
catch{
    Write-Warning -Message "Unable to install $PackageName"
    Write-Error -ErrorRecord $Error[0]
    exit -1
}
C:\Temp\Jenkins\src\ATAP.Utilities.Powershell\Packages\ATAP.Utilities.Powershell\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'


$packageName   = 'ATAP.Utilities.Ppowershell'
$toolsDir      = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$ZipName       = ''
$url           = ""



$packageArgs = @{
    PackageName   = $packageName
    FileFullPath  = Join-Path $toolsDir $ZipName
    url           = $url
    checksum      = 'D46F54ECF5A64FB1649A2B20A0F4DD4882E54E7259BFF98BAE2DE0397A85379B'
    checksumType  = 'sha256'
}


if (-not(Get-Module -Name chocolateyInstaller))
{
    try{
        Import-Module (Join-Path $env:ProgramData 'chocolatey' 'helpers' 'chocolateyInstaller.psm1') -Force
    }
    catch{
        Write-Warning -Message 'Unable to import chocolateyInstaller'
        Write-Error -ErrorRecord $Error[0]
        exit -1
    }
}


try{
    Get-ChocolateyWebFile @packageArgs
}
catch{
    Write-Warning -Message "Unable to download $PackageName"
    Write-Error -ErrorRecord $Error[0]
    exit -1
}

try{
    $ZipPath = Get-Item (Join-Path $toolsDir $ZipName)

    Expand-Archive -Path $ZipPath -DestinationPath (Join-Path $toolsDir $packageName)

    $props = @{
        Wait         = $true
        FilePath     = (Join-Path $toolsDir $packageName 'setup.exe')
        PassThru     = $true
    }

    Start-Process @props
}
catch{
    Write-Warning -Message "Unable to install $PackageName"
    Write-Error -ErrorRecord $Error[0]
    exit -1
}
C:\ProgramData\chocolatey\lib\audacity-ffmpeg\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path -parent $MyInvocation.MyCommand.Definition
 
$packageArgs = @{
  packageName            = 'audacity-ffmpeg'
  fileType               = 'exe'
  file64                 = "$toolsPath\FFmpeg_v2.2.2_for_Audacity_on_Windows_64bit.exe"
  silentArgs             = '/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-'
  validExitCodes         = @(0)
  softwareName           = 'FFmpeg (Windows) for Audacity *'
}

Install-ChocolateyInstallPackage @packageArgs
C:\ProgramData\chocolatey\lib\fiddler\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath      = Split-Path $MyInvocation.MyCommand.Definition
 
$packageArgs = @{
  packageName            = 'fiddler'
  fileType               = 'EXE'
  file                   = Get-Item $toolsPath\*.exe
  silentArgs             = '/S'
  validExitCodes         = @(0)
  softwareName           = 'fiddler*'
}
Install-ChocolateyInstallPackage @packageArgs

Get-ChildItem $toolsPath\*.exe | ForEach-Object {
  Remove-Item $_ -ErrorAction SilentlyContinue;
  if (Test-Path $_) {
    Set-Content -Value "" -Path "$_.ignore"
  }
}
C:\ProgramData\chocolatey\lib-bad\grammarly-for-windows\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop';

$packageArgs = @{
  packageName    = 'grammarly-for-windows'
  installerType  = 'exe'
  url            = 'https://download-windows.grammarly.com/GrammarlyInstaller.exe'
  checksum       = '59330921d8c5bc0603130a0274632e367e2379a3778a039bce70cf5128cce98b'
  checksumType   = 'sha256'
  silentArgs     = '/S'
  validExitCodes = @(0)
  softwareName   = 'Grammarly-for-windows*'
}
Install-ChocolateyPackage @packageArgs
C:\Dropbox\whertzing\Visual Studio 2013\Projects\psp1\psp1\ChocolateyInstall.ps1
Install-ChocolateyZipPackage 'psp1' 'msu' '/S' '//fs/prd/psp1.zip'
C:\Dropbox\whertzing\GitHub\ATAP.Utilities\src\ATAP.Utilities.Powershell\tools\ChocolateyInstall.ps1
'ATAP.Utilities.Powershell module ChocolateyInstall.ps1'
C:\Dropbox\whertzing\GitHub\ATAP.Utilities\src\ATAP.Utilities.Security.Powershell\tools\ChocolateyInstall.ps1
'ATAP.Utilities.Powershell module ChocolateyInstall.ps1'
C:\Temp\Jenkins\src\ATAP.Utilities.Powershell\tools\ChocolateyInstall.ps1
'ATAP.Utilities.Powershell module ChocolateyInstall.ps1'
C:\$RECYCLE.BIN\S-1-5-21-79966073-2694646102-2002113053-1001\$R43N1BU.install\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path -parent $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName    = $env:ChocolateyPackageName
  fileType       = 'exe'
  file           = "$toolsPath\npp.8.3.3.Installer.exe"
  file64         = "$toolsPath\npp.8.3.3.Installer.x64.exe"
  softwareName   = 'Notepad\+\+*'
  silentArgs     = '/S'
  validExitCodes = @(0)
}

Install-ChocolateyInstallPackage @packageArgs

Get-ChildItem $toolsPath\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" '' } }

$installLocation = Get-AppInstallLocation $packageArgs.softwareName
if (!$installLocation)  {  Write-Warning "Can't find $PackageName install location"; return }

Write-Host "$packageName installed to '$installLocation'"
Install-BinFile -Path "$installLocation\notepad++.exe" -Name 'notepad++'
C:\$RECYCLE.BIN\S-1-5-21-79966073-2694646102-2002113053-1001\$RP34P0L.install\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path -parent $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName    = $env:ChocolateyPackageName
  fileType       = 'exe'
  file           = "$toolsPath\npp.8.3.3.Installer.exe"
  file64         = "$toolsPath\npp.8.3.3.Installer.x64.exe"
  softwareName   = 'Notepad\+\+*'
  silentArgs     = '/S'
  validExitCodes = @(0)
}

Install-ChocolateyInstallPackage @packageArgs

Get-ChildItem $toolsPath\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" '' } }

$installLocation = Get-AppInstallLocation $packageArgs.softwareName
if (!$installLocation)  {  Write-Warning "Can't find $PackageName install location"; return }

Write-Host "$packageName installed to '$installLocation'"
Install-BinFile -Path "$installLocation\notepad++.exe" -Name 'notepad++'
C:\ProgramData\chocolatey\lib\vcredist2005\tools\chocolateyInstall.ps1
$params = @{
  PackageName    = 'vcredist2005'
  FileType       = 'exe'
  Url            = 'https://download.microsoft.com/download/8/B/4/8B42259F-5D70-43F4-AC2E-4B208FD8D66A/vcredist_x86.EXE'
  Url64          = 'https://download.microsoft.com/download/8/B/4/8B42259F-5D70-43F4-AC2E-4B208FD8D66A/vcredist_x64.EXE'
  Checksum       = '8648c5fc29c44b9112fe52f9a33f80e7fc42d10f3b5b42b2121542a13e44adfd'
  Checksum64     = '4487570bd86e2e1aac29db2a1d0a91eb63361fcaac570808eb327cd4e0e2240d'
  ChecksumType   = 'sha256'
  ChecksumType64 = 'sha256'
  SilentArgs     = '/Q'
  ValidExitCodes = @(0,3010) # http://msdn.microsoft.com/en-us/library/aa368542(VS.85).aspx
}
Install-ChocolateyPackage @params

# Install both 32bit and 64bit on a 64bit OS
# If a program is compiled as x86 and the 32bit version of vcredist isn't installed, then the program would fail to start.
if (Get-ProcessorBits 64 -and ($env:chocolateyForceX86 -ne $true)) {
  $originalChocolateyForceX86 = $Env:chocolateyForceX86
  $Env:chocolateyForceX86 = $true
  Install-ChocolateyPackage @params
  $Env:chocolateyForceX86 = $originalChocolateyForceX86
}
C:\ProgramData\chocolatey\lib\vcredist2010\tools\chocolateyInstall.ps1
$params = @{
  PackageName    = 'vcredist2010'
  FileType       = 'exe'
  Url            = 'https://download.microsoft.com/download/1/6/5/165255E7-1014-4D0A-B094-B6A430A6BFFC/vcredist_x86.exe'
  Url64          = 'https://download.microsoft.com/download/1/6/5/165255E7-1014-4D0A-B094-B6A430A6BFFC/vcredist_x64.exe'
  Checksum       = '99dce3c841cc6028560830f7866c9ce2928c98cf3256892ef8e6cf755147b0d8'
  Checksum64     = 'f3b7a76d84d23f91957aa18456a14b4e90609e4ce8194c5653384ed38dada6f3'
  ChecksumType   = 'sha256'
  ChecksumType64 = 'sha256'
  SilentArgs     = '/Q /NORESTART'
  ValidExitCodes = @(0,3010) # http://msdn.microsoft.com/en-us/library/aa368542(VS.85).aspx
}
Install-ChocolateyPackage @params

# Install both 32bit and 64bit on a 64bit OS
# If a program is compiled as x86 and the 32bit version of vcredist isn't installed, then the program would fail to start.
if (Get-ProcessorBits 64 -and ($env:chocolateyForceX86 -ne $true)) {
  $originalChocolateyForceX86 = $Env:chocolateyForceX86
  $Env:chocolateyForceX86 = $true
  Install-ChocolateyPackage @params
  $Env:chocolateyForceX86 = $originalChocolateyForceX86
}
C:\ProgramData\chocolatey\lib\vcredist2013\tools\chocolateyInstall.ps1
$packageName = 'vcredist2013'
$installerType = 'exe'
$url = 'https://download.microsoft.com/download/0/5/6/056dcda9-d667-4e27-8001-8a0c6971d6b1/vcredist_x86.exe'
$checksum = '89f4e593ea5541d1c53f983923124f9fd061a1c0c967339109e375c661573c17'
$checksumType = 'sha256'
$url64 = 'https://download.microsoft.com/download/0/5/6/056dcda9-d667-4e27-8001-8a0c6971d6b1/vcredist_x64.exe'
$checksum64 = '20e2645b7cd5873b1fa3462b99a665ac8d6e14aae83ded9d875fea35ffdd7d7e'
$checksumType64 = 'sha256'
$silentArgs = '/Q /norestart'
$validExitCodes = @(0,3010)  # http://msdn.microsoft.com/en-us/library/aa368542(VS.85).aspx

Install-ChocolateyPackage -PackageName "$packageName" `
                          -FileType "$installerType" `
                          -Url "$url" `
                          -Url64bit "$url64" `
                          -SilentArgs "$silentArgs" `
                          -ValidExitCodes $validExitCodes `
                          -Checksum "$checksum" `
                          -ChecksumType "$checksumType" `
                          -Checksum64 "$checksum64" `
                          -ChecksumType64 "$checksumType64"

if (Get-ProcessorBits 64) {
  Install-ChocolateyPackage -PackageName "$packageName" `
                            -FileType "$installerType" `
                            -Url "$url" `
                            -SilentArgs "$silentArgs" `
                            -ValidExitCodes $validExitCodes `
                            -Checksum "$checksum" `
                            -ChecksumType "$checksumType"
}
C:\ProgramData\chocolatey\lib\speedtest\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop';
$toolsDir   =	 "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$PackageParameters = Get-PackageParameters

### PARAMETERS
If ($PackageParameters.InstallDir) {
  $installDir = $PackageParameters.InstallDir
} else {
  $installDir = "$toolsDir"
}

$packageArgs = @{
  packageName    = $env:ChocolateyPackageName
  unzipLocation  = "$installDir"
  url            = 'https://install.speedtest.net/app/cli/ookla-speedtest-1.1.1-win64.zip'
  checksum       = '39a4f97512fda5033ccca28674b009e15056c780ea1c296265391aca4897a494'
  checksumType   = 'sha256'
}
Install-ChocolateyZipPackage @packageArgs

$targetPath = Join-Path "$installDir" "speedtest.exe"

# Add StartMenu shortcut
If ( $PackageParameters.StartMenuShortcut ) {
  $programsPath = "$env:ProgramData\Microsoft\Windows\Start Menu\Programs\"
  $programsFilePath = Join-Path "$programsPath" "Speedtest CLI.lnk"
  Install-ChocolateyShortcut -shortcutFilePath "$programsFilePath" -targetPath "$targetPath"
}
C:\ProgramData\chocolatey\lib-bad\dotnetcore-desktopruntime\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
Set-StrictMode -Version 2

$data = & (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Path) -ChildPath data.ps1)

function Test-Skip32BitRequested
{
    return $Env:chocolateyPackageParameters -like '*Skip32Bit*'
}

function Test-QuietRequested
{
    return $Env:chocolateyPackageParameters -like '*Quiet*'
}

function Test-OsSupports32Bit
{
    $wow64 = Get-WindowsOptionalFeature -Online -FeatureName 'ServerCore-WOW64' -ErrorAction 'SilentlyContinue'
    if ($wow64 -eq $null) {
        Write-Debug 'ServerCore-WOW64 feature not found, assuming client or legacy server OS and 32-bit support always present'
        return $true
    }
    Write-Debug "ServerCore-WOW64 feature state is: $($wow64.State)"
    return ($wow64.State -eq 'Enabled')
}

function Get-PassiveOrQuietArgument
{
    [CmdletBinding()]
    Param (
        [string] $Scenario = 'installation'
    )
    if (Test-QuietRequested) {
        Write-Verbose "Performing a quiet $Scenario, as requested."
        $passiveOrQuiet = 'quiet'
    } else {
        Write-Verbose "Performing an $Scenario with visible progress window (default)."
        $passiveOrQuiet = 'passive'
    }
    return $passiveOrQuiet
}

$shouldInstall32Bit = $false
if (Get-ProcessorBits -eq 64) {
    if (-not (Test-Skip32BitRequested)) {
        if (Test-OsSupports32Bit) {
            $shouldInstall32Bit = $true
        } else {
            Write-Host 'Installation of 32-bit version will be skipped because the WOW64 subsystem is not installed.'
            Write-Warning 'Because of a limitation of the .NET Core installer, even the 64-bit version will probably fail to install (https://github.com/dotnet/runtime/issues/3087).'
        }
    } else {
        Write-Host 'Installation of 32-bit version will be skipped, as requested by package parameters.'
    }
}

$passiveOrQuiet = Get-PassiveOrQuietArgument -Scenario 'installation'
$arguments = @{
    packageName = $data.PackageName
    silentArgs = "$($data.AdditionalArgumentsToInstaller) /install /$passiveOrQuiet /norestart /log ""${Env:TEMP}\$($data.PackageName).log"""
    validExitCodes = @(
        0, # success
        3010 # success, restart required
    )
    url = $data.Url
    checksum = $data.Checksum
    checksumType = $data.ChecksumType
}
$arguments64 = @{
    url64 = $data.Url64
    checksum64 = $data.Checksum64
    checksumType64 = $data.ChecksumType64
}

Set-StrictMode -Off
Install-ChocolateyPackage @arguments @arguments64
if ($shouldInstall32Bit) {
    Install-ChocolateyPackage @arguments
}
C:\ProgramData\chocolatey\lib\dotnet-5.0-sdk-2xx\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
Set-StrictMode -Version 2

$data = & (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Path) -ChildPath data.ps1)

$arguments = @{
    packageName = $data.PackageName
    silentArgs = "$($data.AdditionalArgumentsToInstaller) /install /quiet /norestart /log ""${Env:TEMP}\$($data.PackageName)-$(Get-Date -Format 'yyyyMMddHHmmss').log"""
    validExitCodes = @(
        0, # success
        3010 # success, restart required
    )
    url = $data.Url
    checksum = $data.Checksum
    checksumType = $data.ChecksumType
}
$arguments64 = @{
    url64 = $data.Url64
    checksum64 = $data.Checksum64
    checksumType64 = $data.ChecksumType64
}

Set-StrictMode -Off
Install-ChocolateyPackage @arguments @arguments64
C:\ProgramData\chocolatey\lib\dotnet-6.0-sdk-2xx\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
Set-StrictMode -Version 2

$data = & (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Path) -ChildPath data.ps1)

$arguments = @{
    packageName = $data.PackageName
    silentArgs = "$($data.AdditionalArgumentsToInstaller) /install /quiet /norestart /log ""${Env:TEMP}\$($data.PackageName)-$(Get-Date -Format 'yyyyMMddHHmmss').log"""
    validExitCodes = @(
        0, # success
        3010 # success, restart required
    )
    url = $data.Url
    checksum = $data.Checksum
    checksumType = $data.ChecksumType
}
$arguments64 = @{
    url64 = $data.Url64
    checksum64 = $data.Checksum64
    checksumType64 = $data.ChecksumType64
}

Set-StrictMode -Off
Install-ChocolateyPackage @arguments @arguments64
C:\ProgramData\chocolatey\lib\dotnetfx\tools\ChocolateyInstall.ps1
$version = '4.8'
$arguments = @{
    PackageName = 'dotnetfx'
    Release = 528040
    Version = $version
    ProductNameWithVersion = "Microsoft .NET Framework $version"
    Url = 'https://download.visualstudio.microsoft.com/download/pr/2d6bb6b2-226a-4baa-bdec-798822606ff1/8494001c276a4b96804cde7829c04d7f/ndp48-x86-x64-allos-enu.exe'
    Checksum = '68C9986A8DCC0214D909AA1F31BEE9FB5461BB839EDCA996A75B08DDFFC1483F'
    ChecksumType = 'sha256'
}

Install-DotNetFramework @arguments
C:\ProgramData\chocolatey\lib\steam-client\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
$checksum = '3b616cb0beaacffb53884b5ba0453312d2577db598d2a877a3b251125fb281a1'

Start-CheckandStop "Steam"

$packageArgs = @{
  packageName   = 'steam-client'
  unzipLocation = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
  fileType      = 'exe'
  url           = 'http://media.steampowered.com/client/installer/SteamSetup.exe'
  silentArgs    = '/S'
  validExitCodes= @(0)
  softwareName  = 'steam*'
  checksum      = $checksum
  checksumType  = 'sha256'
}

Install-ChocolateyPackage @packageArgs

if ($ProcessWasRunning -eq "True") {&$ProcessFullPath}
C:\ProgramData\chocolatey\lib\NugetPackageExplorer\ChocolateyInstall.ps1

    $drop = Join-Path (Split-Path -parent $MyInvocation.MyCommand.Definition) "tools"
    $exeName = "NugetPackageExplorer.exe"
    $exe = Join-Path $drop $exeName

    $pp = Get-PackageParameters

    if(-not $pp['NoDesktopShortcut']) {
        $desktop = Join-Path $env:Public -ChildPath 'Desktop'
        $shortcutFile =  Join-Path $desktop -ChildPath "$($exeName.Split('.')[0]).lnk"
        
        $shortcutArgs = @{
            ShortcutFilePath = $shortcutFile
            TargetPath = $exe
            WorkingDirectory = $drop
            Desciption = 'NuGet Package Explorer'
        }

        Install-ChocolateyShortcut @shortcutArgs

    }
    
    New-Item "$exe.gui" -Type File -Force | Out-Null

    # Generate ignore files for all exe files except "NugetPackageExplorer.exe".
    # This prevents chocolatey from generating shims for them.
    $exeFiles = Get-ChildItem $drop -Include *.exe -Recurse -Exclude $exeName

    foreach ($exeFile in $exeFiles) {
        # generate an ignore file
        New-Item "$exeFile.ignore" -Type File -Force | Out-Null
    }    

    $allTypes = (cmd /c assoc)
    $testType1 = $allTypes | ? { $_.StartsWith('.nupkg') }
    if($testType1 -ne $null) {
        $fileType1=$testType1.Split("=")[1]
    } 
    else {
        $fileType1="Nuget.Package"
        Start-ChocolateyProcessAsAdmin "cmd /c assoc .nupkg=$fileType1"
    }
    Start-ChocolateyProcessAsAdmin "cmd /c ftype $fileType1=```"$exe```" ```"%1```""

    $testType2 = $allTypes | ? { $_.StartsWith('.snupkg') }
    if($testType2 -ne $null) {
        $fileType2=$testType2.Split("=")[1]
    } 
    else {
        $fileType2="Nuget.SymbolPackage"
        Start-ChocolateyProcessAsAdmin "cmd /c assoc .snupkg=$fileType2"
    }
    Start-ChocolateyProcessAsAdmin "cmd /c ftype $fileType2=```"$exe```" ```"%1```""

# SIG # Begin signature block
# MIIqkQYJKoZIhvcNAQcCoIIqgjCCKn4CAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCCu3EM3folSx9qV
# kGKo4PXRCFn8vfvlBsTkxs7GSNWiX6CCDxYwggPFMIICraADAgECAhACrFwmagtA
# m48LefKuRiV3MA0GCSqGSIb3DQEBBQUAMGwxCzAJBgNVBAYTAlVTMRUwEwYDVQQK
# EwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20xKzApBgNV
# BAMTIkRpZ2lDZXJ0IEhpZ2ggQXNzdXJhbmNlIEVWIFJvb3QgQ0EwHhcNMDYxMTEw
# MDAwMDAwWhcNMzExMTEwMDAwMDAwWjBsMQswCQYDVQQGEwJVUzEVMBMGA1UEChMM
# RGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMSswKQYDVQQD
# EyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5jZSBFViBSb290IENBMIIBIjANBgkqhkiG
# 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxszlc+b71LvlLS0ypt/lgT/JzSVJtnEqw9WU
# NGeiChywX2mmQLHEt7KP0JikqUFZOtPclNY823Q4pErMTSWC90qlUxI47vNJbXGR
# fmO2q6Zfw6SE+E9iUb74xezbOJLjBuUIkQzEKEFV+8taiRV+ceg1v01yCT2+OjhQ
# W3cxG42zxyRFmqesbQAUWgS3uhPrUQqYQUEiTmVhh4FBUKZ5XIneGUpX1S7mXRxT
# LH6YzRoGFqRoc9A0BBNcoXHTWnxV215k4TeHMFYE5RG0KYAS8Xk5iKICEXwnZreI
# t3jyygqoOKsKZMK/Zl2VhMGhJR6HXRpQCyASzEG7bgtROLhLywIDAQABo2MwYTAO
# BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUsT7DaQP4
# v0cB1JgmGggC72NkK8MwHwYDVR0jBBgwFoAUsT7DaQP4v0cB1JgmGggC72NkK8Mw
# DQYJKoZIhvcNAQEFBQADggEBABwaBpfc15yfPIhmBghXIdshR/gqZ6q/GDJ2QBBX
# wYrzetkRZY41+p78RbWe2UwxS7iR6EMsjrN4ztvjU3lx1uUhlAHaVYeaJGT2imbM
# 3pw3zag0sWmbI8ieeCIrcEPjVUcxYRnvWMWFL04w9qAxFiPI5+JlFjPLvxoboD34
# yl6LMYtgCIktDAZcUrfE+QqY0RVfnxK+fDZjOL1EpH/kJisKxJdpDemM4sAQV7jI
# dhKRVfJIadi8KgJbD0TUIDHb9LpwJl2QYJ68SxcJL7TLHkNoyQcnwdJc9+ohuWgS
# nDycv578gFybY83sR6olJ2egN/MAgn1U16n46S4To3foH0owggSRMIIDeaADAgEC
# AhAHsEGNpR4UjDMbvN63E4MjMA0GCSqGSIb3DQEBCwUAMGwxCzAJBgNVBAYTAlVT
# MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
# b20xKzApBgNVBAMTIkRpZ2lDZXJ0IEhpZ2ggQXNzdXJhbmNlIEVWIFJvb3QgQ0Ew
# HhcNMTgwNDI3MTI0MTU5WhcNMjgwNDI3MTI0MTU5WjBaMQswCQYDVQQGEwJVUzEY
# MBYGA1UEChMPLk5FVCBGb3VuZGF0aW9uMTEwLwYDVQQDEyguTkVUIEZvdW5kYXRp
# b24gUHJvamVjdHMgQ29kZSBTaWduaW5nIENBMIIBIjANBgkqhkiG9w0BAQEFAAOC
# AQ8AMIIBCgKCAQEAwQqv4aI0CI20XeYqTTZmyoxsSQgcCBGQnXnufbuDLhAB6GoT
# NB7HuEhNSS8ftV+6yq8GztBzYAJ0lALdBjWypMfL451/84AO5ZiZB3V7MB2uxgWo
# cV1ekDduU9bm1Q48jmR4SVkLItC+oQO/FIA2SBudVZUvYKeCJS5Ri9ibV7La4oo7
# BJChFiP8uR+v3OU33dgm5BBhWmth4oTyq22zCfP3NO6gBWEIPFR5S+KcefUTYmn2
# o7IvhvxzJsMCrNH1bxhwOyMl+DQcdWiVPuJBKDOO/hAKIxBG4i6ryQYBaKdhDgaA
# NSCik0UgZasz8Qgl8n0A73+dISPumD8L/4mdywIDAQABo4IBPzCCATswHQYDVR0O
# BBYEFMtck66Im/5Db1ZQUgJtePys4bFaMB8GA1UdIwQYMBaAFLE+w2kD+L9HAdSY
# JhoIAu9jZCvDMA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcDAzAS
# BgNVHRMBAf8ECDAGAQH/AgEAMDQGCCsGAQUFBwEBBCgwJjAkBggrBgEFBQcwAYYY
# aHR0cDovL29jc3AuZGlnaWNlcnQuY29tMEsGA1UdHwREMEIwQKA+oDyGOmh0dHA6
# Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEhpZ2hBc3N1cmFuY2VFVlJvb3RD
# QS5jcmwwPQYDVR0gBDYwNDAyBgRVHSAAMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8v
# d3d3LmRpZ2ljZXJ0LmNvbS9DUFMwDQYJKoZIhvcNAQELBQADggEBALNGxKTz6gq6
# clMF01GjC3RmJ/ZAoK1V7rwkqOkY3JDl++v1F4KrFWEzS8MbZsI/p4W31Eketazo
# Nxy23RT0zDsvJrwEC3R+/MRdkB7aTecsYmMeMHgtUrl3xEO3FubnQ0kKEU/HBCTd
# hR14GsQEccQQE6grFVlglrew+FzehWUu3SUQEp9t+iWpX/KfviDWx0H1azilMX15
# lzJUxK7kCzmflrk5jCOCjKqhOdGJoQqstmwP+07qXO18bcCzEC908P+TYkh0z9gV
# rlj7tyW9K9zPVPJZsLRaBp/QjMcH65o9Y1hD1uWtFQYmbEYkT1K9tuXHtQYx1Rpf
# /dC8Nbl4iukwgga0MIIFnKADAgECAhADQfx7PlWrFk8wzSZ/5o/BMA0GCSqGSIb3
# DQEBCwUAMFoxCzAJBgNVBAYTAlVTMRgwFgYDVQQKEw8uTkVUIEZvdW5kYXRpb24x
# MTAvBgNVBAMTKC5ORVQgRm91bmRhdGlvbiBQcm9qZWN0cyBDb2RlIFNpZ25pbmcg
# Q0EwHhcNMjEwNDI1MDAwMDAwWhcNMjQwNzIyMjM1OTU5WjCBsDEUMBIGA1UEBRML
# NjAzIDM4OSAwNjgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
# DgYDVQQHEwdSZWRtb25kMTEwLwYDVQQKEyhOdUdldCBQYWNrYWdlIEV4cGxvcmVy
# ICguTkVUIEZvdW5kYXRpb24pMTEwLwYDVQQDEyhOdUdldCBQYWNrYWdlIEV4cGxv
# cmVyICguTkVUIEZvdW5kYXRpb24pMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
# CgKCAgEAmaVmCGEW6/saEP9RoTxBa6i4eb60GKcPAWDmQY5dMHFpOyca8z8mq6P/
# N7+6KdP3J3oaAWxHIVUJuBda50wysISmcwKxvNdZ+DaWMPptjnnq9hkNe3HAQHYu
# 6OigtZ+6iPWbodiHXE1W+KZbmJB+3/HaRMM1QwybzFOagEEvI3VZ22PTn+acU8Wg
# 2fotKP4ZbXULjR4mw2kz6WnCaKA897Xuq2vB+YU13qNm17knrasmolFGICpjxSTx
# IRmQozvH/Of7cgpW+c+JU/R/Mu1Ohk4I6a04JCfNHdq3L8JzmbFVg1konqPjQFYd
# w1y8i3hBZWUptd4301ilfOW8+TUDG+AHMSYnWe9dClg0Q8haLX040nDEeDWOvPmI
# Br+6S0E2SNcFps51JdyNov/MQbsSIYhfopWwgfycHjzetyNydWIzs5pTg7QEblRo
# Z2NwH16BW35G5RUslwBsTOxK/f8xAKW7QB4njq8YaCyIR1W86suEiuZH7beamslK
# 9HWKYvwQAgM5syA4BOcosUxnexMvIC01FqrmQE8yyuCmiHR/LrjxFnpTIOVpD5A6
# mkGm8A+Qz0TfN1bWh3i1RpkwP3RZsUoCrBP4H0ntFB8yydGJeMQ1ZCcqhkeSN6bv
# lJjzDZdQCfYibr8ZABcp4UYvoRJ/1ixbmJZuJHbRnHrZHph6Rj8CAwEAAaOCAh0w
# ggIZMB8GA1UdIwQYMBaAFMtck66Im/5Db1ZQUgJtePys4bFaMB0GA1UdDgQWBBRo
# g4yABXkP1FyYnOZQdWjsQGKXYjA0BgNVHREELTAroCkGCCsGAQUFBwgDoB0wGwwZ
# VVMtV0FTSElOR1RPTi02MDMgMzg5IDA2ODAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0l
# BAwwCgYIKwYBBQUHAwMwgZkGA1UdHwSBkTCBjjBFoEOgQYY/aHR0cDovL2NybDMu
# ZGlnaWNlcnQuY29tL05FVEZvdW5kYXRpb25Qcm9qZWN0c0NvZGVTaWduaW5nQ0Eu
# Y3JsMEWgQ6BBhj9odHRwOi8vY3JsNC5kaWdpY2VydC5jb20vTkVURm91bmRhdGlv
# blByb2plY3RzQ29kZVNpZ25pbmdDQS5jcmwwSwYDVR0gBEQwQjA2BglghkgBhv1s
# AwEwKTAnBggrBgEFBQcCARYbaHR0cDovL3d3dy5kaWdpY2VydC5jb20vQ1BTMAgG
# BmeBDAEEATCBhAYIKwYBBQUHAQEEeDB2MCQGCCsGAQUFBzABhhhodHRwOi8vb2Nz
# cC5kaWdpY2VydC5jb20wTgYIKwYBBQUHMAKGQmh0dHA6Ly9jYWNlcnRzLmRpZ2lj
# ZXJ0LmNvbS9ORVRGb3VuZGF0aW9uUHJvamVjdHNDb2RlU2lnbmluZ0NBLmNydDAM
# BgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4IBAQCk/mSzzC7UbC68NjlW41bj
# DkHVQDsDqdnFWiMQlmnZQODGT414JhS8J45pjX9hanTTTAz2Rl7Tv5h+jS3dtH7q
# RjOdMl0yTJL730lbk5jg/W7nWVp6jq5cki8SXSFSPrfJ6imuqvTFqYZtkEoBaU99
# 0XrAHGYGj2PUhzdmQ2B2dm+7mb/X2nCpdayO8YI3ZOhDevReXIJQ86T9UnFzvdPu
# uJdR7YamrV5SEwkT1obgTmAlo2cvFwyRU2GDjGP9JVbd0sDeihJ1xb4c3IHPYC07
# 0OEpreRCEREFUXWc+gN6CHhOu0wjy4FVtj/exBo+V82zdglrHTILicEvXHwowTqB
# MYIa0TCCGs0CAQEwbjBaMQswCQYDVQQGEwJVUzEYMBYGA1UEChMPLk5FVCBGb3Vu
# ZGF0aW9uMTEwLwYDVQQDEyguTkVUIEZvdW5kYXRpb24gUHJvamVjdHMgQ29kZSBT
# aWduaW5nIENBAhADQfx7PlWrFk8wzSZ/5o/BMA0GCWCGSAFlAwQCAQUAoIHtMBkG
# CSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgorBgEE
# AYI3AgEVMC8GCSqGSIb3DQEJBDEiBCD8UYZalyz4cadoPNIoWov47kReF3ijgzYL
# AAbJr9L1PTCBgAYKKwYBBAGCNwIBDDFyMHCgLoAsAE4AdQBHAGUAdAAgAFAAYQBj
# AGsAYQBnAGUAIABFAHgAcABsAG8AcgBlAHKhPoA8aHR0cHM6Ly9naXRodWIuY29t
# L051R2V0UGFja2FnZUV4cGxvcmVyL051R2V0UGFja2FnZUV4cGxvcmVyMA0GCSqG
# SIb3DQEBAQUABIICAGh5EDejubvhi/4pG+E7KBWNYqTCFJn1+P7gwvYE/BVH92nA
# Cw6i91Lu9HjaDKN/vGJt6P6qRERiZroHYCoSAHd5HCP19BjfamPYXuJ3lUivw3u3
# VVSD3W69GLFd5R+Ni4aIU7drjoGU1Nbfte9VP1ar4hmqbIYCDKL3QKw7dicWdyx+
# hGCuhKcDe0BbBO5bJbTA8TpNNIMhPo5Ebk1TVNeTNzluorpjBtF49Y750LTQkdeQ
# zYo/6JE1dmBkbYZKNSrrAdIMEERH/AKAz8mgOsf3+pnBtRbXFpoNbNdfrUu5YvfP
# fPni++NHjjVc1A44sTpgJAlhsTTVOqGIG6aHB23Wyiu+eAokl7hNw1UggK1nlim/
# YIipNmRWuhvuNN3SKPEDWunc2CDihZzQcRjRrmvhluuOAhFur/bLtC0w7/LhfkWi
# R9epfOdi0YQfwAMwJTgvhh+WoZBhkhumYmbwE3Stll97jecoEZz6nEzkxjB9Qp7n
# 2HEHFOoP4aYnsV7DIz1ryNv+Mh9S+tM9TTZbzeqS9UtJNmGYZHDGyqWW6SIUqVRZ
# BOnj4aFOe7lJW95g6PpNko7cLkt3p8R44RMAz+QMuta5CVYDPyJKk69bP0hWEvqE
# rs2AEfvOSrnwHLsIAk1jOPRmmOiQIWb0RhZ5Y8SgQV7b+29C97Kw5mfMEFAtoYIX
# RDCCF0AGCisGAQQBgjcDAwExghcwMIIXLAYJKoZIhvcNAQcCoIIXHTCCFxkCAQMx
# DzANBglghkgBZQMEAgEFADB4BgsqhkiG9w0BCRABBKBpBGcwZQIBAQYJYIZIAYb9
# bAcBMDEwDQYJYIZIAWUDBAIBBQAEID6k/q1GQ3xc/uvzXHaXqvuOfD/9Pb9LXd4n
# IadG5tDTAhEAtdwlAWAlC3d/V6EgoNc/rxgPMjAyMjA4MjIxMzAzNDdaoIITDTCC
# BsYwggSuoAMCAQICEAp6SoieyZlCkAZjOE2Gl50wDQYJKoZIhvcNAQELBQAwYzEL
# MAkGA1UEBhMCVVMxFzAVBgNVBAoTDkRpZ2lDZXJ0LCBJbmMuMTswOQYDVQQDEzJE
# aWdpQ2VydCBUcnVzdGVkIEc0IFJTQTQwOTYgU0hBMjU2IFRpbWVTdGFtcGluZyBD
# QTAeFw0yMjAzMjkwMDAwMDBaFw0zMzAzMTQyMzU5NTlaMEwxCzAJBgNVBAYTAlVT
# MRcwFQYDVQQKEw5EaWdpQ2VydCwgSW5jLjEkMCIGA1UEAxMbRGlnaUNlcnQgVGlt
# ZXN0YW1wIDIwMjIgLSAyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
# uSqWI6ZcvF/WSfAVghj0M+7MXGzj4CUu0jHkPECu+6vE43hdflw26vUljUOjges4
# Y/k8iGnePNIwUQ0xB7pGbumjS0joiUF/DbLW+YTxmD4LvwqEEnFsoWImAdPOw2z9
# rDt+3Cocqb0wxhbY2rzrsvGD0Z/NCcW5QWpFQiNBWvhg02UsPn5evZan8Pyx9PQo
# z0J5HzvHkwdoaOVENFJfD1De1FksRHTAMkcZW+KYLo/Qyj//xmfPPJOVToTpdhiY
# mREUxSsMoDPbTSSF6IKU4S8D7n+FAsmG4dUYFLcERfPgOL2ivXpxmOwV5/0u7NKb
# AIqsHY07gGj+0FmYJs7g7a5/KC7CnuALS8gI0TK7g/ojPNn/0oy790Mj3+fDWgVi
# fnAs5SuyPWPqyK6BIGtDich+X7Aa3Rm9n3RBCq+5jgnTdKEvsFR2wZBPlOyGYf/b
# ES+SAzDOMLeLD11Es0MdI1DNkdcvnfv8zbHBp8QOxO9APhk6AtQxqWmgSfl14Zvo
# aORqDI/r5LEhe4ZnWH5/H+gr5BSyFtaBocraMJBr7m91wLA2JrIIO/+9vn9sExjf
# xm2keUmti39hhwVo99Rw40KV6J67m0uy4rZBPeevpxooya1hsKBBGBlO7UebYZXt
# PgthWuo+epiSUc0/yUTngIspQnL3ebLdhOon7v59emsCAwEAAaOCAYswggGHMA4G
# A1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUF
# BwMIMCAGA1UdIAQZMBcwCAYGZ4EMAQQCMAsGCWCGSAGG/WwHATAfBgNVHSMEGDAW
# gBS6FtltTYUvcyl2mi91jGogj57IbzAdBgNVHQ4EFgQUjWS3iSH+VlhEhGGn6m8c
# No/drw0wWgYDVR0fBFMwUTBPoE2gS4ZJaHR0cDovL2NybDMuZGlnaWNlcnQuY29t
# L0RpZ2lDZXJ0VHJ1c3RlZEc0UlNBNDA5NlNIQTI1NlRpbWVTdGFtcGluZ0NBLmNy
# bDCBkAYIKwYBBQUHAQEEgYMwgYAwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRp
# Z2ljZXJ0LmNvbTBYBggrBgEFBQcwAoZMaHR0cDovL2NhY2VydHMuZGlnaWNlcnQu
# Y29tL0RpZ2lDZXJ0VHJ1c3RlZEc0UlNBNDA5NlNIQTI1NlRpbWVTdGFtcGluZ0NB
# LmNydDANBgkqhkiG9w0BAQsFAAOCAgEADS0jdKbR9fjqS5k/AeT2DOSvFp3Zs4yX
# gimcQ28BLas4tXARv4QZiz9d5YZPvpM63io5WjlO2IRZpbwbmKrobO/RSGkZOFvP
# iTkdcHDZTt8jImzV3/ZZy6HC6kx2yqHcoSuWuJtVqRprfdH1AglPgtalc4jEmIDf
# 7kmVt7PMxafuDuHvHjiKn+8RyTFKWLbfOHzL+lz35FO/bgp8ftfemNUpZYkPopzA
# ZfQBImXH6l50pls1klB89Bemh2RPPkaJFmMga8vye9A140pwSKm25x1gvQQiFSVw
# BnKpRDtpRxHT7unHoD5PELkwNuTzqmkJqIt+ZKJllBH7bjLx9bs4rc3AkxHVMnhK
# SzcqTPNc3LaFwLtwMFV41pj+VG1/calIGnjdRncuG3rAM4r4SiiMEqhzzy350yPy
# nhngDZQooOvbGlGglYKOKGukzp123qlzqkhqWUOuX+r4DwZCnd8GaJb+KqB0W2Nm
# 3mssuHiqTXBt8CzxBxV+NbTmtQyimaXXFWs1DoXW4CzM4AwkuHxSCx6ZfO/IyMWM
# WGmvqz3hz8x9Fa4Uv4px38qXsdhH6hyF4EVOEhwUKVjMb9N/y77BDkpvIJyu2XMy
# WQjnLZKhGhH+MpimXSuX4IvTnMxttQ2uR2M4RxdbbxPaahBuH0m3RFu0CAqHWlkE
# dhGhp3cCExwwggauMIIElqADAgECAhAHNje3JFR82Ees/ShmKl5bMA0GCSqGSIb3
# DQEBCwUAMGIxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAX
# BgNVBAsTEHd3dy5kaWdpY2VydC5jb20xITAfBgNVBAMTGERpZ2lDZXJ0IFRydXN0
# ZWQgUm9vdCBHNDAeFw0yMjAzMjMwMDAwMDBaFw0zNzAzMjIyMzU5NTlaMGMxCzAJ
# BgNVBAYTAlVTMRcwFQYDVQQKEw5EaWdpQ2VydCwgSW5jLjE7MDkGA1UEAxMyRGln
# aUNlcnQgVHJ1c3RlZCBHNCBSU0E0MDk2IFNIQTI1NiBUaW1lU3RhbXBpbmcgQ0Ew
# ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDGhjUGSbPBPXJJUVXHJQPE
# 8pE3qZdRodbSg9GeTKJtoLDMg/la9hGhRBVCX6SI82j6ffOciQt/nR+eDzMfUBML
# JnOWbfhXqAJ9/UO0hNoR8XOxs+4rgISKIhjf69o9xBd/qxkrPkLcZ47qUT3w1lbU
# 5ygt69OxtXXnHwZljZQp09nsad/ZkIdGAHvbREGJ3HxqV3rwN3mfXazL6IRktFLy
# dkf3YYMZ3V+0VAshaG43IbtArF+y3kp9zvU5EmfvDqVjbOSmxR3NNg1c1eYbqMFk
# dECnwHLFuk4fsbVYTXn+149zk6wsOeKlSNbwsDETqVcplicu9Yemj052FVUmcJgm
# f6AaRyBD40NjgHt1biclkJg6OBGz9vae5jtb7IHeIhTZgirHkr+g3uM+onP65x9a
# bJTyUpURK1h0QCirc0PO30qhHGs4xSnzyqqWc0Jon7ZGs506o9UD4L/wojzKQtwY
# SH8UNM/STKvvmz3+DrhkKvp1KCRB7UK/BZxmSVJQ9FHzNklNiyDSLFc1eSuo80Vg
# vCONWPfcYd6T/jnA+bIwpUzX6ZhKWD7TA4j+s4/TXkt2ElGTyYwMO1uKIqjBJgj5
# FBASA31fI7tk42PgpuE+9sJ0sj8eCXbsq11GdeJgo1gJASgADoRU7s7pXcheMBK9
# Rp6103a50g5rmQzSM7TNsQIDAQABo4IBXTCCAVkwEgYDVR0TAQH/BAgwBgEB/wIB
# ADAdBgNVHQ4EFgQUuhbZbU2FL3MpdpovdYxqII+eyG8wHwYDVR0jBBgwFoAU7Nfj
# gtJxXWRM3y5nP+e6mK4cD08wDgYDVR0PAQH/BAQDAgGGMBMGA1UdJQQMMAoGCCsG
# AQUFBwMIMHcGCCsGAQUFBwEBBGswaTAkBggrBgEFBQcwAYYYaHR0cDovL29jc3Au
# ZGlnaWNlcnQuY29tMEEGCCsGAQUFBzAChjVodHRwOi8vY2FjZXJ0cy5kaWdpY2Vy
# dC5jb20vRGlnaUNlcnRUcnVzdGVkUm9vdEc0LmNydDBDBgNVHR8EPDA6MDigNqA0
# hjJodHRwOi8vY3JsMy5kaWdpY2VydC5jb20vRGlnaUNlcnRUcnVzdGVkUm9vdEc0
# LmNybDAgBgNVHSAEGTAXMAgGBmeBDAEEAjALBglghkgBhv1sBwEwDQYJKoZIhvcN
# AQELBQADggIBAH1ZjsCTtm+YqUQiAX5m1tghQuGwGC4QTRPPMFPOvxj7x1Bd4ksp
# +3CKDaopafxpwc8dB+k+YMjYC+VcW9dth/qEICU0MWfNthKWb8RQTGIdDAiCqBa9
# qVbPFXONASIlzpVpP0d3+3J0FNf/q0+KLHqrhc1DX+1gtqpPkWaeLJ7giqzl/Yy8
# ZCaHbJK9nXzQcAp876i8dU+6WvepELJd6f8oVInw1YpxdmXazPByoyP6wCeCRK6Z
# JxurJB4mwbfeKuv2nrF5mYGjVoarCkXJ38SNoOeY+/umnXKvxMfBwWpx2cYTgAnE
# tp/Nh4cku0+jSbl3ZpHxcpzpSwJSpzd+k1OsOx0ISQ+UzTl63f8lY5knLD0/a6fx
# ZsNBzU+2QJshIUDQtxMkzdwdeDrknq3lNHGS1yZr5Dhzq6YBT70/O3itTK37xJV7
# 7QpfMzmHQXh6OOmc4d0j/R0o08f56PGYX/sr2H7yRp11LB4nLCbbbxV7HhmLNriT
# 1ObyF5lZynDwN7+YAN8gFk8n+2BnFqFmut1VwDophrCYoCvtlUG3OtUVmDG0YgkP
# Cr2B2RP+v6TR81fZvAT6gt4y3wSJ8ADNXcL50CN/AAvkdgIm2fBldkKmKYcJRyvm
# fxqkhQ/8mJb2VVQrH4D6wPIOK+XW+6kvRBVK5xMOHds3OBqhK/bt1nz8MIIFjTCC
# BHWgAwIBAgIQDpsYjvnQLefv21DiCEAYWjANBgkqhkiG9w0BAQwFADBlMQswCQYD
# VQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGln
# aWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgQ0Ew
# HhcNMjIwODAxMDAwMDAwWhcNMzExMTA5MjM1OTU5WjBiMQswCQYDVQQGEwJVUzEV
# MBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29t
# MSEwHwYDVQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3QgRzQwggIiMA0GCSqGSIb3
# DQEBAQUAA4ICDwAwggIKAoICAQC/5pBzaN675F1KPDAiMGkz7MKnJS7JIT3yithZ
# wuEppz1Yq3aaza57G4QNxDAf8xukOBbrVsaXbR2rsnnyyhHS5F/WBTxSD1Ifxp4V
# pX6+n6lXFllVcq9ok3DCsrp1mWpzMpTREEQQLt+C8weE5nQ7bXHiLQwb7iDVySAd
# YyktzuxeTsiT+CFhmzTrBcZe7FsavOvJz82sNEBfsXpm7nfISKhmV1efVFiODCu3
# T6cw2Vbuyntd463JT17lNecxy9qTXtyOj4DatpGYQJB5w3jHtrHEtWoYOAMQjdjU
# N6QuBX2I9YI+EJFwq1WCQTLX2wRzKm6RAXwhTNS8rhsDdV14Ztk6MUSaM0C/CNda
# SaTC5qmgZ92kJ7yhTzm1EVgX9yRcRo9k98FpiHaYdj1ZXUJ2h4mXaXpI8OCiEhtm
# mnTK3kse5w5jrubU75KSOp493ADkRSWJtppEGSt+wJS00mFt6zPZxd9LBADMfRyV
# w4/3IbKyEbe7f/LVjHAsQWCqsWMYRJUadmJ+9oCw++hkpjPRiQfhvbfmQ6QYuKZ3
# AeEPlAwhHbJUKSWJbOUOUlFHdL4mrLZBdd56rF+NP8m800ERElvlEFDrMcXKchYi
# Cd98THU/Y+whX8QgUWtvsauGi0/C1kVfnSD8oR7FwI+isX4KJpn15GkvmB0t9dmp
# sh3lGwIDAQABo4IBOjCCATYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU7Nfj
# gtJxXWRM3y5nP+e6mK4cD08wHwYDVR0jBBgwFoAUReuir/SSy4IxLVGLp6chnfNt
# yA8wDgYDVR0PAQH/BAQDAgGGMHkGCCsGAQUFBwEBBG0wazAkBggrBgEFBQcwAYYY
# aHR0cDovL29jc3AuZGlnaWNlcnQuY29tMEMGCCsGAQUFBzAChjdodHRwOi8vY2Fj
# ZXJ0cy5kaWdpY2VydC5jb20vRGlnaUNlcnRBc3N1cmVkSURSb290Q0EuY3J0MEUG
# A1UdHwQ+MDwwOqA4oDaGNGh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2Vy
# dEFzc3VyZWRJRFJvb3RDQS5jcmwwEQYDVR0gBAowCDAGBgRVHSAAMA0GCSqGSIb3
# DQEBDAUAA4IBAQBwoL9DXFXnOF+go3QbPbYW1/e/Vwe9mqyhhyzshV6pGrsi+Ica
# aVQi7aSId229GhT0E0p6Ly23OO/0/4C5+KH38nLeJLxSA8hO0Cre+i1Wz/n096ww
# epqLsl7Uz9FDRJtDIeuWcqFItJnLnU+nBgMTdydE1Od/6Fmo8L8vC6bp8jQ87PcD
# x4eo0kxAGTVGamlUsLihVo7spNU96LHc/RzY9HdaXFSMb++hUD38dglohJ9vytsg
# jTVgHAIDyyCwrFigDkBjxZgiwbJZ9VVrzyerbHbObyMt9H5xaiNrIv8SuFQtJ37Y
# OtnwtoeW/VvRXKwYw02fc7cBqZ9Xql4o4rmUMYIDdjCCA3ICAQEwdzBjMQswCQYD
# VQQGEwJVUzEXMBUGA1UEChMORGlnaUNlcnQsIEluYy4xOzA5BgNVBAMTMkRpZ2lD
# ZXJ0IFRydXN0ZWQgRzQgUlNBNDA5NiBTSEEyNTYgVGltZVN0YW1waW5nIENBAhAK
# ekqInsmZQpAGYzhNhpedMA0GCWCGSAFlAwQCAQUAoIHRMBoGCSqGSIb3DQEJAzEN
# BgsqhkiG9w0BCRABBDAcBgkqhkiG9w0BCQUxDxcNMjIwODIyMTMwMzQ3WjArBgsq
# hkiG9w0BCRACDDEcMBowGDAWBBSFCPOGUVyz0wd9trS3wH8bSl5B3jAvBgkqhkiG
# 9w0BCQQxIgQgayGYEerXRgrqNYwCeff9jXiq++BRedJy9IKAwonhQj4wNwYLKoZI
# hvcNAQkQAi8xKDAmMCQwIgQgnaaQFcNJxsGJeEW6NYKtcMiPpCk722q+nCvSU5J5
# 5jswDQYJKoZIhvcNAQEBBQAEggIAt2Ys3d7jhgayHDWrgamLODD4dtYWj5zsVdcK
# VlyAcqRgU5LMD4OSH4+iKfrRdGr+2OynwzlX/KN9kXS+CxGTTnHivr9dhox5DnmF
# nsCb9NbzK+Jb06j5HZOM3pnZKZ7KIsmSDcWdoG7FFpEPUXekFPqdOU7DOSRV7Wi7
# Z/VTCkuxKyAE7P51u42/16gWQVD/Rjy+z4KqK7l4TeRlOnvR/TWRphf3cGamXd4W
# rvZbxZQx8j+clqAvmqiLftXNSrsCnnRyDt/DHNk90JwZUJIXgXAjWl1ZkMIaeS3L
# EOjf6dsyxBawgbXceiEQrnHzeG9QrOlVuZTws3ZeHwvGgxkNOksnaeFK0XxXZJxY
# omfds2bzd6BRnoBJVCxW8N3KxNv5oHvvULHtZB20qblPrGRu8Ydz6FXe1UMIafLR
# TjQRAW6pCOPOzHgqK6o13g9pGUJ3R6Gsw6QJTUt9nAR45uYILcjDivG0PRHhTQMd
# MyMFUe1eN0bXNlt0uCDL2vib+10MNIDn6+M5FwVpLeyk1Mx3DQ4qTfcyQBTxRPhd
# uvSuNRqr1AHA+ksUIJiedq8ld2GL1OGFjOBuPOat5inTmo11yL6IITuGkdmJQYQW
# K8//3mnwzslb2qDYFf9I/b8CUATzAGNAQUuG3CzmPlgX5xdRC95EO/4ydKdk9Awf
# iBGgb3s=
# SIG # End signature block
C:\ProgramData\chocolatey\lib\docfx\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop';

$packageName= 'DocFX'
$version    = 'v2.59.4'
$toolsDir   = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$url        = "https://github.com/dotnet/docfx/releases/download/$version/docfx.zip"
$hash       = '6de3058630cd89eeee8157d26a81d508a3ce5c0b64b0473c6360bf10a985a52b'

$packageArgs = @{
  packageName   = $packageName
  unzipLocation = $toolsDir
  url           = $url
  checksum      = $hash
  checksumType  = 'SHA256'
}

Install-ChocolateyZipPackage @packageArgs

C:\ProgramData\chocolatey\lib\nmap\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName   = $env:ChocolateyPackageName
  fileType      = 'exe'
  file          = "$toolsPath\nmap-7.93-setup.exe"

  softwareName  = 'NMap*'

  silentArgs    = ''
  validExitCodes= @(0)
}

Start-Process $toolsPath\install.ahk
Install-ChocolateyInstallPackage @packageArgs

Get-ChildItem $toolsPath\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" "" }}
C:\ProgramData\chocolatey\lib\putty.portable\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath  = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"

$packageArgs = @{
    PackageName  = "putty.portable"
    File         = "$toolsPath\putty_x32.zip"
    File64       = "$toolsPath\putty_x64.zip"
    Destination  = $toolsPath
}
Get-ChocolateyUnzip @packageArgs

Remove-Item -force "$toolsPath\*.zip" -ea 0
C:\ProgramData\chocolatey\lib\vlc.install\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir = Split-Path $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName    = 'vlc.install'
  fileType       = 'exe'
  file           = "$toolsDir\vlc-3.0.18-win32_x32.exe"
  file64         = "$toolsDir\vlc-3.0.18-win64_x64.exe"
  silentArgs     = '/S'
  validExitCodes = @(0, 1223)
}
Install-ChocolateyInstallPackage @packageArgs
Remove-Item ($toolsDir + '\*.' + $packageArgs.fileType)

$pp = Get-PackageParameters
if ($pp.Language) {
    Write-Host 'Setting langauge to' $pp.Language
    mkdir -force HKCU:\Software\VideoLAN\VLC
    Set-ItemProperty HKCU:\Software\VideoLAN\VLC Lang $pp.Language
}

$packageName = $packageArgs.packageName
$installLocation = Get-AppInstallLocation $packageName
if ($installLocation)  {
    Write-Host "$packageName installed to '$installLocation'"
    Register-Application "$installLocation\$packageName.exe"
    Write-Host "$packageName registered as $packageName"
}
else { Write-Warning "Can't find $PackageName install location" }
C:\ProgramData\chocolatey\lib\dotnetcore-3.1-sdk-4xx\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
Set-StrictMode -Version 2

$data = & (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Path) -ChildPath data.ps1)

$arguments = @{
    packageName = $data.PackageName
    silentArgs = "$($data.AdditionalArgumentsToInstaller) /install /quiet /norestart /log ""${Env:TEMP}\$($data.PackageName)-$(Get-Date -Format 'yyyyMMddHHmmss').log"""
    validExitCodes = @(
        0, # success
        3010 # success, restart required
    )
    url = $data.Url
    checksum = $data.Checksum
    checksumType = $data.ChecksumType
}
$arguments64 = @{
    url64 = $data.Url64
    checksum64 = $data.Checksum64
    checksumType64 = $data.ChecksumType64
}

Set-StrictMode -Off
Install-ChocolateyPackage @arguments @arguments64
C:\ProgramData\chocolatey\lib\msbuild-structured-log-viewer\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop'; # stop on all errors
$toolsDir   = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$fileLocation = Join-Path $toolsDir 'MSBuildStructuredLogSetup.exe'

$packageArgs = @{
  packageName   = $env:ChocolateyPackageName
  unzipLocation = $toolsDir
  fileType      = 'EXE'
  file         = $fileLocation

  softwareName  = 'MSBuild Structured Log Viewer'

  validExitCodes= @(0)
  silentArgs   = '-s'           # Squirrel
}

Install-ChocolateyInstallPackage @packageArgs
C:\ProgramData\chocolatey\lib\sharex\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$packageArgs = @{
    packageName    = $env:ChocolateyPackageName
    fileType       = 'exe'       
    url            = 'https://github.com/ShareX/ShareX/releases/download/v15.0.0/ShareX-15.0.0-setup.exe' 
    checksum       = 'b95166183ae61504728c5667c71743a978829b98ed11bea6c17d2c338d2e86e7'
    checksumType   = 'sha256'
    silentArgs     = '/sp /silent /norestart'
	validExitCodes = @(0)
}

Write-Host "If an older version of ShareX is running on this machine, it will be closed prior to the installation of the newer version."
Get-Process -Name sharex -ErrorAction SilentlyContinue | Stop-Process

Install-ChocolateyPackage @packageArgs
C:\ProgramData\chocolatey\lib\Temurinjre\tools\chocolateyinstall.ps1
$ErrorActionPreference  = 'Stop'
 if(!$PSScriptRoot){ $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent }
. "$PSScriptRoot\helper.ps1"

# Get Package Parameters
$parameters = (Get-PackageParameters); $pp = ( Test-PackageParamaters $parameters ).ToString() -replace('""|="True"','') -replace(";", ' ') -replace("==", '=')

$packageArgs = @{
  PackageName    = 'Temurinjre'
  Url64bit       = 'https://github.com/adoptium/temurin20-binaries/releases/download/jdk-20.0.1%2B9/OpenJDK20U-jre_x64_windows_hotspot_20.0.1_9.msi'
  Checksum64     = '2FE49A1545C1F478FAE75DE7CDBDEC8F4301E9917FF3D4598512994205A0CD94'
  ChecksumType64 = 'sha256'
  fileType       = 'msi'
  SilentArgs     = $pp
}

Install-ChocolateyPackage @packageArgs
C:\Temp\ChocolateyCache\ChocolateyScratch\temurinjre\20.0.1.900\tools\chocolateyinstall.ps1
$ErrorActionPreference  = 'Stop'
 if(!$PSScriptRoot){ $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent }
. "$PSScriptRoot\helper.ps1"

# Get Package Parameters
$parameters = (Get-PackageParameters); $pp = ( Test-PackageParamaters $parameters ).ToString() -replace('""|="True"','') -replace(";", ' ') -replace("==", '=')

$packageArgs = @{
  PackageName    = 'Temurinjre'
  Url64bit       = 'https://github.com/adoptium/temurin20-binaries/releases/download/jdk-20.0.1%2B9/OpenJDK20U-jre_x64_windows_hotspot_20.0.1_9.msi'
  Checksum64     = '2FE49A1545C1F478FAE75DE7CDBDEC8F4301E9917FF3D4598512994205A0CD94'
  ChecksumType64 = 'sha256'
  fileType       = 'msi'
  SilentArgs     = $pp
}

Install-ChocolateyPackage @packageArgs
C:\ProgramData\chocolatey\lib\es\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
$toolsDir = Split-Path $MyInvocation.MyCommand.Definition

$packageArgs = @{
    packageName    = 'es'
    FileFullPath   = "$toolsDir\ES-1.1.0.26.zip"
    Destination    = $toolsDir
}

Get-ChocolateyUnzip @packageArgs

Remove-Item -Path $toolsDir\*.zip -Force -EA 0
C:\ProgramData\chocolatey\lib-bkp\powershell-core\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop';

$packageName= 'powershell-core'
$fileType = 'msi'
$toolsDir   = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$Version = '7.3.4'

# Flag whether we're being invoked by AU module
[bool] $runningAU = (Test-Path Function:\au_GetLatest)

if (-not $runningAU) {
  Try {
    [Version]$Version
    $InstallFolder = "$env:ProgramFiles\PowerShell\$($version.split('.')[0])"
    If (Test-Path "$InstallFolder\pwsh.exe")
    {
      If ((get-command "$InstallFolder\pwsh.exe").version -ge [version]$Version)
      {
        Write-output "The version of PowerShell in this package ($Version) is already installed by another means, marking package as installed"
        Exit 0
      }
    }  
  }
  Catch {
    Write-output "Note: This is a prelease package"
    $PreleasePackage = $true
    $InstallFolder = "$env:ProgramFiles\PowerShell\$($version.split('.')[0])-preview"
  }
}


$packageArgs = @{
  packageName   = $packageName
  unzipLocation = $toolsDir
  fileType      = $fileType
  url64      = 'https://github.com/PowerShell/PowerShell/releases/download/v7.3.4/PowerShell-7.3.4-win-x64.msi'
  checksum64    = '61b31ec847d4fdc4d39050f4f650968c55acf6f16cb66b1f00bf05db4e946559'
  checksumType64= 'sha256'
  url           = 'https://github.com/PowerShell/PowerShell/releases/download/v7.3.4/PowerShell-7.3.4-win-x86.msi'
  checksum      = 'f408178d37ae91d80ed58362ff729b97c1839008dcd1383ab97190316d9f8661'
  checksumType  = 'sha256'
  silentArgs    = '/qn', '/norestart', "/l*v `"$($env:TEMP)\$($packageName).$($env:chocolateyPackageVersion).MsiInstall.log`"" # ALLUSERS=1 DISABLEDESKTOPSHORTCUT=1 ADDDESKTOPICON=0 ADDSTARTMENU=0
  validExitCodes= @(0, 3010, 1641)
  softwareName  = "PowerShell-7.*"
}

$pp = Get-PackageParameters

$pp.Keys.ForEach({
switch -RegEx ($_) {
'^CleanUpPath$'
  {
    Write-Host "/CleanUpSystemPath was used, removing all PowerShell Core path entries before installing"
    & "$toolsDir\Reset-PWSHSystemPath.ps1" -PathScope Machine, User -RemoveAllOccurances
    break
  }

'^(ADD_PATH)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(REGISTER_MANIFEST)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(ENABLE_PSREMOTING)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(ADD_FILE_CONTEXT_MENU_RUNPOWERSHELL)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(USE_MU)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(ENABLE_MU)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

default { Write-Error 'Parameter not recognized, halting...' -ErrorAction Stop } 
}})

if ($pp.Keys -notlike '*USE_MU*') { $packageArgs.silentArgs += ,"USE_MU=0" }
if ($pp.Keys -notlike '*ENABLE_MU*') { $packageArgs.silentArgs += ,"ENABLE_MU=0" }

Write-Warning "If you started this package under PowerShell core, replacing an in-use version may be unpredictable, require multiple attempts or produce errors."

Install-ChocolateyPackage @packageArgs

Write-Output "************************************************************************************"
Write-Output "*  INSTRUCTIONS: Your system default WINDOWS PowerShell version has not been changed."
Write-Output "*   PowerShell CORE $version, was installed to: `"$installfolder`""
If ($PreleasePackage) {
Write-Output "*   To start PowerShell Core PRERELEASE $version, at a prompt execute:"
Write-Output "*      `"$installfolder\pwsh.exe`""
Write-Output "*   IMPORTANT: Prereleases are not put on your path, nor made the default version of CORE."
}
else {
Write-Output "*   To start PowerShell Core $version, at a prompt or the start menu execute:"
Write-Output "*      `"pwsh.exe`""
Write-Output "*   Or start it from the desktop or start menu shortcut installed by this package."
Write-Output "*   This is your new default version of PowerShell CORE (pwsh.exe)."
}
Write-Output "************************************************************************************"

Write-Output "**************************************************************************************"
Write-Output "*  As of OpenSSH 0.0.22.0 Universal Installer, a script is distributed that allows   *"
Write-Output "*  setting the default shell for openssh. You could call it with code like this:     *"
Write-Output "*    If (Test-Path `"$env:programfiles\openssh-win64\Set-SSHDefaultShell.ps1`")         *"
Write-Output "*      {& `"$env:programfiles\openssh-win64\Set-SSHDefaultShell.ps1`" [PARAMETERS]}     *"
Write-Output "*  Learn more with this:                                                             *"
Write-Output "*    Get-Help `"$env:programfiles\openssh-win64\Set-SSHDefaultShell.ps1`"               *"
Write-Output "*  Or here:                                                                          *"
Write-Output "*    https://github.com/DarwinJS/ChocoPackages/blob/main/openssh/readme.md         *"
Write-Output "**************************************************************************************"
C:\ProgramData\chocolatey\lib\vcredist140\tools\chocolateyInstall.ps1
Set-StrictMode -Version 2
$ErrorActionPreference = 'Stop'

. (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Definition -Parent) -ChildPath 'data.ps1')
$packageName = $otherData.PackageName
$installerType = 'exe'
$silentArgs = '/quiet /norestart'
$validExitCodes = @(0, 1638, 3010)
$force = $Env:chocolateyPackageParameters -like '*Force*'

Write-Verbose 'Checking Service Pack requirements'
$os = Get-WmiObject -Class Win32_OperatingSystem
$version = [Version]$os.Version
if ($version -ge [Version]'6.1' -and $version -lt [Version]'6.2' -and $os.ServicePackMajorVersion -lt 1)
{
  # On Windows 7 / Server 2008 R2, Service Pack 1 is required.
  throw 'This package requires Service Pack 1 to be installed first. The "KB976932" package may be used to install it.'
}
elseif ($version -ge [Version]'6.0' -and $version -lt [Version]'6.1' -and $os.ServicePackMajorVersion -lt 2)
{
  # On Windows Vista / Server 2008, Service Pack 2 is required.
  throw 'This package requires Service Pack 2 to be installed first.'
}
elseif ($version -ge [Version]'5.2' -and $version -lt [Version]'6.0' -and $os.ServicePackMajorVersion -lt 2)
{
  # On Windows Server 2003 / XP x64, Service Pack 2 is required.
  throw 'This package requires Service Pack 2 to be installed first.'
}
elseif ($version -ge [Version]'5.1' -and $version -lt [Version]'5.2' -and $os.ServicePackMajorVersion -lt 3)
{
  # On Windows XP, Service Pack 3 is required.
  throw 'This package requires Service Pack 3 to be installed first.'
}

$runtimes = @{
  'x64' = @{ RegistryPresent = $false; RegistryVersion = $null; DllVersion = $null; InstallData = $installData64; Applicable = ((Get-OSArchitectureWidth) -eq 64) -and ($env:chocolateyForceX86 -ne 'true') }
  'x86' = @{ RegistryPresent = $false; RegistryVersion = $null; DllVersion = $null; InstallData = $installData32; Applicable = $true }
}

switch ([string](Get-OSArchitectureWidth))
{
  '32' { $registryRoots = @{ x86 = 'HKLM:\SOFTWARE'; x64 = $null } }
  '64' { $registryRoots = @{ x86 = 'HKLM:\SOFTWARE\WOW6432Node'; x64 = 'HKLM:\SOFTWARE' } }
  default { throw "Unsupported bitness: $_" }
}

Write-Verbose 'Analyzing servicing information in the registry'
foreach ($archAndRegRoot in $registryRoots.GetEnumerator())
{
  $arch = $archAndRegRoot.Key
  $regRoot = $archAndRegRoot.Value
  # https://docs.microsoft.com/en-us/cpp/ide/redistributing-visual-cpp-files
  $regData = Get-ItemProperty -Path "$regRoot\Microsoft\DevDiv\vc\Servicing\$($otherData.FamilyRegistryKey)\RuntimeMinimum" -Name 'Version' -ErrorAction SilentlyContinue
  if ($regData -ne $null)
  {
    $versionString = $regData.Version
    try
    {
      $parsedVersion = [version]$versionString
      Write-Verbose "Version of installed runtime for architecture $arch in the registry: $versionString"
      $normalizedVersion = [version]($parsedVersion.ToString(3)) # future-proofing in case Microsoft starts putting more than 3 parts here
      $runtimes[$arch].RegistryVersion = $normalizedVersion
    }
    catch
    {
      Write-Warning "The servicing information in the registry is in an unknown format. Please report this to package maintainers. Data from the registry: Version = [$versionString]"
    }
  }
}

$packageRuntimeVersion = $otherData.ThreePartVersion
Write-Verbose "Version number of runtime installed by this package: $packageRuntimeVersion"
foreach ($archAndRuntime in $runtimes.GetEnumerator())
{
  $arch = $archAndRuntime.Key
  $runtime = $archAndRuntime.Value

  $shouldInstall = $runtime.RegistryVersion -eq $null -or $runtime.RegistryVersion -lt $packageRuntimeVersion
  Write-Verbose "Runtime for architecture $arch applicable: $($runtime.Applicable); version in registry: [$($runtime.RegistryVersion)]; should install: $shouldInstall"
  if ($runtime.Applicable)
  {
    if (-not $shouldInstall)
    {
      if ($force)
      {
        Write-Warning "Forcing installation of runtime for architecture $arch version $packageRuntimeVersion even though this or later version appears present, because 'Force' was specified in package parameters."
      }
      else
      {
        if ($runtime.RegistryVersion -gt $packageRuntimeVersion)
        {
          Write-Warning "Skipping installation of runtime for architecture $arch version $packageRuntimeVersion because a newer version ($($runtime.RegistryVersion)) is already installed."
        }
        else
        {
          Write-Host "Runtime for architecture $arch version $packageRuntimeVersion is already installed."
        }

        continue
      }
    }

    Write-Verbose "Installing runtime for architecture $arch"
    $installData = $runtime.InstallData
    Set-StrictMode -Off
    Install-ChocolateyPackage -PackageName "${packageName}-$arch" `
                              -FileType $installerType `
                              -SilentArgs $silentArgs `
                              -ValidExitCodes $validExitCodes `
                              @installData
    Set-StrictMode -Version 2
  }
}
C:\Temp\ChocolateyCache\ChocolateyScratch\vcredist140\14.36.32532\tools\chocolateyInstall.ps1
Set-StrictMode -Version 2
$ErrorActionPreference = 'Stop'

. (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Definition -Parent) -ChildPath 'data.ps1')
$packageName = $otherData.PackageName
$installerType = 'exe'
$silentArgs = '/quiet /norestart'
$validExitCodes = @(0, 1638, 3010)
$force = $Env:chocolateyPackageParameters -like '*Force*'

Write-Verbose 'Checking Service Pack requirements'
$os = Get-WmiObject -Class Win32_OperatingSystem
$version = [Version]$os.Version
if ($version -ge [Version]'6.1' -and $version -lt [Version]'6.2' -and $os.ServicePackMajorVersion -lt 1)
{
  # On Windows 7 / Server 2008 R2, Service Pack 1 is required.
  throw 'This package requires Service Pack 1 to be installed first. The "KB976932" package may be used to install it.'
}
elseif ($version -ge [Version]'6.0' -and $version -lt [Version]'6.1' -and $os.ServicePackMajorVersion -lt 2)
{
  # On Windows Vista / Server 2008, Service Pack 2 is required.
  throw 'This package requires Service Pack 2 to be installed first.'
}
elseif ($version -ge [Version]'5.2' -and $version -lt [Version]'6.0' -and $os.ServicePackMajorVersion -lt 2)
{
  # On Windows Server 2003 / XP x64, Service Pack 2 is required.
  throw 'This package requires Service Pack 2 to be installed first.'
}
elseif ($version -ge [Version]'5.1' -and $version -lt [Version]'5.2' -and $os.ServicePackMajorVersion -lt 3)
{
  # On Windows XP, Service Pack 3 is required.
  throw 'This package requires Service Pack 3 to be installed first.'
}

$runtimes = @{
  'x64' = @{ RegistryPresent = $false; RegistryVersion = $null; DllVersion = $null; InstallData = $installData64; Applicable = ((Get-OSArchitectureWidth) -eq 64) -and ($env:chocolateyForceX86 -ne 'true') }
  'x86' = @{ RegistryPresent = $false; RegistryVersion = $null; DllVersion = $null; InstallData = $installData32; Applicable = $true }
}

switch ([string](Get-OSArchitectureWidth))
{
  '32' { $registryRoots = @{ x86 = 'HKLM:\SOFTWARE'; x64 = $null } }
  '64' { $registryRoots = @{ x86 = 'HKLM:\SOFTWARE\WOW6432Node'; x64 = 'HKLM:\SOFTWARE' } }
  default { throw "Unsupported bitness: $_" }
}

Write-Verbose 'Analyzing servicing information in the registry'
foreach ($archAndRegRoot in $registryRoots.GetEnumerator())
{
  $arch = $archAndRegRoot.Key
  $regRoot = $archAndRegRoot.Value
  # https://docs.microsoft.com/en-us/cpp/ide/redistributing-visual-cpp-files
  $regData = Get-ItemProperty -Path "$regRoot\Microsoft\DevDiv\vc\Servicing\$($otherData.FamilyRegistryKey)\RuntimeMinimum" -Name 'Version' -ErrorAction SilentlyContinue
  if ($regData -ne $null)
  {
    $versionString = $regData.Version
    try
    {
      $parsedVersion = [version]$versionString
      Write-Verbose "Version of installed runtime for architecture $arch in the registry: $versionString"
      $normalizedVersion = [version]($parsedVersion.ToString(3)) # future-proofing in case Microsoft starts putting more than 3 parts here
      $runtimes[$arch].RegistryVersion = $normalizedVersion
    }
    catch
    {
      Write-Warning "The servicing information in the registry is in an unknown format. Please report this to package maintainers. Data from the registry: Version = [$versionString]"
    }
  }
}

$packageRuntimeVersion = $otherData.ThreePartVersion
Write-Verbose "Version number of runtime installed by this package: $packageRuntimeVersion"
foreach ($archAndRuntime in $runtimes.GetEnumerator())
{
  $arch = $archAndRuntime.Key
  $runtime = $archAndRuntime.Value

  $shouldInstall = $runtime.RegistryVersion -eq $null -or $runtime.RegistryVersion -lt $packageRuntimeVersion
  Write-Verbose "Runtime for architecture $arch applicable: $($runtime.Applicable); version in registry: [$($runtime.RegistryVersion)]; should install: $shouldInstall"
  if ($runtime.Applicable)
  {
    if (-not $shouldInstall)
    {
      if ($force)
      {
        Write-Warning "Forcing installation of runtime for architecture $arch version $packageRuntimeVersion even though this or later version appears present, because 'Force' was specified in package parameters."
      }
      else
      {
        if ($runtime.RegistryVersion -gt $packageRuntimeVersion)
        {
          Write-Warning "Skipping installation of runtime for architecture $arch version $packageRuntimeVersion because a newer version ($($runtime.RegistryVersion)) is already installed."
        }
        else
        {
          Write-Host "Runtime for architecture $arch version $packageRuntimeVersion is already installed."
        }

        continue
      }
    }

    Write-Verbose "Installing runtime for architecture $arch"
    $installData = $runtime.InstallData
    Set-StrictMode -Off
    Install-ChocolateyPackage -PackageName "${packageName}-$arch" `
                              -FileType $installerType `
                              -SilentArgs $silentArgs `
                              -ValidExitCodes $validExitCodes `
                              @installData
    Set-StrictMode -Version 2
  }
}
C:\ProgramData\chocolatey\lib\vcredist2012\tools\chocolateyInstall.ps1
$packageName = 'vcredist2012'
$installerType = 'EXE'
$32BitUrl = 'https://download.microsoft.com/download/1/6/B/16B06F60-3B20-4FF2-B699-5E9B7962F9AE/VSU_4/vcredist_x86.exe'
$64BitUrl = 'https://download.microsoft.com/download/1/6/B/16B06F60-3B20-4FF2-B699-5E9B7962F9AE/VSU_4/vcredist_x64.exe'
$silentArgs = '/q /norestart'
$validExitCodes = @(0,3010)

#first install vcredist targetting actual CPU architecture
Install-ChocolateyPackage $packageName $installerType $silentArgs $32BitUrl $64BitUrl -validExitCodes $validExitCodes `
            -checksum B924AD8062EAF4E70437C8BE50FA612162795FF0839479546CE907FFA8D6E386 `
            -checksumType sha256 `
            -checksum64 681BE3E5BA9FD3DA02C09D7E565ADFA078640ED66A0D58583EFAD2C1E3CC4064 `
            -checksumType64 sha256            

$is64bit = Get-ProcessorBits 64;
if($is64bit) {
    #in case of x64 also install x86 vcredist
    Install-ChocolateyPackage $packageName $installerType $silentArgs $32BitUrl -validExitCodes $validExitCodes `
                -checksum B924AD8062EAF4E70437C8BE50FA612162795FF0839479546CE907FFA8D6E386 `
                -checksumType sha256
}
C:\Temp\ChocolateyCache\ChocolateyScratch\vcredist2012\11.0.61031.20230518\tools\chocolateyInstall.ps1
$packageName = 'vcredist2012'
$installerType = 'EXE'
$32BitUrl = 'https://download.microsoft.com/download/1/6/B/16B06F60-3B20-4FF2-B699-5E9B7962F9AE/VSU_4/vcredist_x86.exe'
$64BitUrl = 'https://download.microsoft.com/download/1/6/B/16B06F60-3B20-4FF2-B699-5E9B7962F9AE/VSU_4/vcredist_x64.exe'
$silentArgs = '/q /norestart'
$validExitCodes = @(0,3010)

#first install vcredist targetting actual CPU architecture
Install-ChocolateyPackage $packageName $installerType $silentArgs $32BitUrl $64BitUrl -validExitCodes $validExitCodes `
            -checksum B924AD8062EAF4E70437C8BE50FA612162795FF0839479546CE907FFA8D6E386 `
            -checksumType sha256 `
            -checksum64 681BE3E5BA9FD3DA02C09D7E565ADFA078640ED66A0D58583EFAD2C1E3CC4064 `
            -checksumType64 sha256            

$is64bit = Get-ProcessorBits 64;
if($is64bit) {
    #in case of x64 also install x86 vcredist
    Install-ChocolateyPackage $packageName $installerType $silentArgs $32BitUrl -validExitCodes $validExitCodes `
                -checksum B924AD8062EAF4E70437C8BE50FA612162795FF0839479546CE907FFA8D6E386 `
                -checksumType sha256
}
C:\ProgramData\chocolatey\lib\ditto\tools\chocolateyInstall.ps1
$toolsDir   = Split-Path -parent $MyInvocation.MyCommand.Definition
$FileLocations = Get-ChildItem -Path $toolsDir -Filter '*.exe' | select -ExpandProperty FullName
 
$packageArgs = @{
  packageName  = $env:ChocolateyPackageName
  fileType     = 'EXE'
  File         = $FileLocations | Where-Object {$_ -notmatch '64bit'}
  File64       = $FileLocations | Where-Object {$_ -match '64bit'}
  softwareName = $env:ChocolateyPackageName.split('.')[0]
  silentArgs   = '/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /CLOSEAPPLICATIONS /SP-'
  validExitCodes= @(0)
}

Install-ChocolateyInstallPackage @packageArgs
 
foreach ($exe in $FileLocations) {
   New-Item "$exe.ignore" -Type file -Force | Out-Null
}
C:\ProgramData\chocolatey\lib\rabbitmq\tools\chocolateyInstall.ps1
if(!$PSScriptRoot){ $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent }
. "$PSScriptRoot\ChocolateyHelpers.ps1"

$arguments = Get-ChocolateyPackageParameters ${Env:ChocolateyPackageParameters}

if ($arguments['RABBITMQBASE']) {
  [System.Environment]::SetEnvironmentVariable("RABBITMQ_BASE", $arguments['RABBITMQBASE'], "Machine" )
  ${Env:RABBITMQ_BASE} = $arguments['RABBITMQBASE']
}

$env:HOMEDRIVE=C:
Install-ChocolateyPackage 'rabbitmq' 'EXE' '/S' 'https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.11.17/rabbitmq-server-3.11.17.exe'

$rabbitPath = Get-RabbitMQPath
if (-not $arguments.ContainsKey('NOMANAGEMENT')) {
  Start-Process "$rabbitPath\sbin\rabbitmq-plugins.bat" 'enable rabbitmq_management' -NoNewWindow -Wait
}
C:\Temp\ChocolateyCache\ChocolateyScratch\rabbitmq\3.11.17\tools\chocolateyInstall.ps1
if(!$PSScriptRoot){ $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent }
. "$PSScriptRoot\ChocolateyHelpers.ps1"

$arguments = Get-ChocolateyPackageParameters ${Env:ChocolateyPackageParameters}

if ($arguments['RABBITMQBASE']) {
  [System.Environment]::SetEnvironmentVariable("RABBITMQ_BASE", $arguments['RABBITMQBASE'], "Machine" )
  ${Env:RABBITMQ_BASE} = $arguments['RABBITMQBASE']
}

$env:HOMEDRIVE=C:
Install-ChocolateyPackage 'rabbitmq' 'EXE' '/S' 'https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.11.17/rabbitmq-server-3.11.17.exe'

$rabbitPath = Get-RabbitMQPath
if (-not $arguments.ContainsKey('NOMANAGEMENT')) {
  Start-Process "$rabbitPath\sbin\rabbitmq-plugins.bat" 'enable rabbitmq_management' -NoNewWindow -Wait
}
C:\ProgramData\chocolatey\lib\erlang\tools\chocolateyInstall.ps1
<#
.SYNOPSIS
An install script for installing Erlang silently on the machine via ChocolateyNuGet

.NOTES
Author: Luke Bakken - luke@bakken.io
Version: 1.0.0
#>
$ErrorActionPreference = 'Stop'

New-Variable -Name package -Value 'erlang' -Option Constant
New-Variable -Name otp_version -Value '25.3.2.1' -Option Constant
New-Variable -Name erts_version -Value '13.2.2.1' -Option Constant

$params = @{
  PackageName = $package
  FileType = 'exe'
  SilentArgs = '/S'
  Url = "https://github.com/erlang/otp/releases/download/OTP-$otp_version/otp_win32_$otp_version.exe"
  CheckSum = '63c1b4225211e1e9255acf27e36f6d2b47c5635890e4f57ebfe9f5db6feac85a'
  CheckSumType = 'sha256'
  Url64 = "https://github.com/erlang/otp/releases/download/OTP-$otp_version/otp_win64_$otp_version.exe"
  CheckSum64 = '9e31ae1c001ab559b3c915ec1e89cebb5996f4159d15c6f63ab6bdd0b6c3acde'
  CheckSumType64 = 'sha256'
  validExitCodes = @(0)
}

Install-ChocolateyPackage @params

New-Variable -Name erlangProgramFilesPath -Option Constant `
    -Value ((Get-ItemProperty -Path HKLM:\SOFTWARE\WOW6432Node\Ericsson\Erlang\$erts_version).'(default)')

New-Variable -Name erlangErtsBinPath -Option Constant `
    -Value (Join-Path -Path $erlangProgramFilesPath -ChildPath "erts-$erts_version" | Join-Path -ChildPath 'bin')

Install-BinFile -Name 'ct_run'   -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'ct_run.exe')
Install-BinFile -Name 'erl'      -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'erl.exe')
Install-BinFile -Name 'werl'     -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'werl.exe')
Install-BinFile -Name 'erlc'     -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'erlc.exe')
Install-BinFile -Name 'escript'  -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'escript.exe')
Install-BinFile -Name 'dialyzer' -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'dialyzer.exe')
Install-BinFile -Name 'typer'    -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'typer.exe')

C:\Temp\ChocolateyCache\ChocolateyScratch\erlang\25.3.2.1\tools\chocolateyInstall.ps1
<#
.SYNOPSIS
An install script for installing Erlang silently on the machine via ChocolateyNuGet

.NOTES
Author: Luke Bakken - luke@bakken.io
Version: 1.0.0
#>
$ErrorActionPreference = 'Stop'

New-Variable -Name package -Value 'erlang' -Option Constant
New-Variable -Name otp_version -Value '25.3.2.1' -Option Constant
New-Variable -Name erts_version -Value '13.2.2.1' -Option Constant

$params = @{
  PackageName = $package
  FileType = 'exe'
  SilentArgs = '/S'
  Url = "https://github.com/erlang/otp/releases/download/OTP-$otp_version/otp_win32_$otp_version.exe"
  CheckSum = '63c1b4225211e1e9255acf27e36f6d2b47c5635890e4f57ebfe9f5db6feac85a'
  CheckSumType = 'sha256'
  Url64 = "https://github.com/erlang/otp/releases/download/OTP-$otp_version/otp_win64_$otp_version.exe"
  CheckSum64 = '9e31ae1c001ab559b3c915ec1e89cebb5996f4159d15c6f63ab6bdd0b6c3acde'
  CheckSumType64 = 'sha256'
  validExitCodes = @(0)
}

Install-ChocolateyPackage @params

New-Variable -Name erlangProgramFilesPath -Option Constant `
    -Value ((Get-ItemProperty -Path HKLM:\SOFTWARE\WOW6432Node\Ericsson\Erlang\$erts_version).'(default)')

New-Variable -Name erlangErtsBinPath -Option Constant `
    -Value (Join-Path -Path $erlangProgramFilesPath -ChildPath "erts-$erts_version" | Join-Path -ChildPath 'bin')

Install-BinFile -Name 'ct_run'   -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'ct_run.exe')
Install-BinFile -Name 'erl'      -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'erl.exe')
Install-BinFile -Name 'werl'     -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'werl.exe')
Install-BinFile -Name 'erlc'     -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'erlc.exe')
Install-BinFile -Name 'escript'  -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'escript.exe')
Install-BinFile -Name 'dialyzer' -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'dialyzer.exe')
Install-BinFile -Name 'typer'    -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'typer.exe')

C:\Temp\ChocolateyCache\ChocolateyScratch\erlang\26.0.0\tools\chocolateyInstall.ps1
<#
.SYNOPSIS
An install script for installing Erlang silently on the machine via ChocolateyNuGet

.NOTES
Author: Luke Bakken - luke@bakken.io
Version: 1.0.0
#>
$ErrorActionPreference = 'Stop'

New-Variable -Name package -Value 'erlang' -Option Constant
New-Variable -Name otp_version -Value '26.0' -Option Constant
New-Variable -Name erts_version -Value '14.0' -Option Constant

$params = @{
  PackageName = $package
  FileType = 'exe'
  SilentArgs = '/S'
  Url = "https://github.com/erlang/otp/releases/download/OTP-$otp_version/otp_win32_$otp_version.exe"
  CheckSum = '9cf5d505caafe8082f5963589fda652343430e08a4493f9f07b773185e0253f1'
  CheckSumType = 'sha256'
  Url64 = "https://github.com/erlang/otp/releases/download/OTP-$otp_version/otp_win64_$otp_version.exe"
  CheckSum64 = 'fc6c7854917389b35bd2db53877b06097baadfb035a0bcd81bc3618c88318ab0'
  CheckSumType64 = 'sha256'
  validExitCodes = @(0)
}

Install-ChocolateyPackage @params

New-Variable -Name erlangProgramFilesPath -Option Constant `
    -Value ((Get-ItemProperty -Path HKLM:\SOFTWARE\WOW6432Node\Ericsson\Erlang\$erts_version).'(default)')

New-Variable -Name erlangErtsBinPath -Option Constant `
    -Value (Join-Path -Path $erlangProgramFilesPath -ChildPath "erts-$erts_version" | Join-Path -ChildPath 'bin')

Install-BinFile -Name 'ct_run'   -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'ct_run.exe')
Install-BinFile -Name 'erl'      -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'erl.exe')
Install-BinFile -Name 'werl'     -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'werl.exe')
Install-BinFile -Name 'erlc'     -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'erlc.exe')
Install-BinFile -Name 'escript'  -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'escript.exe')
Install-BinFile -Name 'dialyzer' -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'dialyzer.exe')
Install-BinFile -Name 'typer'    -Path (Join-Path -Path $erlangErtsBinPath -ChildPath 'typer.exe')

C:\ProgramData\chocolatey\lib\sql-server-management-studio\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop';

$release = '19.1'
$fullUrl = 'https://download.microsoft.com/download/a/c/a/aca4e29f-6925-4d50-a06b-5576c6ea629f/SSMS-Setup-ENU.exe'
$fullChecksum = 'FDC2CE3EA167882874B26D06796FE2DC21DE03394E6D3F72ACD28F0836C9FF9E'

$packageArgs = @{
  packageName   = $env:ChocolateyPackageName
  fileType      = 'EXE'
  silentArgs    = "/quiet /install /norestart /log `"$env:TEMP\chocolatey\$($env:ChocolateyPackageName)\$($env:ChocolateyPackageVersion)\SSMS.MsiInstall.log`""
  validExitCodes= @(0, 3010, 1641)
  softwareName  = "SQL Server Management Studio - $release"
}

$pp = Get-PackageParameters

if ($pp['SSMSExePath'])
{
    $packageArgs.file = $pp['SSMSExePath']

    Install-ChocolateyInstallPackage @packageArgs
}
else
{
    $packageArgs.url           = $fullUrl
    $packageArgs.checksum      = $fullChecksum
    $packageArgs.checksumType  = 'SHA256'

    Install-ChocolateyPackage @packageArgs
}
C:\Temp\ChocolateyCache\ChocolateyScratch\sql-server-management-studio\19.1.56\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop';

$release = '19.1'
$fullUrl = 'https://download.microsoft.com/download/a/c/a/aca4e29f-6925-4d50-a06b-5576c6ea629f/SSMS-Setup-ENU.exe'
$fullChecksum = 'FDC2CE3EA167882874B26D06796FE2DC21DE03394E6D3F72ACD28F0836C9FF9E'

$packageArgs = @{
  packageName   = $env:ChocolateyPackageName
  fileType      = 'EXE'
  silentArgs    = "/quiet /install /norestart /log `"$env:TEMP\chocolatey\$($env:ChocolateyPackageName)\$($env:ChocolateyPackageVersion)\SSMS.MsiInstall.log`""
  validExitCodes= @(0, 3010, 1641)
  softwareName  = "SQL Server Management Studio - $release"
}

$pp = Get-PackageParameters

if ($pp['SSMSExePath'])
{
    $packageArgs.file = $pp['SSMSExePath']

    Install-ChocolateyInstallPackage @packageArgs
}
else
{
    $packageArgs.url           = $fullUrl
    $packageArgs.checksum      = $fullChecksum
    $packageArgs.checksumType  = 'SHA256'

    Install-ChocolateyPackage @packageArgs
}
C:\ProgramData\chocolatey\lib\vault\tools\chocolateyInstall.ps1
$packageArgs = @{
  PackageName         = "vault"
  Url                 = "https://releases.hashicorp.com/vault/$($env:ChocolateyPackageVersion)/vault_$($env:ChocolateyPackageVersion)_windows_386.zip"
  UnzipLocation       = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
  Url64               = "https://releases.hashicorp.com/vault/$($env:ChocolateyPackageVersion)/vault_$($env:ChocolateyPackageVersion)_windows_amd64.zip"
  Checksum            = 'fbc976d2825d5de4250c920c4a4e70d4457a0647093f6f2e90ae56e2360b46d9'
  ChecksumType        = 'sha256'
  Checksum64          = '96dee4c0363a38c9e6571369567dd8ab88753dda433599642ef635394b85c8ed'
  version             = $env:ChocolateyPackageVersion
}

Install-ChocolateyZipPackage @packageArgs
C:\Temp\ChocolateyCache\ChocolateyScratch\vault\1.14.0\tools\chocolateyInstall.ps1
$packageArgs = @{
  PackageName         = "vault"
  Url                 = "https://releases.hashicorp.com/vault/$($env:ChocolateyPackageVersion)/vault_$($env:ChocolateyPackageVersion)_windows_386.zip"
  UnzipLocation       = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
  Url64               = "https://releases.hashicorp.com/vault/$($env:ChocolateyPackageVersion)/vault_$($env:ChocolateyPackageVersion)_windows_amd64.zip"
  Checksum            = 'fbc976d2825d5de4250c920c4a4e70d4457a0647093f6f2e90ae56e2360b46d9'
  ChecksumType        = 'sha256'
  Checksum64          = '96dee4c0363a38c9e6571369567dd8ab88753dda433599642ef635394b85c8ed'
  version             = $env:ChocolateyPackageVersion
}

Install-ChocolateyZipPackage @packageArgs
C:\ProgramData\chocolatey\lib\winscp.install\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName    = 'winscp'
  fileType       = 'exe'
  file           = Get-Item $toolsPath\*.exe
  file64         = Get-Item $toolsPath\*.exe
  silentArgs     = '/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-'
}
Install-ChocolateyInstallPackage @packageArgs
Get-ChildItem $toolsPath\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" '' }}

$packageName = $packageArgs.packageName
$installLocation = Get-AppInstallLocation "$packageName*"
if (!$installLocation)  { Write-Warning "Can't find $packageName install location"; return }
Write-Host "$packageName installed to '$installLocation'"

Install-BinFile $packageName "$installLocation\$packageName.exe"
Install-BinFile "${packageName}.com" "${installLocation}\${packageName}.com"

Register-Application "$installLocation\$packageName.exe"
Write-Host "$packageName registered as $packageName"
C:\Temp\ChocolateyCache\ChocolateyScratch\winscp.install\6.1.1\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName    = 'winscp'
  fileType       = 'exe'
  file           = Get-Item $toolsPath\*.exe
  file64         = Get-Item $toolsPath\*.exe
  silentArgs     = '/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-'
}
Install-ChocolateyInstallPackage @packageArgs
Get-ChildItem $toolsPath\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" '' }}

$packageName = $packageArgs.packageName
$installLocation = Get-AppInstallLocation "$packageName*"
if (!$installLocation)  { Write-Warning "Can't find $packageName install location"; return }
Write-Host "$packageName installed to '$installLocation'"

Install-BinFile $packageName "$installLocation\$packageName.exe"
Install-BinFile "${packageName}.com" "${installLocation}\${packageName}.com"

Register-Application "$installLocation\$packageName.exe"
Write-Host "$packageName registered as $packageName"
C:\ProgramData\chocolatey\lib\sysinternals\tools\chocolateyInstall.ps1
$toolsPath = Split-Path $MyInvocation.MyCommand.Definition
. $toolsPath\helpers.ps1

$pp = Get-PackageParameters
$installDir = $toolsPath
if ($pp.InstallDir -or $pp.InstallationPath ) { $InstallDir = $pp.InstallDir + $pp.InstallationPath }
Write-Host "Sysinternals Suite is going to be installed in '$installDir'"

$packageArgs = @{
  packageName    = 'sysinternals'
  url            = 'https://download.sysinternals.com/files/SysinternalsSuite.zip'
  checksum       = '6ceac973bed6154015e1f82c573d464485461a433bd7849fe25d3312aae96b04'
  checksumType   = 'sha256'
  unzipLocation  = $installDir
}
Install-ChocolateyZipPackage @packageArgs
Accept-Eula
if ($installDir -ne $toolsPath) { Install-ChocolateyPath $installDir }
if (Is-NanoServer) {
  $packageArgs.url = 'https://download.sysinternals.com/files/SysinternalsSuite-Nano.zip'
  $packageArgs.checksum = '3c09da185f84c958e21791e5fb14dfb73079b7e908b1471cc697f50dd708c69e'
 }

$old_path = 'c:\sysinternals'
if ((Test-Path $old_path) -and ($installDir -ne $old_path)) {
    Write-Warning "Clean up older versions of this install at c:\sysinternals"
}
C:\Temp\ChocolateyCache\ChocolateyScratch\sysinternals\2023.6.27\tools\chocolateyInstall.ps1
$toolsPath = Split-Path $MyInvocation.MyCommand.Definition
. $toolsPath\helpers.ps1

$pp = Get-PackageParameters
$installDir = $toolsPath
if ($pp.InstallDir -or $pp.InstallationPath ) { $InstallDir = $pp.InstallDir + $pp.InstallationPath }
Write-Host "Sysinternals Suite is going to be installed in '$installDir'"

$packageArgs = @{
  packageName    = 'sysinternals'
  url            = 'https://download.sysinternals.com/files/SysinternalsSuite.zip'
  checksum       = '6ceac973bed6154015e1f82c573d464485461a433bd7849fe25d3312aae96b04'
  checksumType   = 'sha256'
  unzipLocation  = $installDir
}
Install-ChocolateyZipPackage @packageArgs
Accept-Eula
if ($installDir -ne $toolsPath) { Install-ChocolateyPath $installDir }
if (Is-NanoServer) {
  $packageArgs.url = 'https://download.sysinternals.com/files/SysinternalsSuite-Nano.zip'
  $packageArgs.checksum = '3c09da185f84c958e21791e5fb14dfb73079b7e908b1471cc697f50dd708c69e'
 }

$old_path = 'c:\sysinternals'
if ((Test-Path $old_path) -and ($installDir -ne $old_path)) {
    Write-Warning "Clean up older versions of this install at c:\sysinternals"
}
C:\ProgramData\chocolatey\lib\powertoys\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop';

$toolsDir       = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$version        = "0.71.0"
$url64 = 'https://github.com/microsoft/PowerToys/releases/download/v0.71.0/PowerToysSetup-0.71.0-x64.exe'
$checksum64 = '44f092dfac002536a27abc701750d8c78ff30f8879768990bc4a0afd0d5119f1'

$WindowsVersion=[Environment]::OSVersion.Version
if ($WindowsVersion.Major -ne "10") {
  throw "This package requires Windows 10."
}

$IsCorrectBuild=[Environment]::OSVersion.Version.Build
if ($IsCorrectBuild -lt "17134") {
  throw "This package requires at least Windows 10 version 1803/OS build 17134.x."
}

$packageArgs = @{
  packageName   = $env:ChocolateyPackageName
  softwareName  = 'PowerToys*'
  url64         = $url64
  checksum64    = $checksum64
  checksumType64= 'sha256'
  fileType      = 'exe'
  silentArgs    = "-silent"
  validExitCodes= @(0,1641,3010)
}

Install-ChocolateyPackage @packageArgs

Get-ChildItem $toolsDir\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" } }
C:\Temp\ChocolateyCache\ChocolateyScratch\powertoys\0.71.0\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop';

$toolsDir       = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$version        = "0.71.0"
$url64 = 'https://github.com/microsoft/PowerToys/releases/download/v0.71.0/PowerToysSetup-0.71.0-x64.exe'
$checksum64 = '44f092dfac002536a27abc701750d8c78ff30f8879768990bc4a0afd0d5119f1'

$WindowsVersion=[Environment]::OSVersion.Version
if ($WindowsVersion.Major -ne "10") {
  throw "This package requires Windows 10."
}

$IsCorrectBuild=[Environment]::OSVersion.Version.Build
if ($IsCorrectBuild -lt "17134") {
  throw "This package requires at least Windows 10 version 1803/OS build 17134.x."
}

$packageArgs = @{
  packageName   = $env:ChocolateyPackageName
  softwareName  = 'PowerToys*'
  url64         = $url64
  checksum64    = $checksum64
  checksumType64= 'sha256'
  fileType      = 'exe'
  silentArgs    = "-silent"
  validExitCodes= @(0,1641,3010)
}

Install-ChocolateyPackage @packageArgs

Get-ChildItem $toolsDir\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" } }
C:\ProgramData\chocolatey\lib\psframework\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir   = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$moduleName = 'psframework'  # this may be different from the package name and different case

if ($PSVersionTable.PSVersion.Major -lt 3) {
    throw "$moduleName) module requires a minimum of PowerShell v3."
}

# module may already be installed outside of Chocolatey
Remove-Module -Name $moduleName -Force -ErrorAction SilentlyContinue

$sourcePath = Join-Path -Path $toolsDir -ChildPath "$modulename.zip"
$destPath   = Join-Path -Path $env:ProgramFiles -ChildPath "WindowsPowerShell\Modules\$moduleName"

if ($PSVersionTable.PSVersion.Major -ge 5)
{
    $destPath     = Join-Path -Path $destPath -ChildPath $env:ChocolateyPackageVersion
}

Write-Verbose "Creating destination directory '$destPath' for module."
New-Item -Path $destPath -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null

Write-Verbose "Extracting '$moduleName' files from '$sourcePath' to '$destPath'."
Get-ChocolateyUnzip -FileFullPath $sourcePath -Destination $destPath

if ($PSVersionTable.PSVersion.Major -lt 4)
{
    $modulePaths = [Environment]::GetEnvironmentVariable('PSModulePath', 'Machine') -split ';'
    if ($modulePaths -notcontains $destPath)
    {
        Write-Verbose "Adding '$destPath' to PSModulePath."
        $newModulePath = @($destPath, $modulePaths) -join ';'

        [Environment]::SetEnvironmentVariable('PSModulePath', $newModulePath, 'Machine')
        $env:PSModulePath = $newModulePath
    }
}
C:\Temp\ChocolateyCache\ChocolateyScratch\psframework\1.8.291\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir   = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$moduleName = 'psframework'  # this may be different from the package name and different case

if ($PSVersionTable.PSVersion.Major -lt 3) {
    throw "$moduleName) module requires a minimum of PowerShell v3."
}

# module may already be installed outside of Chocolatey
Remove-Module -Name $moduleName -Force -ErrorAction SilentlyContinue

$sourcePath = Join-Path -Path $toolsDir -ChildPath "$modulename.zip"
$destPath   = Join-Path -Path $env:ProgramFiles -ChildPath "WindowsPowerShell\Modules\$moduleName"

if ($PSVersionTable.PSVersion.Major -ge 5)
{
    $destPath     = Join-Path -Path $destPath -ChildPath $env:ChocolateyPackageVersion
}

Write-Verbose "Creating destination directory '$destPath' for module."
New-Item -Path $destPath -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null

Write-Verbose "Extracting '$moduleName' files from '$sourcePath' to '$destPath'."
Get-ChocolateyUnzip -FileFullPath $sourcePath -Destination $destPath

if ($PSVersionTable.PSVersion.Major -lt 4)
{
    $modulePaths = [Environment]::GetEnvironmentVariable('PSModulePath', 'Machine') -split ';'
    if ($modulePaths -notcontains $destPath)
    {
        Write-Verbose "Adding '$destPath' to PSModulePath."
        $newModulePath = @($destPath, $modulePaths) -join ';'

        [Environment]::SetEnvironmentVariable('PSModulePath', $newModulePath, 'Machine')
        $env:PSModulePath = $newModulePath
    }
}
C:\ProgramData\chocolatey\lib\wireshark\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop';

$toolsDir       = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"

$packageArgs = @{
  packageName    = $env:ChocolateyPackageName
  fileType       = 'exe'
  file64        = "$toolsDir\Wireshark-win64-4.0.7.exe"
  softwareName  = 'Wireshark*'
  silentArgs     = '/S /quicklaunchicon=no'
  validExitCodes = @(0)
}

Install-ChocolateyInstallPackage @packageArgs

Get-ChildItem $toolsDir\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" } }
C:\Temp\ChocolateyCache\ChocolateyScratch\wireshark\4.0.7\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop';

$toolsDir       = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"

$packageArgs = @{
  packageName    = $env:ChocolateyPackageName
  fileType       = 'exe'
  file64        = "$toolsDir\Wireshark-win64-4.0.7.exe"
  softwareName  = 'Wireshark*'
  silentArgs     = '/S /quicklaunchicon=no'
  validExitCodes = @(0)
}

Install-ChocolateyInstallPackage @packageArgs

Get-ChildItem $toolsDir\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" } }
C:\ProgramData\chocolatey\lib\vscode.install\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path $MyInvocation.MyCommand.Definition
. $toolsPath\helpers.ps1

$softwareName = 'Microsoft Visual Studio Code'
$version = '1.80.1'
if ($version -eq (Get-UninstallRegistryKey "$softwareName").DisplayVersion) {
  Write-Host "VS Code $version is already installed."
  return
}

$pp = Get-PackageParameters
Close-VSCode

$packageArgs = @{
  packageName    = 'vscode.install'
  fileType       = 'exe'
  url            = 'https://az764295.vo.msecnd.net/stable/74f6148eb9ea00507ec113ec51c489d6ffb4b771/VSCodeSetup-ia32-1.80.1.exe'
  url64bit       = 'https://az764295.vo.msecnd.net/stable/74f6148eb9ea00507ec113ec51c489d6ffb4b771/VSCodeSetup-x64-1.80.1.exe'

  softwareName   = "$softwareName"

  checksum       = 'bc4e3ffa69e4137ddd6e945f7849a9a5e977f20402f4cc23ea6a324b3cf7b27f'
  checksumType   = 'sha256'
  checksum64     = '1b541228f6e2158d32c3afcfb9e42e596abdf3e5eea4647e0b89ef065311bcc5'
  checksumType64 = 'sha256'

  silentArgs     = '/verysilent /suppressmsgboxes /mergetasks="{0}" /log="{1}\install.log"' -f (Get-MergeTasks), (Get-PackageCacheLocation)
  validExitCodes = @(0, 3010, 1641)
}

Install-ChocolateyPackage @packageArgs
C:\Temp\ChocolateyCache\ChocolateyScratch\vscode.install\1.80.1\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path $MyInvocation.MyCommand.Definition
. $toolsPath\helpers.ps1

$softwareName = 'Microsoft Visual Studio Code'
$version = '1.80.1'
if ($version -eq (Get-UninstallRegistryKey "$softwareName").DisplayVersion) {
  Write-Host "VS Code $version is already installed."
  return
}

$pp = Get-PackageParameters
Close-VSCode

$packageArgs = @{
  packageName    = 'vscode.install'
  fileType       = 'exe'
  url            = 'https://az764295.vo.msecnd.net/stable/74f6148eb9ea00507ec113ec51c489d6ffb4b771/VSCodeSetup-ia32-1.80.1.exe'
  url64bit       = 'https://az764295.vo.msecnd.net/stable/74f6148eb9ea00507ec113ec51c489d6ffb4b771/VSCodeSetup-x64-1.80.1.exe'

  softwareName   = "$softwareName"

  checksum       = 'bc4e3ffa69e4137ddd6e945f7849a9a5e977f20402f4cc23ea6a324b3cf7b27f'
  checksumType   = 'sha256'
  checksum64     = '1b541228f6e2158d32c3afcfb9e42e596abdf3e5eea4647e0b89ef065311bcc5'
  checksumType64 = 'sha256'

  silentArgs     = '/verysilent /suppressmsgboxes /mergetasks="{0}" /log="{1}\install.log"' -f (Get-MergeTasks), (Get-PackageCacheLocation)
  validExitCodes = @(0, 3010, 1641)
}

Install-ChocolateyPackage @packageArgs
C:\ProgramData\chocolatey\lib\7zip.install\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$filePath = if ((Get-OSArchitectureWidth 64) -and $env:chocolateyForceX86 -ne $true) {
       Write-Host "Installing 64 bit version" ; Get-Item $toolsDir\*_x64.exe }
else { Write-Host "Installing 32 bit version" ; Get-Item $toolsDir\*_x32.exe }

$packageArgs = @{
  packageName    = '7zip.install'
  fileType       = 'exe'
  softwareName   = '7-zip*'
  file           = $filePath
  silentArgs     = '/S'
  validExitCodes = @(0)
}
Install-ChocolateyInstallPackage @packageArgs
Remove-Item $toolsDir\*.exe -ea 0 -force

$installLocation = Get-AppInstallLocation $packageArgs.softwareName
if (!$installLocation)  { Write-Warning "Can't find 7zip install location"; return }
Write-Host "7zip installed to '$installLocation'"

Install-BinFile '7z' $installLocation\7z.exe
C:\ProgramData\chocolatey\lib\audacity\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir = Split-Path $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName    = 'audacity'
  fileType       = 'exe'
  file           = "$toolsDir\audacity-win-3.3.3-x32.exe"
  file64         = "$toolsDir\audacity-win-3.3.3-x64.exe"
  silentArgs     = '/VERYSILENT'
  validExitCodes = @(0, 1223)
}
Install-ChocolateyInstallPackage @packageArgs
Get-ChildItem "$toolsDir\*.$($packageArgs.fileType)" | ForEach-Object {
  Remove-Item $_ -ea 0
  if (Test-Path $_) {
    Set-Content "$_.ignore"
  }
}

$packageName = $packageArgs.packageName
$installLocation = Get-AppInstallLocation $packageName
if ($installLocation) {
  Write-Host "$packageName installed to '$installLocation'"
  Register-Application "$installLocation\$packageName.exe"
  Write-Host "$packageName registered as $packageName"
}
else { Write-Warning "Can't find $PackageName install location" }
C:\ProgramData\chocolatey\lib\autohotkey.install\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir = Split-Path $MyInvocation.MyCommand.Definition

$pp = Get-PackageParameters
if (!$pp.DefaultVer){
  $pp.DefaultVer = if ((Get-OSArchitectureWidth 64) -and ($Env:chocolateyForceX86 -ne 'true')) { 'U64' } else { 'U32' }
}

$packageArgs = @{
  packageName    = 'autohotkey.install'
  fileType       = 'exe'
  file           = Get-Item "$toolsDir\*.exe"
  silentArgs     = "/S /$($pp.DefaultVer)"
  softwareName   = 'AutoHotkey*'
  validExitCodes = @(0, 1223)
}
Install-ChocolateyInstallPackage @packageArgs
Remove-Item $toolsDir\*.exe

$installLocation = Get-AppInstallLocation $packageArgs.softwareName
$packageName = $packageArgs.softwareName
if ($installLocation)  {
    $installName = 'AutoHotkey'
    Write-Host "$packageName installed to '$installLocation'"
    Register-Application "$installLocation\$installName.exe"
    Write-Host "$packageName registered as $installName"
}
else { Write-Warning "Can't find $packageName install location" }
C:\ProgramData\chocolatey\lib\autohotkey\tools\chocolateyInstall.ps1
#Install-VirtualPackage 'autohotkey.portable' 'autohotkey.install'
C:\ProgramData\chocolatey\lib\autoruns\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
$packageName = $env:ChocolateyPackageName
$url = 'https://download.sysinternals.com/files/Autoruns.zip'
$checksum = '23b08e401217555a26e62577e90cef2bf6e53d9fee4e09cd38bd929189f61bfe'
$checksumType = 'sha256'
$url64 = "$url"
$checksum64 = "$checksum"
$checksumType64 = "checksumType"
$fileName = "Autoruns.exe"
$linkName = "Autoruns.lnk"
$toolsDir = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
Install-ChocolateyZipPackage -PackageName "$packageName" `
                             -Url "$url" `
                             -UnzipLocation "$toolsDir" `
                             -Url64bit "$url64" `
                             -Checksum "$checksum" `
                             -ChecksumType "$checksumType" `
                             -Checksum64 "$checksum64" `
                             -ChecksumType64 "$checksumType64"
$programs = "$env:ProgramData\Microsoft\Windows\Start Menu\Programs\"
$shortcutFilePath = Join-Path $programs $linkName
$targetPath = Join-Path $toolsDir $fileName
Install-ChocolateyShortcut -shortcutFilePath $shortcutFilePath -targetPath $targetPath
Write-Verbose "Accepting license..."
$regRoot = 'HKCU:\Software\Sysinternals'
$regPkg = 'AutoRuns'
$regPath = Join-Path $regRoot $regPkg
if (!(Test-Path $regRoot)) {New-Item -Path "$regRoot"}
if (!(Test-Path $regPath)) {New-Item -Path "$regRoot" -Name "$regPkg"}
Set-ItemProperty -Path "$regPath" -Name EulaAccepted -Value 1
if ((Get-ItemProperty -Path "$regPath").EulaAccepted -ne 1) {
  throw "Failed setting registry value."
}
C:\ProgramData\chocolatey\lib\beyondcompare\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$urlBase = "https://www.scootersoftware.com"

$pp = Get-PackageParameters

if ($pp["LCID"]) {
    $LCID = $pp["LCID"]
} else {
    $LCID = (Get-UICulture).LCID
}

$german = @(3079,1031,5127,4103,2055)
$french = @(2060,11276,3084,9228,12300,1036,5132,13324,6156,14348,10252,4108,7180)
$japanese = @(17, 1041)
$chinese = @(2052)
$version = '4.4.6.27483'

$packageArgs = @{
  packageName   = 'beyondcompare'
  fileType      = 'exe'
  url           = $url
  silentArgs = '/SP- /VERYSILENT /NORESTART'

  checksum      = ''
  checksumType  = 'sha256'
}

$checksumde = 'dc8d5903fb5304c7c442864a01c4750dd58891e6dc385929dc274ebdefd1a1cc'
$checksumfr = 'afa4400d752df643ac0472c52c3eb2a1673956a2d94c2bb8952b2ec483804d41'
$checksumjp = '80fbd10c66f32b34490b32ecb0adbf3288cf9c84308391096011f6e24bbc164c'
$checksumzh = '1eecfdf7e104d4a5f79e4e3d0c1c83d8c8ca216c8625e144a44648614875578e'
$checksum = '44c4fb91676dab1037a76dddc9bb06713c4c39ac89d6573a659d92ed46cde125'

if ($german -contains $LCID)
{
    $packageArgs.url = "$urlBase/BCompare-de-$version.exe"
    $packageArgs.checksum = $checksumde
}
elseif ($french -contains $LCID)
{
    $packageArgs.url = "$urlBase/BCompare-fr-$version.exe"
    $packageArgs.checksum = $checksumfr
}
elseif ($japanese -contains $LCID)
{
    $packageArgs.url = "$urlBase/BCompare-jp-$version.exe"
    $packageArgs.checksum = $checksumjp
}
elseif ($chinese -contains $LCID) {
    $packageArgs.url = "$urlBase/BCompare-zh-$version.exe"
    $packageArgs.checksum = $checksumzh
}
else
{
    $packageArgs.url = "$urlBase/BCompare-$version.exe"
    $packageArgs.checksum = $checksum
}

Install-ChocolateyPackage @packageArgs
C:\ProgramData\chocolatey\lib\blender\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$packageArgs = @{
  packageName    = 'blender'
  softwareName   = 'Blender'
  fileType       = 'MSI'
  url64bit       = 'https://download.blender.org/release/Blender3.6/blender-3.6.0-windows-x64.msi'
  checksum64     = 'ac93288c9fbd4dce776e254e54d4e054a9168d17b8aa1b852549aa22b7d68c25'
  checksumType64 = 'sha256'
  silentArgs     = '/quiet /norestart'
  validExitCodes = @(0, 2010, 1641)
}

Install-ChocolateyPackage @packageArgs
C:\ProgramData\chocolatey\lib\choco-package-list-backup\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
$packageName      = 'choco-package-list-backup'
$toolsDir         = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$pp               = Get-PackageParameters
$scriptDir        = "$(Get-ToolsLocation)\BCURRAN3"
$script           = 'choco-package-list-backup.ps1'
$ScriptConfig     = 'choco-package-list-backup.config'
$shortcutName     = 'Chocolatey Package List Backup.lnk'
$oldshortcutName  = 'Choco Package List Backup.lnk'
$altshortcutName  = 'Package List Backup.lnk'
$Date             = Get-Date -UFormat %Y-%m-%d

# Setup
# New storage location moving forward for all my Chocolatey scripts
if (!(Test-Path "$(Get-ToolsLocation)\BCURRAN3")) { New-Item -Path "$(Get-ToolsLocation)" -Name "BCURRAN3" -ItemType "Directory" | Out-Null }

# Migration
# Move files before v2019.08.27 from old to new storage location
if (Test-Path "$env:ChocolateyInstall\bin\$script") { Remove-Item "$env:ChocolateyInstall\bin\$script" -Force }
if (Test-Path "$env:ChocolateyInstall\bin\choco-package-list-backup.xml") { Rename-Item "$env:ChocolateyInstall\bin\choco-package-list-backup.xml" $ScriptConfig -Force }
if (Test-Path "$env:ChocolateyInstall\bin\$ScriptConfig") { Move-Item "$env:ChocolateyInstall\bin\$ScriptConfig" "$scriptDir" -Force ; $Migration=$True }
if ($Migration) { &SchTasks /Delete /TN choco-package-list-backup /F }
if (Test-Path "$scriptDir\choco-package-list-backup.cmd") { Remove-Item "$scriptDir\choco-package-list-backup.cmd" -Force }
if (Test-Path "$scriptDir\choco-package-list-backup-manual.bat") { Remove-Item "$scriptDir\choco-package-list-backup-manual.bat" -Force }
if (Test-Path "$scriptDir\CPLB.cmd") { Remove-Item "$scriptDir\CPLB.cmd" -Force }

# Install Script
# Move new files and support files (if applicable)
Move-Item "$toolsDir\$script" "$scriptDir" -Force
Move-Item "$toolsDir\CPLB.bat" "$scriptDir" -Force
if (!(Test-Path "$scriptDir\$ScriptConfig")) { Move-Item "$toolsDir\$ScriptConfig" "$scriptDir" -Force }

# Create "shim"
Install-ChocolateyPowershellCommand -PackageName 'choco-package-list-backup' -PSFileFullPath "$scriptDir\$script"

# Cleanup
Remove-Item "$toolsDir\choco-package-list-backup.*" -Force -ErrorAction SilentlyContinue | Out-Null
if ($env:Path -NotMatch "BCURRAN3"){ Install-ChocolateyPath "$scriptDir" "Machine" ; refreshenv }

Function Update-Config{
[xml]$UpdatedConfig = Get-Content "$scriptDir\$ScriptConfig"

$UseiCloudDrive = $UpdatedConfig.Settings.Preferences.UseiCloudDrive
if ($UseiCloudDrive -eq $null)
   {
    Write-Host "  ** Adding iCloudDrive support to $ScriptConfig." -Foreground Magenta
	$NewStuff=$UpdatedConfig.CreateNode("element", "UseiCloudDrive", $null)
    $NewStuff.InnerText=("true") 
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }
$UseownCloud = $UpdatedConfig.Settings.Preferences.UseownCloud
if ($UseownCloud -eq $null)
   {
    Write-Host "  ** Adding ownCloud support to $ScriptConfig." -Foreground Magenta
	$NewStuff=$UpdatedConfig.CreateNode("element", "UseownCloud", $null)
    $NewStuff.InnerText=("true") 
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }
$SaveAllProgramsList = $UpdatedConfig.Settings.Preferences.SaveAllProgramsList
if ($SaveAllProgramsList -eq $null)
   {
    Write-Host "  ** Adding SaveAllProgramsList support to $ScriptConfig." -Foreground Magenta
	$NewStuff=$UpdatedConfig.CreateNode("element", "SaveAllProgramsList", $null)
    $NewStuff.InnerText=("true") 
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }
$AllProgramsListFile = $UpdatedConfig.Settings.Preferences.AllProgramsListFile
if ($AllProgramsListFile -eq $null)
   {
    Write-Host " ** Adding AllProgramsListFile support to $ScriptConfig." -Foreground Magenta
	$NewStuff=$UpdatedConfig.CreateNode("element", "AllProgramsListFile", $null)
    $NewStuff.InnerText=("AllProgramsList.txt") 
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }   
$SaveTitleSummary = $UpdatedConfig.Settings.Preferences.SaveTitleSummary
if ($SaveTitleSummary -eq $null)
   {
    Write-Host "  ** Adding SaveTitleSummary support to $ScriptConfig." -Foreground Magenta
	$NewStuff=$UpdatedConfig.CreateNode("element", "SaveTitleSummary", $null)
    $NewStuff.InnerText=("false") 
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }
$DefaultUserProfile = $UpdatedConfig.Settings.Preferences.DefaultUserProfile
if ($DefaultUserProfile -eq $null)
   {
	$NewStuff=$UpdatedConfig.CreateNode("element", "DefaultUserProfile", $null)
    if ($env:COMPUTERNAME -eq $env:USERNAME.trim('$')) { $NewStuff.InnerText=('Public') } else { $NewStuff.InnerText=("$env:USERNAME") }
    Write-Host "  ** Adding DefaultUserProfile support to $ScriptConfig." -Foreground Magenta
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }
$UseDefaultUserProfile = $UpdatedConfig.Settings.Preferences.UseDefaultUserProfile
if ($UseDefaultUserProfile -eq $null)
   {
	$NewStuff=$UpdatedConfig.CreateNode("element", "UseDefaultUserProfile", $null)
    $NewStuff.InnerText=("false") 
    Write-Host "  ** Adding UseDefaultUserProfile support to $ScriptConfig." -Foreground Magenta
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }
$CustomPath2 = $UpdatedConfig.Settings.Preferences.CustomPath2
if ($CustomPath2 -eq $null)
   {
	$NewStuff=$UpdatedConfig.CreateNode("element", "CustomPath2", $null)
    $NewStuff.InnerText=("c:\backup") 
    Write-Host "  ** Adding CustomPath2 support to $ScriptConfig." -Foreground Magenta
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }
$UseCustomPath2 = $UpdatedConfig.Settings.Preferences.UseCustomPath2
if ($UseCustomPath2 -eq $null)
   {
	$NewStuff=$UpdatedConfig.CreateNode("element", "UseCustomPath2", $null)
    $NewStuff.InnerText=("false") 
    Write-Host "  ** Adding UseCustomPath2 support to $ScriptConfig." -Foreground Magenta
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }
$SaveArguments = $UpdatedConfig.Settings.Preferences.SaveArguments
if ($SaveArguments -eq $null)
   {
	$NewStuff=$UpdatedConfig.CreateNode("element", "SaveArguments", $null)
    $NewStuff.InnerText=("false") 
    Write-Host "  ** Adding SaveArguments support to $ScriptConfig." -Foreground Magenta
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }
$PreProcessScript = $UpdatedConfig.Settings.Preferences.PreProcessScript
if ($PreProcessScript -eq $null)
   {
	$NewStuff=$UpdatedConfig.CreateNode("element", "PreProcessScript", $null)
    $NewStuff.InnerText=("false") 
    Write-Host "  ** Adding PreProcessScript support to $ScriptConfig." -Foreground Magenta
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }
$PostProcessScript = $UpdatedConfig.Settings.Preferences.PostProcessScript
if ($PostProcessScript -eq $null)
   {
	$NewStuff=$UpdatedConfig.CreateNode("element", "PostProcessScript", $null)
    $NewStuff.InnerText=("false") 
    Write-Host "  ** Adding PostProcessScript support to $ScriptConfig." -Foreground Magenta
	$UpdatedConfig.Settings.Preferences.AppendChild($NewStuff) | Out-Null
	$UpdatedFile = $True
   }   
if ($UpdatedFile)
   {   
    $UpdatedConfig.Save("$scriptDir\$ScriptConfig")
	Write-Host "  ** Updated $ScriptConfig" -Foreground Magenta
   }
}

Update-Config

# exit if a scheduled task is not wanted
if ($pp["NOTASK"] -eq 'true' -or $pp["NOSCHEDULE"] -eq 'true'){
       Write-Host "  ** NOTASK or NOSCHEDULE specified, not installing scheduled task." -Foreground Magenta
	   exit
   }
   
# install option to not run the script after install
$RunAfterInstall = $True
if ($pp["NORUN"] -eq 'true' -or $pp["DONTRUN"] -eq 'true'){
       Write-Host "  ** NORUN or DONTRUN specified, not running task." -Foreground Magenta
	   $RunAfterInstall = $False
   }

$ErrorActionPreference = 'SilentlyContinue'
$GotTask = (&schtasks /query /tn choco-package-list-backup) 2> $null
$ErrorActionPreference = 'Stop'

# Change task to run new batch file and keep other existing settings (2020.04.06 upgrade)
if ($GotTask -ne $null){
     &SchTasks /CHANGE /TN "choco-package-list-backup" /TR "%ChocolateyInstall%\bin\choco-package-list-backup.bat"
   }

if ($GotTask -ne $null){
     Write-Host
     Write-Host "  ** Existing choco-package-list-backup scheduled task found:" -Foreground Magenta 
     SchTasks /query /tn "choco-package-list-backup"
     Write-Host "`nKeeping existing scheduled task and upgrading script files." -Foreground Magenta
  } else {
    # install option to run at boot
    if ($pp["ONSTART"] -eq 'true' -or $pp["ATSTARTUP"] -eq 'true'){
	      SchTasks /Create /SC ONSTART /DELAY 0002:00 /RU SYSTEM /RL HIGHEST /TN "choco-package-list-backup" /TR "%ChocolateyInstall%\bin\choco-package-list-backup.bat" /F
          Write-Host "  ** ONSTART or ATSTARTUP specified, task will run on boot." -Foreground Magenta		  
       } else {
		 # Default install scheduled task 
	     SchTasks /Create /SC WEEKLY /D MON /RU SYSTEM /RL HIGHEST /TN "choco-package-list-backup" /TR "%ChocolateyInstall%\bin\choco-package-list-backup.bat" /ST 06:00 /F
         SchTasks /query /tn "choco-package-list-backup"
	     Write-Host "  ** Now configured to run choco-package-list-backup at 6 AM every MONDAY." -Foreground Green
	    }
    }
	
# Additional defaults for Windows 10+ computers
if (Get-IsWin10){
    $TaskSettings=New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
    Set-ScheduledTask -TaskName choco-package-list-backup -Settings $TaskSettings | Out-Null
}
	
If (Test-Path "$env:ProgramData\Microsoft\Windows\Start Menu\Programs\Chocolatey"){
      Remove-Item "$env:ProgramData\Microsoft\Windows\Start Menu\Programs\$oldshortcutName" -Force -ErrorAction SilentlyContinue
      Install-ChocolateyShortcut -shortcutFilePath "$env:ProgramData\Microsoft\Windows\Start Menu\Programs\Chocolatey\$altshortcutName" -targetPath "$env:ChocolateyInstall\bin\choco-package-list-backup.bat" -IconLocation "$env:ChocolateyInstall\choco.exe" -WorkingDirectory "$env:ChocolateyInstall\bin\"
    } else {
      Install-ChocolateyShortcut -shortcutFilePath "$env:ProgramData\Microsoft\Windows\Start Menu\Programs\$shortcutName" -targetPath "$env:ChocolateyInstall\bin\choco-package-list-backup.bat" -IconLocation "$env:ChocolateyInstall\choco.exe" -WorkingDirectory "$env:ChocolateyInstall\bin\"
	}

If ($RunAfterInstall){
	Write-Host "Running Choco-Package-List-Backup.ps1 to create backup(s)..." -Foreground Magenta
    &$env:ChocolateyInstall\bin\choco-package-list-backup.bat
   }
Write-Host "ADDITIONAL INFORMATION:" -Foreground Magenta
Write-Host "  ** Customize your backups: run CHOCO-PACKAGE-LIST-BACKUP -EDITCONFIG." -Foreground Magenta
Write-Host "  ** Run from Command Prompt or PowerShell: CHOCO-PACKAGE-LIST-BACKUP or CPLB." -Foreground Magenta
If (Test-Path "$env:ProgramData\Microsoft\Windows\Start Menu\Programs\Chocolatey"){
     Write-Host "  ** Run from Windows: Click Package List Backup in the Start Menu under Chocolatey to run." -Foreground Magenta
   } else {
     Write-Host "  ** Run from Windows: Click Chocolatey Package List Backup in the Start Menu to run." -Foreground Magenta
   }
C:\ProgramData\chocolatey\lib\chocolatey\tools\chocolateyInstall.ps1
$toolsPath = Split-Path -Parent $MyInvocation.MyCommand.Definition

# Ensure module loading preference is on
$PSModuleAutoLoadingPreference = "All"

$licensedAssembly = [System.AppDomain]::CurrentDomain.GetAssemblies() |
    Where-Object { $_.GetName().Name -eq 'chocolatey.licensed' } |
    Select-Object -First 1

if ($null -ne $licensedAssembly) {
    # The licensed assembly is installed, check its supported Chocolatey versions and/or the assembly
    # version so we can attempt to determine whether it's compatible with this version of Chocolatey.
    $attributeData = $licensedAssembly.GetCustomAttributes($true)

    $minVersion = $attributeData |
        Where-Object { $_.TypeId -like '*MinimumChocolateyVersion*' } |
        Select-Object -ExpandProperty Version -First 1

    $borderWidth = 70
    try {
        $borderWidth = [System.Console]::BufferWidth - 10
    }
    catch {
        # Do nothing. This means we're in a non-interactive environment without a console attached.
    }

    $messageBorder = '=' * $borderWidth
    $extensionVersionWarning = @"
$messageBorder

You are installing a version of Chocolatey that may not be compatible with the currently installed version of the chocolatey.extension package.
Running Chocolatey with the current version of the chocolatey.extension package is an unsupported configuration.
See https://ch0.co/compatibility for more information.

If you are also modifying the chocolatey.extension package, you can ignore this warning.

$messageBorder
"@

    if ($null -ne $minVersion) {
        # Found an explicit attribute declaring what version(s) of Chocolatey the current licensed
        # assembly is known to work with.
        # Check what Chocolatey version we're installing in Major.Minor.Patch form, stripping off any prerelease suffix
        $packageVersion = $env:ChocolateyPackageVersion -replace '-.+$' -as [System.Version]

        if ($packageVersion -lt $minVersion) {
            Write-Warning $extensionVersionWarning
        }
    }
    else {
        $version = $attributeData |
            Where-Object { $_.TypeId -like '*AssemblyInformationalVersion*' } |
            Select-Object -ExpandProperty InformationalVersion -First 1

        # Strip off quotes and prerelease suffix if present, that's not critical for this check.
        $version = $version -replace '-.+$' -as [System.Version]

        if ($version.Major -lt 4) {
            Write-Warning $extensionVersionWarning
        }
    }
}

$modules = Get-ChildItem $toolsPath -Filter *.psm1
$modules | ForEach-Object {
    $psm1File = $_.FullName
    $moduleName = [System.IO.Path]::GetFileNameWithoutExtension($psm1File)

    if (Get-Module $moduleName) {
        Remove-Module $moduleName -ErrorAction SilentlyContinue
    }

    Import-Module -Name $psm1File
}

Initialize-Chocolatey

# SIG # Begin signature block
# MIIjfwYJKoZIhvcNAQcCoIIjcDCCI2wCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCAC2zftLYpmqtE9
# 5VS2OXKJJZvvSMLWAFLPVru6KnvwjKCCHXgwggUwMIIEGKADAgECAhAECRgbX9W7
# ZnVTQ7VvlVAIMA0GCSqGSIb3DQEBCwUAMGUxCzAJBgNVBAYTAlVTMRUwEwYDVQQK
# EwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20xJDAiBgNV
# BAMTG0RpZ2lDZXJ0IEFzc3VyZWQgSUQgUm9vdCBDQTAeFw0xMzEwMjIxMjAwMDBa
# Fw0yODEwMjIxMjAwMDBaMHIxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2Vy
# dCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20xMTAvBgNVBAMTKERpZ2lD
# ZXJ0IFNIQTIgQXNzdXJlZCBJRCBDb2RlIFNpZ25pbmcgQ0EwggEiMA0GCSqGSIb3
# DQEBAQUAA4IBDwAwggEKAoIBAQD407Mcfw4Rr2d3B9MLMUkZz9D7RZmxOttE9X/l
# qJ3bMtdx6nadBS63j/qSQ8Cl+YnUNxnXtqrwnIal2CWsDnkoOn7p0WfTxvspJ8fT
# eyOU5JEjlpB3gvmhhCNmElQzUHSxKCa7JGnCwlLyFGeKiUXULaGj6YgsIJWuHEqH
# CN8M9eJNYBi+qsSyrnAxZjNxPqxwoqvOf+l8y5Kh5TsxHM/q8grkV7tKtel05iv+
# bMt+dDk2DZDv5LVOpKnqagqrhPOsZ061xPeM0SAlI+sIZD5SlsHyDxL0xY4PwaLo
# LFH3c7y9hbFig3NBggfkOItqcyDQD2RzPJ6fpjOp/RnfJZPRAgMBAAGjggHNMIIB
# yTASBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAK
# BggrBgEFBQcDAzB5BggrBgEFBQcBAQRtMGswJAYIKwYBBQUHMAGGGGh0dHA6Ly9v
# Y3NwLmRpZ2ljZXJ0LmNvbTBDBggrBgEFBQcwAoY3aHR0cDovL2NhY2VydHMuZGln
# aWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElEUm9vdENBLmNydDCBgQYDVR0fBHow
# eDA6oDigNoY0aHR0cDovL2NybDQuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJl
# ZElEUm9vdENBLmNybDA6oDigNoY0aHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0Rp
# Z2lDZXJ0QXNzdXJlZElEUm9vdENBLmNybDBPBgNVHSAESDBGMDgGCmCGSAGG/WwA
# AgQwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93d3cuZGlnaWNlcnQuY29tL0NQUzAK
# BghghkgBhv1sAzAdBgNVHQ4EFgQUWsS5eyoKo6XqcQPAYPkt9mV1DlgwHwYDVR0j
# BBgwFoAUReuir/SSy4IxLVGLp6chnfNtyA8wDQYJKoZIhvcNAQELBQADggEBAD7s
# DVoks/Mi0RXILHwlKXaoHV0cLToaxO8wYdd+C2D9wz0PxK+L/e8q3yBVN7Dh9tGS
# dQ9RtG6ljlriXiSBThCk7j9xjmMOE0ut119EefM2FAaK95xGTlz/kLEbBw6RFfu6
# r7VRwo0kriTGxycqoSkoGjpxKAI8LpGjwCUR4pwUR6F6aGivm6dcIFzZcbEMj7uo
# +MUSaJ/PQMtARKUT8OZkDCUIQjKyNookAv4vcn4c10lFluhZHen6dGRrsutmQ9qz
# sIzV6Q3d9gEgzpkxYz0IGhizgZtPxpMQBvwHgfqL2vmCSfdibqFT+hKUGIUukpHq
# aGxEMrJmoecYpJpkUe8wggU5MIIEIaADAgECAhAKudMQ+yEr6IyBs9LC6M5RMA0G
# CSqGSIb3DQEBCwUAMHIxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJ
# bmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20xMTAvBgNVBAMTKERpZ2lDZXJ0
# IFNIQTIgQXNzdXJlZCBJRCBDb2RlIFNpZ25pbmcgQ0EwHhcNMjEwNDI3MDAwMDAw
# WhcNMjQwNDMwMjM1OTU5WjB3MQswCQYDVQQGEwJVUzEPMA0GA1UECBMGS2Fuc2Fz
# MQ8wDQYDVQQHEwZUb3Bla2ExIjAgBgNVBAoTGUNob2NvbGF0ZXkgU29mdHdhcmUs
# IEluYy4xIjAgBgNVBAMTGUNob2NvbGF0ZXkgU29mdHdhcmUsIEluYy4wggEiMA0G
# CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQChcaeNqeO3O3hzbDYYMcxvv/QNSPE4
# fpI+NGECR+FYdDO2utX9/SPxRCzWBrsgntPs/7IPk/uFZk/yTIiNoXO+cqJE45L9
# 2Ldfn6gAcwjGna/j2f/bbSFSeXW9z9lM3DJecFwXQleWR/8OKCnD+d1ZmHB0BA5v
# 0bQCfU8ZT7S0u9+KAKqyqgZrJyQiPfBVqXes9RSua7+0SVXmaBrJf9njHAf5KNFY
# /TEgm1r1zYwxfcsuE5eYdr2/suytUJpN18m9DmAdYm72va0KMxoKIBGuQy9DnaDI
# +nMiegsdhkL9sIysIin7Pcwjkwx9lRmtIqJA27Hfgb1MaL0OnkpwRY+VAgMBAAGj
# ggHEMIIBwDAfBgNVHSMEGDAWgBRaxLl7KgqjpepxA8Bg+S32ZXUOWDAdBgNVHQ4E
# FgQUTvMFGF2V6ylQalFt+afRXjSaBIMwDgYDVR0PAQH/BAQDAgeAMBMGA1UdJQQM
# MAoGCCsGAQUFBwMDMHcGA1UdHwRwMG4wNaAzoDGGL2h0dHA6Ly9jcmwzLmRpZ2lj
# ZXJ0LmNvbS9zaGEyLWFzc3VyZWQtY3MtZzEuY3JsMDWgM6Axhi9odHRwOi8vY3Js
# NC5kaWdpY2VydC5jb20vc2hhMi1hc3N1cmVkLWNzLWcxLmNybDBLBgNVHSAERDBC
# MDYGCWCGSAGG/WwDATApMCcGCCsGAQUFBwIBFhtodHRwOi8vd3d3LmRpZ2ljZXJ0
# LmNvbS9DUFMwCAYGZ4EMAQQBMIGEBggrBgEFBQcBAQR4MHYwJAYIKwYBBQUHMAGG
# GGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBOBggrBgEFBQcwAoZCaHR0cDovL2Nh
# Y2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0U0hBMkFzc3VyZWRJRENvZGVTaWdu
# aW5nQ0EuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggEBAKFxncHA
# zDFesUJXaM21qMRk5+nIZcDuISfGgJcDjMHsRLw7na5Yn7IhiNY+OsKnPVkfPhL/
# MNXSHG6on+IpxiB2/Bry9thqKvpQdPBe8mFN0ctJDgrSceyRC5SA9EiO22J3YNe0
# yVEKAG+Yk2A/WhKBzCCpRskMlRr7KeLm6DvAgvDsMfkKtePMl2PraON+tFNpc2b1
# LTKT4okiU5uAWpjYAt9sYBsKTeZb5NJt0ZQ3akEEIAQs63/mSDAZlzMOJMWNK/yv
# 4NU5CiPVcohJ0WjUJUIrAMmAVlZ2h8NhCXJOv28cHWEgPks/zqdDdIhJfDF+ALd1
# 0JTBrwCNcYQG68AwggWNMIIEdaADAgECAhAOmxiO+dAt5+/bUOIIQBhaMA0GCSqG
# SIb3DQEBDAUAMGUxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMx
# GTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20xJDAiBgNVBAMTG0RpZ2lDZXJ0IEFz
# c3VyZWQgSUQgUm9vdCBDQTAeFw0yMjA4MDEwMDAwMDBaFw0zMTExMDkyMzU5NTla
# MGIxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsT
# EHd3dy5kaWdpY2VydC5jb20xITAfBgNVBAMTGERpZ2lDZXJ0IFRydXN0ZWQgUm9v
# dCBHNDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAL/mkHNo3rvkXUo8
# MCIwaTPswqclLskhPfKK2FnC4SmnPVirdprNrnsbhA3EMB/zG6Q4FutWxpdtHauy
# efLKEdLkX9YFPFIPUh/GnhWlfr6fqVcWWVVyr2iTcMKyunWZanMylNEQRBAu34Lz
# B4TmdDttceItDBvuINXJIB1jKS3O7F5OyJP4IWGbNOsFxl7sWxq868nPzaw0QF+x
# embud8hIqGZXV59UWI4MK7dPpzDZVu7Ke13jrclPXuU15zHL2pNe3I6PgNq2kZhA
# kHnDeMe2scS1ahg4AxCN2NQ3pC4FfYj1gj4QkXCrVYJBMtfbBHMqbpEBfCFM1Lyu
# GwN1XXhm2ToxRJozQL8I11pJpMLmqaBn3aQnvKFPObURWBf3JFxGj2T3wWmIdph2
# PVldQnaHiZdpekjw4KISG2aadMreSx7nDmOu5tTvkpI6nj3cAORFJYm2mkQZK37A
# lLTSYW3rM9nF30sEAMx9HJXDj/chsrIRt7t/8tWMcCxBYKqxYxhElRp2Yn72gLD7
# 6GSmM9GJB+G9t+ZDpBi4pncB4Q+UDCEdslQpJYls5Q5SUUd0viastkF13nqsX40/
# ybzTQRESW+UQUOsxxcpyFiIJ33xMdT9j7CFfxCBRa2+xq4aLT8LWRV+dIPyhHsXA
# j6KxfgommfXkaS+YHS312amyHeUbAgMBAAGjggE6MIIBNjAPBgNVHRMBAf8EBTAD
# AQH/MB0GA1UdDgQWBBTs1+OC0nFdZEzfLmc/57qYrhwPTzAfBgNVHSMEGDAWgBRF
# 66Kv9JLLgjEtUYunpyGd823IDzAOBgNVHQ8BAf8EBAMCAYYweQYIKwYBBQUHAQEE
# bTBrMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wQwYIKwYB
# BQUHMAKGN2h0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEFzc3Vy
# ZWRJRFJvb3RDQS5jcnQwRQYDVR0fBD4wPDA6oDigNoY0aHR0cDovL2NybDMuZGln
# aWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElEUm9vdENBLmNybDARBgNVHSAECjAI
# MAYGBFUdIAAwDQYJKoZIhvcNAQEMBQADggEBAHCgv0NcVec4X6CjdBs9thbX979X
# B72arKGHLOyFXqkauyL4hxppVCLtpIh3bb0aFPQTSnovLbc47/T/gLn4offyct4k
# vFIDyE7QKt76LVbP+fT3rDB6mouyXtTP0UNEm0Mh65ZyoUi0mcudT6cGAxN3J0TU
# 53/oWajwvy8LpunyNDzs9wPHh6jSTEAZNUZqaVSwuKFWjuyk1T3osdz9HNj0d1pc
# VIxv76FQPfx2CWiEn2/K2yCNNWAcAgPLILCsWKAOQGPFmCLBsln1VWvPJ6tsds5v
# Iy30fnFqI2si/xK4VC0nftg62fC2h5b9W9FcrBjDTZ9ztwGpn1eqXijiuZQwggau
# MIIElqADAgECAhAHNje3JFR82Ees/ShmKl5bMA0GCSqGSIb3DQEBCwUAMGIxCzAJ
# BgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5k
# aWdpY2VydC5jb20xITAfBgNVBAMTGERpZ2lDZXJ0IFRydXN0ZWQgUm9vdCBHNDAe
# Fw0yMjAzMjMwMDAwMDBaFw0zNzAzMjIyMzU5NTlaMGMxCzAJBgNVBAYTAlVTMRcw
# FQYDVQQKEw5EaWdpQ2VydCwgSW5jLjE7MDkGA1UEAxMyRGlnaUNlcnQgVHJ1c3Rl
# ZCBHNCBSU0E0MDk2IFNIQTI1NiBUaW1lU3RhbXBpbmcgQ0EwggIiMA0GCSqGSIb3
# DQEBAQUAA4ICDwAwggIKAoICAQDGhjUGSbPBPXJJUVXHJQPE8pE3qZdRodbSg9Ge
# TKJtoLDMg/la9hGhRBVCX6SI82j6ffOciQt/nR+eDzMfUBMLJnOWbfhXqAJ9/UO0
# hNoR8XOxs+4rgISKIhjf69o9xBd/qxkrPkLcZ47qUT3w1lbU5ygt69OxtXXnHwZl
# jZQp09nsad/ZkIdGAHvbREGJ3HxqV3rwN3mfXazL6IRktFLydkf3YYMZ3V+0VAsh
# aG43IbtArF+y3kp9zvU5EmfvDqVjbOSmxR3NNg1c1eYbqMFkdECnwHLFuk4fsbVY
# TXn+149zk6wsOeKlSNbwsDETqVcplicu9Yemj052FVUmcJgmf6AaRyBD40NjgHt1
# biclkJg6OBGz9vae5jtb7IHeIhTZgirHkr+g3uM+onP65x9abJTyUpURK1h0QCir
# c0PO30qhHGs4xSnzyqqWc0Jon7ZGs506o9UD4L/wojzKQtwYSH8UNM/STKvvmz3+
# DrhkKvp1KCRB7UK/BZxmSVJQ9FHzNklNiyDSLFc1eSuo80VgvCONWPfcYd6T/jnA
# +bIwpUzX6ZhKWD7TA4j+s4/TXkt2ElGTyYwMO1uKIqjBJgj5FBASA31fI7tk42Pg
# puE+9sJ0sj8eCXbsq11GdeJgo1gJASgADoRU7s7pXcheMBK9Rp6103a50g5rmQzS
# M7TNsQIDAQABo4IBXTCCAVkwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQU
# uhbZbU2FL3MpdpovdYxqII+eyG8wHwYDVR0jBBgwFoAU7NfjgtJxXWRM3y5nP+e6
# mK4cD08wDgYDVR0PAQH/BAQDAgGGMBMGA1UdJQQMMAoGCCsGAQUFBwMIMHcGCCsG
# AQUFBwEBBGswaTAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29t
# MEEGCCsGAQUFBzAChjVodHRwOi8vY2FjZXJ0cy5kaWdpY2VydC5jb20vRGlnaUNl
# cnRUcnVzdGVkUm9vdEc0LmNydDBDBgNVHR8EPDA6MDigNqA0hjJodHRwOi8vY3Js
# My5kaWdpY2VydC5jb20vRGlnaUNlcnRUcnVzdGVkUm9vdEc0LmNybDAgBgNVHSAE
# GTAXMAgGBmeBDAEEAjALBglghkgBhv1sBwEwDQYJKoZIhvcNAQELBQADggIBAH1Z
# jsCTtm+YqUQiAX5m1tghQuGwGC4QTRPPMFPOvxj7x1Bd4ksp+3CKDaopafxpwc8d
# B+k+YMjYC+VcW9dth/qEICU0MWfNthKWb8RQTGIdDAiCqBa9qVbPFXONASIlzpVp
# P0d3+3J0FNf/q0+KLHqrhc1DX+1gtqpPkWaeLJ7giqzl/Yy8ZCaHbJK9nXzQcAp8
# 76i8dU+6WvepELJd6f8oVInw1YpxdmXazPByoyP6wCeCRK6ZJxurJB4mwbfeKuv2
# nrF5mYGjVoarCkXJ38SNoOeY+/umnXKvxMfBwWpx2cYTgAnEtp/Nh4cku0+jSbl3
# ZpHxcpzpSwJSpzd+k1OsOx0ISQ+UzTl63f8lY5knLD0/a6fxZsNBzU+2QJshIUDQ
# txMkzdwdeDrknq3lNHGS1yZr5Dhzq6YBT70/O3itTK37xJV77QpfMzmHQXh6OOmc
# 4d0j/R0o08f56PGYX/sr2H7yRp11LB4nLCbbbxV7HhmLNriT1ObyF5lZynDwN7+Y
# AN8gFk8n+2BnFqFmut1VwDophrCYoCvtlUG3OtUVmDG0YgkPCr2B2RP+v6TR81fZ
# vAT6gt4y3wSJ8ADNXcL50CN/AAvkdgIm2fBldkKmKYcJRyvmfxqkhQ/8mJb2VVQr
# H4D6wPIOK+XW+6kvRBVK5xMOHds3OBqhK/bt1nz8MIIGwDCCBKigAwIBAgIQDE1p
# ckuU+jwqSj0pB4A9WjANBgkqhkiG9w0BAQsFADBjMQswCQYDVQQGEwJVUzEXMBUG
# A1UEChMORGlnaUNlcnQsIEluYy4xOzA5BgNVBAMTMkRpZ2lDZXJ0IFRydXN0ZWQg
# RzQgUlNBNDA5NiBTSEEyNTYgVGltZVN0YW1waW5nIENBMB4XDTIyMDkyMTAwMDAw
# MFoXDTMzMTEyMTIzNTk1OVowRjELMAkGA1UEBhMCVVMxETAPBgNVBAoTCERpZ2lD
# ZXJ0MSQwIgYDVQQDExtEaWdpQ2VydCBUaW1lc3RhbXAgMjAyMiAtIDIwggIiMA0G
# CSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDP7KUmOsap8mu7jcENmtuh6BSFdDMa
# JqzQHFUeHjZtvJJVDGH0nQl3PRWWCC9rZKT9BoMW15GSOBwxApb7crGXOlWvM+xh
# iummKNuQY1y9iVPgOi2Mh0KuJqTku3h4uXoW4VbGwLpkU7sqFudQSLuIaQyIxvG+
# 4C99O7HKU41Agx7ny3JJKB5MgB6FVueF7fJhvKo6B332q27lZt3iXPUv7Y3UTZWE
# aOOAy2p50dIQkUYp6z4m8rSMzUy5Zsi7qlA4DeWMlF0ZWr/1e0BubxaompyVR4aF
# eT4MXmaMGgokvpyq0py2909ueMQoP6McD1AGN7oI2TWmtR7aeFgdOej4TJEQln5N
# 4d3CraV++C0bH+wrRhijGfY59/XBT3EuiQMRoku7mL/6T+R7Nu8GRORV/zbq5Xwx
# 5/PCUsTmFntafqUlc9vAapkhLWPlWfVNL5AfJ7fSqxTlOGaHUQhr+1NDOdBk+lbP
# 4PQK5hRtZHi7mP2Uw3Mh8y/CLiDXgazT8QfU4b3ZXUtuMZQpi+ZBpGWUwFjl5S4p
# kKa3YWT62SBsGFFguqaBDwklU/G/O+mrBw5qBzliGcnWhX8T2Y15z2LF7OF7ucxn
# EweawXjtxojIsG4yeccLWYONxu71LHx7jstkifGxxLjnU15fVdJ9GSlZA076XepF
# cxyEftfO4tQ6dwIDAQABo4IBizCCAYcwDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB
# /wQCMAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwIAYDVR0gBBkwFzAIBgZngQwB
# BAIwCwYJYIZIAYb9bAcBMB8GA1UdIwQYMBaAFLoW2W1NhS9zKXaaL3WMaiCPnshv
# MB0GA1UdDgQWBBRiit7QYfyPMRTtlwvNPSqUFN9SnDBaBgNVHR8EUzBRME+gTaBL
# hklodHRwOi8vY3JsMy5kaWdpY2VydC5jb20vRGlnaUNlcnRUcnVzdGVkRzRSU0E0
# MDk2U0hBMjU2VGltZVN0YW1waW5nQ0EuY3JsMIGQBggrBgEFBQcBAQSBgzCBgDAk
# BggrBgEFBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29tMFgGCCsGAQUFBzAC
# hkxodHRwOi8vY2FjZXJ0cy5kaWdpY2VydC5jb20vRGlnaUNlcnRUcnVzdGVkRzRS
# U0E0MDk2U0hBMjU2VGltZVN0YW1waW5nQ0EuY3J0MA0GCSqGSIb3DQEBCwUAA4IC
# AQBVqioa80bzeFc3MPx140/WhSPx/PmVOZsl5vdyipjDd9Rk/BX7NsJJUSx4iGNV
# CUY5APxp1MqbKfujP8DJAJsTHbCYidx48s18hc1Tna9i4mFmoxQqRYdKmEIrUPwb
# tZ4IMAn65C3XCYl5+QnmiM59G7hqopvBU2AJ6KO4ndetHxy47JhB8PYOgPvk/9+d
# EKfrALpfSo8aOlK06r8JSRU1NlmaD1TSsht/fl4JrXZUinRtytIFZyt26/+YsiaV
# OBmIRBTlClmia+ciPkQh0j8cwJvtfEiy2JIMkU88ZpSvXQJT657inuTTH4YBZJwA
# wuladHUNPeF5iL8cAZfJGSOA1zZaX5YWsWMMxkZAO85dNdRZPkOaGK7DycvD+5sT
# X2q1x+DzBcNZ3ydiK95ByVO5/zQQZ/YmMph7/lxClIGUgp2sCovGSxVK05iQRWAz
# gOAj3vgDpPZFR+XOuANCR+hBNnF3rf2i6Jd0Ti7aHh2MWsgemtXC8MYiqE+bvdgc
# mlHEL5r2X6cnl7qWLoVXwGDneFZ/au/ClZpLEQLIgpzJGgV8unG1TnqZbPTontRa
# mMifv427GFxD9dAq6OJi7ngE273R+1sKqHB+8JeEeOMIA11HLGOoJTiXAdI/Otrl
# 5fbmm9x+LMz/F0xNAKLY1gEOuIvu5uByVYksJxlh9ncBjDGCBV0wggVZAgEBMIGG
# MHIxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsT
# EHd3dy5kaWdpY2VydC5jb20xMTAvBgNVBAMTKERpZ2lDZXJ0IFNIQTIgQXNzdXJl
# ZCBJRCBDb2RlIFNpZ25pbmcgQ0ECEAq50xD7ISvojIGz0sLozlEwDQYJYIZIAWUD
# BAIBBQCggYQwGAYKKwYBBAGCNwIBDDEKMAigAoAAoQKAADAZBgkqhkiG9w0BCQMx
# DAYKKwYBBAGCNwIBBDAcBgorBgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAvBgkq
# hkiG9w0BCQQxIgQgxLtKndEu7+Nt86In0YdFQO432/TJi7wBHrJcxUFhSKowDQYJ
# KoZIhvcNAQEBBQAEggEAoWJ1xicpwZ2bGzwAOCQgLeK77OYoT8exJLrGmC5i7jGg
# UvDeD6Og9ddgzmt4pTsC+x/qOcN4XxMS6Mi9HezSDMCZf74VMI2KADYsnM4Rg06O
# wnLgzNSzKrOPYgsWmbwUO4jnUY1YYQUuF+qUQSJu/mTHfbk2OQbGNBORurRFCSQJ
# qXkdQH0963j5ZRZfNI4lA/idxTtMbnQIA5Y3gdqGvySHNN0uuOBpupVNmr617dVa
# mWlXPyvSpep+9+rJs6iI6uyodJITaixEC1XtENX6BqgpCkBvLLf5dgbQ0CF7hVdb
# 98Bn7DRKCOYoO/8qwRB1DRErzsJHMTcpN+qwsohz7aGCAyAwggMcBgkqhkiG9w0B
# CQYxggMNMIIDCQIBATB3MGMxCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5EaWdpQ2Vy
# dCwgSW5jLjE7MDkGA1UEAxMyRGlnaUNlcnQgVHJ1c3RlZCBHNCBSU0E0MDk2IFNI
# QTI1NiBUaW1lU3RhbXBpbmcgQ0ECEAxNaXJLlPo8Kko9KQeAPVowDQYJYIZIAWUD
# BAIBBQCgaTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEP
# Fw0yMzA2MjkwNjU1MjRaMC8GCSqGSIb3DQEJBDEiBCCMy44AJCAvhkfs4X2EOKjC
# VoK/Rob1qYABAsXCF+fguzANBgkqhkiG9w0BAQEFAASCAgBx+pCvMgnP1mIDZAe0
# eM7uXpc7yO8GWIEX081YlvD7mouh42w763Yl95BKNjn2dDRuFiRpEBWLnA2jOaz+
# I5ET21nZktCAycMVtKAh4yp4vDI9VtLFVcR1xFpZm/ss72uaLu2G3FwpnqPyYB53
# 4nvdUxD9rMQLfvY3G6muWrxkIT+4lgPMfCAebNi733lL9ZaCoH8zl4q/t11jrkM3
# /PBuxYlTsJdQ2MWaN3XBbGsXHqwQqnYwMgyybFCqG/VDNFkmI1GHBbEtOu9v69JK
# XK2c+CvK5GVoxzcMvdqf6csz8SN1L5W89Jx/HExuFEC0NHmeeKsH7MF+9C0kXMzq
# lzpVySASrN3Q5U3H5vXlHLuW05TwvQxBvE83mvmkkgKB1iTW97vnCTfWxQUfxuhm
# L7xNGKxYCsJRgsaFOW2UPIiF/6FA979l7LNDpK0lz7jGhxj1yC58KPlcYCcDVPkV
# Q60vAxuywGvNTZth1xjtJPXNunLBke5ELmUc5S7t32RQj+BmRwcqcWq7OCECtFrM
# UE4uGAh4/rlqjtn6C//jyFUFMhP19tSqVppHEY8QcmgUgapov9iUkbVwyasa8J5v
# bvPjZOzqAw4ek5fTbd8OqiQgnenf14JLcf1492syKzzscq4eOx/dVk4A0oMDZPqa
# q/eRmLAQ8eZBSJ6e4JBKa2j1qQ==
# SIG # End signature block
C:\ProgramData\chocolatey\lib\cura-new\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop';

$data = & (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Path) -ChildPath data.ps1)
$WorkSpace = Join-Path $env:TEMP $env:ChocolateyPackageName
$toolsDir = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"

# v5.0.0 fixed the certificate issue.  Leave it here just in case?
#
# $ardunio = Join-Path $toolsDir 'Arduino.cer'
# $adafruit = Join-Path $toolsDir 'Adafruit.cer'
#
# Import-Certificate -FilePath $ardunio -CertStoreLocation Cert:\LocalMachine\TrustedPublisher
# Import-Certificate -FilePath $adafruit -CertStoreLocation Cert:\LocalMachine\TrustedPublisher

& "$toolsDir\chocolateyUninstall.ps1"

$packageArgs = @{
    packageName    = $env:ChocolateyPackageName
    unzipLocation  = $toolsDir
    fileType       = 'exe'
    silentArgs     = '/S'
    softwareName   = 'Ultimaker'
    validExitCodes = @(0, 3010, 1641)

    url            = $data.url
    checksum       = $data.checksum
    checksumType   = $data.checksumType
}

Install-ChocolateyPackage @packageArgs
C:\ProgramData\chocolatey\lib\dbatools\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir   = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$moduleName = 'dbatools'  # this may be different from the package name and different case

if ($PSVersionTable.PSVersion.Major -lt 3) {
    throw "$moduleName) module requires a minimum of PowerShell v3."
}

# module may already be installed outside of Chocolatey
Remove-Module -Name $moduleName -Force -ErrorAction SilentlyContinue

$sourcePath = Join-Path -Path $toolsDir -ChildPath "$modulename.zip"
$destPath   = Join-Path -Path $env:ProgramFiles -ChildPath "WindowsPowerShell\Modules\$moduleName"

if ($PSVersionTable.PSVersion.Major -ge 5)
{
    $destPath     = Join-Path -Path $destPath -ChildPath $env:ChocolateyPackageVersion
}

Write-Verbose "Creating destination directory '$destPath' for module."
New-Item -Path $destPath -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null

Write-Verbose "Extracting '$moduleName' files from '$sourcePath' to '$destPath'."
Get-ChocolateyUnzip -FileFullPath $sourcePath -Destination $destPath

if ($PSVersionTable.PSVersion.Major -lt 4)
{
    $modulePaths = [Environment]::GetEnvironmentVariable('PSModulePath', 'Machine') -split ';'
    if ($modulePaths -notcontains $destPath)
    {
        Write-Verbose "Adding '$destPath' to PSModulePath."
        $newModulePath = @($destPath, $modulePaths) -join ';'

        [Environment]::SetEnvironmentVariable('PSModulePath', $newModulePath, 'Machine')
        $env:PSModulePath = $newModulePath
    }
}
C:\ProgramData\chocolatey\lib\dotnet-6.0-sdk-3xx\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
Set-StrictMode -Version 2

$data = & (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Path) -ChildPath data.ps1)

$arguments = @{
    packageName = $data.PackageName
    silentArgs = "$($data.AdditionalArgumentsToInstaller) /install /quiet /norestart /log ""${Env:TEMP}\$($data.PackageName)-$(Get-Date -Format 'yyyyMMddHHmmss').log"""
    validExitCodes = @(
        0, # success
        3010 # success, restart required
    )
    url = $data.Url
    checksum = $data.Checksum
    checksumType = $data.ChecksumType
}
$arguments64 = @{
    url64 = $data.Url64
    checksum64 = $data.Checksum64
    checksumType64 = $data.ChecksumType64
}

Set-StrictMode -Off
Install-ChocolateyPackage @arguments @arguments64
C:\ProgramData\chocolatey\lib\dotnet-7.0-desktopruntime\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
Set-StrictMode -Version 2

$data = & (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Path) -ChildPath data.ps1)

function Test-Skip32BitRequested
{
    return $Env:chocolateyPackageParameters -like '*Skip32Bit*'
}

function Test-PassiveRequested
{
    return $Env:chocolateyPackageParameters -like '*Passive*'
}

function Test-OsSupports32Bit
{
    $cmdGetWindowsOptionalFeature = Get-Command -Name 'Get-WindowsOptionalFeature' -ErrorAction 'SilentlyContinue'
    if ($null -eq $cmdGetWindowsOptionalFeature) {
        Write-Debug 'Get-WindowsOptionalFeature command not found, assuming legacy OS and 32-bit support always present'
        return $true
    }
    $wow64 = Get-WindowsOptionalFeature -Online -FeatureName 'ServerCore-WOW64' -ErrorAction 'SilentlyContinue'
    if ($null -eq $wow64) {
        Write-Debug 'ServerCore-WOW64 feature not found, assuming client or legacy server OS and 32-bit support always present'
        return $true
    }
    Write-Debug "ServerCore-WOW64 feature state is: $($wow64.State)"
    return ($wow64.State -eq 'Enabled')
}

function Get-PassiveOrQuietArgument
{
    [CmdletBinding()]
    Param (
        [string] $Scenario = 'installation'
    )
    if (Test-PassiveRequested) {
        Write-Verbose "Performing an $Scenario with visible progress window, as requested."
        $passiveOrQuiet = 'passive'
    } else {
        Write-Verbose "Performing a quiet $Scenario (default)."
        $passiveOrQuiet = 'quiet'
    }
    return $passiveOrQuiet
}

$shouldInstall32Bit = $false
if (Get-ProcessorBits -eq 64) {
    if (-not (Test-Skip32BitRequested)) {
        if (Test-OsSupports32Bit) {
            $shouldInstall32Bit = $true
        } else {
            Write-Host 'Installation of 32-bit version will be skipped because the WOW64 subsystem is not installed.'
            Write-Warning 'Because of a limitation of the .NET Core installer, even the 64-bit version will probably fail to install (https://github.com/dotnet/runtime/issues/3087).'
        }
    } else {
        Write-Host 'Installation of 32-bit version will be skipped, as requested by package parameters.'
    }
}

$passiveOrQuiet = Get-PassiveOrQuietArgument -Scenario 'installation'
$arguments = @{
    packageName = $data.PackageName
    silentArgs = "$($data.AdditionalArgumentsToInstaller) /install /$passiveOrQuiet /norestart /log ""${Env:TEMP}\$($data.PackageName)-$(Get-Date -Format 'yyyyMMddHHmmss').log"""
    validExitCodes = @(
        0, # success
        3010 # success, restart required
    )
    url = $data.Url
    checksum = $data.Checksum
    checksumType = $data.ChecksumType
}
$arguments64 = @{
    url64 = $data.Url64
    checksum64 = $data.Checksum64
    checksumType64 = $data.ChecksumType64
}

Set-StrictMode -Off
Install-ChocolateyPackage @arguments @arguments64
if ($shouldInstall32Bit) {
    Install-ChocolateyPackage @arguments
}
C:\ProgramData\chocolatey\lib\dotnet-7.0-sdk-3xx\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
Set-StrictMode -Version 2

$data = & (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Path) -ChildPath data.ps1)

$arguments = @{
    packageName = $data.PackageName
    silentArgs = "$($data.AdditionalArgumentsToInstaller) /install /quiet /norestart /log ""${Env:TEMP}\$($data.PackageName)-$(Get-Date -Format 'yyyyMMddHHmmss').log"""
    validExitCodes = @(
        0, # success
        3010 # success, restart required
    )
    url = $data.Url
    checksum = $data.Checksum
    checksumType = $data.ChecksumType
}
$arguments64 = @{
    url64 = $data.Url64
    checksum64 = $data.Checksum64
    checksumType64 = $data.ChecksumType64
}

Set-StrictMode -Off
Install-ChocolateyPackage @arguments @arguments64
C:\ProgramData\chocolatey\lib\dotnet-7.0-sdk-1xx\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
Set-StrictMode -Version 2

$data = & (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Path) -ChildPath data.ps1)

$arguments = @{
    packageName = $data.PackageName
    silentArgs = "$($data.AdditionalArgumentsToInstaller) /install /quiet /norestart /log ""${Env:TEMP}\$($data.PackageName)-$(Get-Date -Format 'yyyyMMddHHmmss').log"""
    validExitCodes = @(
        0, # success
        3010 # success, restart required
    )
    url = $data.Url
    checksum = $data.Checksum
    checksumType = $data.ChecksumType
}
$arguments64 = @{
    url64 = $data.Url64
    checksum64 = $data.Checksum64
    checksumType64 = $data.ChecksumType64
}

Set-StrictMode -Off
Install-ChocolateyPackage @arguments @arguments64
C:\ProgramData\chocolatey\lib\dropbox\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop'
if (!$PSScriptRoot) {
  $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent
}
. "$PSScriptRoot\helper.ps1"

$version = '178.4.4811'

if (!(IsVersionAlreadyInstalled $version)) {
  $stop_dropbox = if (Get-Process -Name Dropbox -ErrorAction SilentlyContinue) { $false } else { $true }


  $packageArgs = @{
    packageName    = $env:ChocolateyPackageName
    softwareName   = "Dropbox"
    url            = 'https://edge.dropboxstatic.com/dbx-releng/client/Dropbox%20178.4.4811%20Offline%20Installer.x86.exe'
    url64          = 'https://edge.dropboxstatic.com/dbx-releng/client/Dropbox%20178.4.4811%20Offline%20Installer.x64.exe'
    checksum       = 'b1f5feb0f3f73d3004ee6ec13f85d301b8ef0f3f9b80ce1ebf3ec2ee5e3b03b7'
    checksum64     = '8dc936fa0b5b24eba10d11acd85f8803955f4f1649939b0de37b88fdb0531030'
    fileType       = 'exe'
    checksumType   = 'sha256'
    checksumType64 = 'sha256'
    silentArgs     = '/s'
    validExitCodes = @(0, 1641, 3010)
  }

  Install-ChocolateyPackage @packageArgs

  if ($stop_dropbox -and (Get-Process -Name Dropbox -ErrorAction SilentlyContinue)) {
    Stop-Process -processname Dropbox
  }
}
else {
  Write-Host "Dropbox $version is already installed."
}
C:\ProgramData\chocolatey\lib\Everything\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir = Split-Path $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName    = 'Everything'
  fileType       = 'exe'
  file           = Get-Item "$toolsDir\*x86*.exe"
  file64         = Get-Item "$toolsDir\*x64*.exe"
  silentArgs     = '/S'
  validExitCodes = @(0, 1223)
}
Install-ChocolateyInstallPackage @packageArgs
Remove-Item $toolsDir\*Setup*.exe

$packageName = $packageArgs.packageName
$installLocation = Get-AppInstallLocation 'everything$'
if (!$installLocation) { Write-Warning "Can't find $PackageName install location"; exit }

Write-Host "$packageName installed to '$installLocation'"
Register-Application "$installLocation\$packageName.exe"
Write-Host "$packageName registered as $packageName"

$pp = Get-PackageParameters

$cmd = @(
  ". '$installLocation\Everything.exe'"
  '--disable-run-as-admin'
  '--install-service' 
)
$pp.Keys | Where-Object { $_ -ne 'service' } | ForEach-Object { $cmd += "--install-" + $_.ToLower() }
Write-Host "Post install command line:" $cmd
"$cmd" | Invoke-Expression

Write-Host "Starting $packageName"
Start-Process "$installLocation\Everything.exe" -ArgumentList "-startup"

Write-Warning "The Everything Command Line, es.exe has been removed from this package."
Write-Warning "It now can be installed via the 'es' package"
C:\ProgramData\chocolatey\lib\flyway.commandline\tools\chocolateyInstall.ps1
$version = '9.17.0'
$packageName = 'flyway.commandline'
$toolsDir = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$url = "https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/$version/flyway-commandline-$version.zip"
$checksumType = 'sha256'
$checksum = '36147b5d44e7a805a2585f3281c92c4488225c7b985d8f55b079516cc383bb52'
Install-ChocolateyZipPackage $packageName $url $toolsDir -Checksum $checksum -ChecksumType $checksumType
Install-BinFile "flyway" "$toolsDir\flyway-$version\flyway.cmd"
C:\ProgramData\chocolatey\lib\FoxitReader\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$installationArgs = @{
    packageName    = $env:ChocolateyPackageName
    fileType       = 'EXE'
    url            = 'https://cdn01.foxitsoftware.com/product/reader/desktop/win/12.1.2/FoxitPDFReader1212_L10N_Setup_Prom.exe'
    checksum       = '2ad426023460ad745b8d6317d956219b74353bcc817c4b5553371978c3f5cc98'
    checksumType   = 'sha256'
    silentArgs     = "/verysilent /log=`"$($env:TEMP)\$($packageName).$($env:chocolateyPackageVersion).Install.log`""
    validExitCodes = @(0)
}

Install-ChocolateyPackage @installationArgs

$pp = Get-PackageParameters
$shimName = 'FoxitPDFReader'
if ($pp.NoShim) {
    Uninstall-BinFile -Name $shimName
}
else {
    $installLocation = Get-AppInstallLocation -AppNamePattern 'Foxit *Reader'
    if ($null -ne $installLocation) {
        $shimPath = Join-Path -Path $installLocation -ChildPath 'FoxitPDFReader.exe'
        Install-BinFile -Name $shimName -Path $shimPath -UseStart
    }
    else {
        Write-Warning 'Skipping shim creation - install location not detected'
    }
}
C:\ProgramData\chocolatey\lib\freevideoeditor\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path -Parent $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName    = $env:ChocolateyPackageName
  fileType       = 'exe'
  file           = "$toolsPath\video_editor_x32.exe"
  file64         = "$toolsPath\video_editor_x64.exe"
  softwareName   = 'VSDC Free Video Editor*'
  silentArgs     = "/VERYSILENT /NORESTART /SUPPRESSMSGBOXES /SP- /LOG=`"$($env:TEMP)\$($env:chocolateyPackageName).$($env:chocolateyPackageVersion).InnoInstall.log`""
  validExitCodes = @(0)
}

Install-ChocolateyInstallPackage @packageArgs

Get-ChildItem $toolsPath\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" '' } }
C:\ProgramData\chocolatey\lib\gh\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$logMsi = Join-Path -Path $env:TEMP -ChildPath ("{0}-{1}-MsiInstall.log" -f $env:ChocolateyPackageName, $env:chocolateyPackageVersion)
$file64Filename = 'gh_2.32.0_windows_amd64.msi'

$packageArgs = @{
    packageName    = $env:ChocolateyPackageName
    fileType       = 'MSI'
    silentArgs     = "/qn /norestart /l*v `"$logMsi`""
    file64         = Join-Path -Path $toolsDir -ChildPath $file64Filename
}

Install-ChocolateyInstallPackage @packageArgs
C:\ProgramData\chocolatey\lib\git.install\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path $MyInvocation.MyCommand.Definition
. $toolsPath\helpers.ps1

$pp = Get-PackageParameters

Stop-GitSSHAgent
# Workaround for chocolateyBeforeModify.ps1 being bypassed if upgrading via metapackage (chocolatey/choco#1092)
Stop-GitGPGAgent

$fileName32 = 'Git-2.41.0-32-bit.exe'
$fileName64 = 'Git-2.41.0-64-bit.exe'
$silentArgs = "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/NOCANCEL", "/SP-", "/LOG", (Get-InstallComponents $pp)
$silentArgs += Get-InstallOptions $pp

$packageArgs = @{
    PackageName    = 'git.install'
    FileType       = 'exe'
    SoftwareName   = 'Git'
    File           = Get-Item $toolsPath\$fileName32
    File64         = Get-Item $toolsPath\$fileName64
    SilentArgs     = $silentArgs
}
Install-ChocolateyInstallPackage @packageArgs
Get-ChildItem $toolsPath\$fileName32, $toolsPath\$fileName64 | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" '' } }

$packageName = $packageArgs.packageName
$installLocation = Get-AppInstallLocation $packageArgs.SoftwareName
if (!$installLocation)  { Write-Warning "Can't find $packageName install location" }
else { Write-Host "$packageName installed to '$installLocation'" }

if ($pp.NoCredentialManager) {
    Write-Host "Git credential manager will be disabled."
    Install-ChocolateyEnvironmentVariable GCM_VALIDATE 'false'
}
C:\ProgramData\chocolatey\lib\GoogleChrome\tools\chocolateyInstall.ps1
$toolsPath = Split-Path $MyInvocation.MyCommand.Definition
. $toolsPath\helpers.ps1

$version = '114.0.5735.199'
if ($version -eq (Get-ChromeVersion)) {
  Write-Host "Google Chrome $version is already installed."
  return
}

$packageArgs = @{
  packageName            = 'googlechrome'
  fileType               = 'MSI'
  url                    = 'https://dl.google.com/tag/s/dl/chrome/install/googlechromestandaloneenterprise.msi'
  url64bit               = 'https://dl.google.com/tag/s/dl/chrome/install/googlechromestandaloneenterprise64.msi'
  checksum               = '455a4ad2f39f8e3817d3e5831bf8e0be81bf3c7ad16025226fc3ef320bdcf1b0'
  checksum64             = '6cf6084f8504f6879266e906048babaf84c0575c56f58db8e71fb33da92acbda'
  checksumType           = 'sha256'
  checksumType64         = 'sha256'
  silentArgs             = "/quiet /norestart /l*v `"$($env:TEMP)\$($env:chocolateyPackageName).$($env:chocolateyPackageVersion).MsiInstall.log`""
  validExitCodes         = @(0)
}

if (Get-Chrome32bitInstalled) { 'url64bit', 'checksum64', 'checksumType64' | ForEach-Object { $packageArgs.Remove($_) } }
Install-ChocolateyPackage @packageArgs
C:\ProgramData\chocolatey\lib\googledrive\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
$toolsDir = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
. $toolsDir\helpers.ps1

[version] $softwareVersion = '77.0.3.0'
$installedVersion = Get-InstalledVersion

if ($installedVersion -eq $softwareVersion -and !$env:ChocolateyForce) {
  Write-Output "Google Drive $version is already installed. Skipping download and installation."
}
else {
  if ($softwareVersion -le $installedVersion) {
    Write-Output "Current installed version (v$installedVersion) must be uninstalled first..."
    Uninstall-CurrentVersion
    throw 'Windows must be rebooted before installation can be completed!'
  }

  $url = 'https://dl.google.com/drive-file-stream/GoogleDriveSetup.exe'
  $checksum = '0BB3591D46E810672BBA68C75096F4FE1D05C2142296E6F456BB270FEDB95A23'
  $checksumType = 'sha256'

  $packageArgs = @{
    packageName    = $env:ChocolateyPackageName
    unzipLocation  = $toolsDir
    fileType       = 'exe'
    url            = $url
    checksum       = $checksum
    checksumType   = $checksumType
    softwareName   = 'Google Drive*'
    silentArgs     = "--silent --desktop_shortcut"
    validExitCodes = @(0, 1641, 3010)
  }

  $pp = Get-PackageParameters
  if ($pp.NoStart) {
    $packageArgs['silentArgs'] += ' --skip_launch_new'
  }
  if ($pp.NoGsuiteIcons) {
    $packageArgs['silentArgs'] += ' --gsuite_shortcuts=false'
  }

  Install-ChocolateyPackage @packageArgs
}
C:\ProgramData\chocolatey\lib\Gpg4win\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

Get-Service dirmngr -ea 0 | Stop-Service

$toolsPath = Split-Path $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName    = 'gpg4win'
  fileType       = $fileType
  file           = Get-Item $toolsPath\*.exe
  silentArgs     = '/S'
  validExitCodes = @(0)
  softwareName   = 'Gpg4Win *'
}

$pp = Get-PackageParameters

if ($pp['Config']) {
  Write-Host "Using passed configuration file..."
  $packageArgs["silentArgs"] = "/S /C=$($pp["Config"])"
}

Install-ChocolateyInstallPackage @packageArgs
Get-ChildItem $toolsPath\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { New-Item -ItemType File -Path "$_.ignore" '' }}
C:\ProgramData\chocolatey\lib\Graphviz\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName    = 'graphviz'
  fileType       = 'exe'
  file64         = "$toolsPath\graphviz-8.1.0 (64-bit) EXE installer.exe"
  silentArgs     = '/S'
  validExitCodes = @(0)
  softwareName   = 'Graphviz*'
}

Install-ChocolateyPackage @packageArgs
Remove-Item $toolsPath\*.exe -ea 0

$packageName = $packageArgs.packageName
$installLocation = Get-AppInstallLocation $packageArgs.softwareName
if (!$installLocation)  { Write-Warning "Can't find $packageName install location"; return }
Write-Host "$packageName installed to '$installLocation'"

Get-ChildItem "$installLocation\bin" -Filter "*.exe" | ForEach-Object {
    Write-Debug "File to be shimmed: $($_.Name)"
    Install-BinFile $_.BaseName $_.FullName
}
C:\ProgramData\chocolatey\lib\hwinfo.install\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop'
$toolsDir = "$(Split-Path -Parent $MyInvocation.MyCommand.Definition)"

$packageArgs = @{
  packageName  = 'hwinfo.install'
  fileType     = 'EXE'
  file         = "$toolsDir\hwi.exe"
  file64       = "$file"
  softwareName = 'HWiNFO*'
  silentArgs   = '/VERYSILENT /SUPPRESSMSGBOXES /NORESTART'
}

# Stop process before upgrading
if ($null -ne (Get-Process | Where-Object -Property Name -Match 'HWiNFO\d{2}')) {
  Get-Process | Where-Object -Property Name -Match 'HWiNFO\d{2}' | Stop-Process
  $ProcessRunning = $true
}

Install-ChocolateyInstallPackage @packageArgs
Remove-Item -Force "$toolsDir\*.exe" -ea 0
# Kill the process after it starts- there is no way to prevent autostart after install
if ($null -eq $ProcessRunning) {
  Get-Process | Where-Object -Property Name -Match 'HWiNFO\d{2}' | Stop-Process
}

# Make launchable from cmd
if (Get-OSArchitectureWidth -compare 64) { $bitness = 64 } else { $bitness = 32 }
Install-BinFile -Name 'hwinfo' -Path "C:\Program Files\HWiNFO$bitness\HWiNFO$bitness.EXE" -UseStart
C:\ProgramData\chocolatey\lib\hwinfo\tools\chocolateyInstall.ps1
#Install-VirtualPackage 'HWiNFO.portable' 'HWiNFO.install'
C:\ProgramData\chocolatey\lib\dotnet-6.0-desktopruntime\tools\ChocolateyInstall.ps1
$ErrorActionPreference = 'Stop'
Set-StrictMode -Version 2

$data = & (Join-Path -Path (Split-Path -Path $MyInvocation.MyCommand.Path) -ChildPath data.ps1)

function Test-Skip32BitRequested
{
    return $Env:chocolateyPackageParameters -like '*Skip32Bit*'
}

function Test-PassiveRequested
{
    return $Env:chocolateyPackageParameters -like '*Passive*'
}

function Test-OsSupports32Bit
{
    $cmdGetWindowsOptionalFeature = Get-Command -Name 'Get-WindowsOptionalFeature' -ErrorAction 'SilentlyContinue'
    if ($null -eq $cmdGetWindowsOptionalFeature) {
        Write-Debug 'Get-WindowsOptionalFeature command not found, assuming legacy OS and 32-bit support always present'
        return $true
    }
    $wow64 = Get-WindowsOptionalFeature -Online -FeatureName 'ServerCore-WOW64' -ErrorAction 'SilentlyContinue'
    if ($null -eq $wow64) {
        Write-Debug 'ServerCore-WOW64 feature not found, assuming client or legacy server OS and 32-bit support always present'
        return $true
    }
    Write-Debug "ServerCore-WOW64 feature state is: $($wow64.State)"
    return ($wow64.State -eq 'Enabled')
}

function Get-PassiveOrQuietArgument
{
    [CmdletBinding()]
    Param (
        [string] $Scenario = 'installation'
    )
    if (Test-PassiveRequested) {
        Write-Verbose "Performing an $Scenario with visible progress window, as requested."
        $passiveOrQuiet = 'passive'
    } else {
        Write-Verbose "Performing a quiet $Scenario (default)."
        $passiveOrQuiet = 'quiet'
    }
    return $passiveOrQuiet
}

$shouldInstall32Bit = $false
if (Get-ProcessorBits -eq 64) {
    if (-not (Test-Skip32BitRequested)) {
        if (Test-OsSupports32Bit) {
            $shouldInstall32Bit = $true
        } else {
            Write-Host 'Installation of 32-bit version will be skipped because the WOW64 subsystem is not installed.'
            Write-Warning 'Because of a limitation of the .NET Core installer, even the 64-bit version will probably fail to install (https://github.com/dotnet/runtime/issues/3087).'
        }
    } else {
        Write-Host 'Installation of 32-bit version will be skipped, as requested by package parameters.'
    }
}

$passiveOrQuiet = Get-PassiveOrQuietArgument -Scenario 'installation'
$arguments = @{
    packageName = $data.PackageName
    silentArgs = "$($data.AdditionalArgumentsToInstaller) /install /$passiveOrQuiet /norestart /log ""${Env:TEMP}\$($data.PackageName)-$(Get-Date -Format 'yyyyMMddHHmmss').log"""
    validExitCodes = @(
        0, # success
        3010 # success, restart required
    )
    url = $data.Url
    checksum = $data.Checksum
    checksumType = $data.ChecksumType
}
$arguments64 = @{
    url64 = $data.Url64
    checksum64 = $data.Checksum64
    checksumType64 = $data.ChecksumType64
}

Set-StrictMode -Off
Install-ChocolateyPackage @arguments @arguments64
if ($shouldInstall32Bit) {
    Install-ChocolateyPackage @arguments
}
C:\ProgramData\chocolatey\lib\ilspy\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsDir = Split-Path -Parent $MyInvocation.MyCommand.Definition

# *** Automatically filled ***
$fileType    = 'zip'
$packageArgs = @{
    packageName = 'ilspy'
    destination = $toolsDir
}
# *** Automatically filled ***

$packageArgs.file = Get-Item ("$toolsDir\*.{0}" -f $fileType)

Get-ChocolateyUnzip @packageArgs
Remove-Item $packageArgs.file -ErrorAction SilentlyContinue

New-Item "$toolsDir\ilspy.exe.gui" -Type File -Force | Out-Null

$shortcutPath = Join-Path $([Environment]::GetFolderPath([System.Environment+SpecialFolder]::CommonPrograms)) 'ILSpy.lnk'
if (-not (Test-Path $shortcutPath)) {
    Install-ChocolateyShortcut -ShortcutFilePath $shortcutPath -TargetPath "$toolsDir\ilspy.exe"
}
C:\ProgramData\chocolatey\lib\invoke-build\tools\chocolateyInstall.ps1
$toolsDir = Split-Path $MyInvocation.MyCommand.Definition
$moduleName = 'InvokeBuild'

Write-Host "Installing module $moduleName to $Env:ProgramFiles\WindowsPowerShell\Modules"
$destination = "$Env:ProgramFiles\WindowsPowerShell\Modules\$moduleName\"
if ($PSVersionTable.PSVersion.Major -lt 5)
{
    $source = "$toolsDir\$moduleName\*\*"
} else {
    $source = "$toolsDir\$moduleName\*"
}

# Copy-Item results differ depending on if destination exists or not
if (-not (Test-Path $destination)) {
    mkdir $destination | Out-Null
}
cp $source $destination -Force -Recurse
C:\ProgramData\chocolatey\lib\jetbrains-rider\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop';

$toolsDir     = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$url          = 'https://download.jetbrains.com/rider/JetBrains.Rider-2023.1.3.exe'
$checksum     = 'abf6a0bc8a9a96fc2c58f9987c3d2e25cb763f848743501f0d1c905cdbf0fb8e'
$checksumType = 'sha256'

# Workaround for https://youtrack.jetbrains.com/issue/IDEA-202935
$programfiles = (${env:ProgramFiles(x86)}, ${env:ProgramFiles} -ne $null)[0]
New-Item -ItemType Directory -Force -Path $programfiles\JetBrains
 
$packageArgs = @{
  packageName   = $env:ChocolateyPackageName
  softwareName  = 'Jetbrains Rider*'
  fileType      = 'exe'
  silentArgs    = "/S /CONFIG=$toolsDir\silent.config "
  validExitCodes = @(0)
  url            = $url
  checksum       = $checksum
  checksumType   = $checksumType
  destination   = $toolsDir
}

 Install-ChocolateyPackage @packageArgs	
C:\ProgramData\chocolatey\lib\jre8\tools\chocolateyInstall.ps1
try {

$arguments = @{}

  # Now we can use the $env:chocolateyPackageParameters inside the Chocolatey package
  $packageParameters = $env:chocolateyPackageParameters

  # Default value
  $exclude = $null

  # Now parse the packageParameters using good old regular expression
  if ($packageParameters) {
      $match_pattern = "\/(?<option>([a-zA-Z0-9]+)):(?<value>([`"'])?([a-zA-Z0-9- \(\)\s_\\:\.]+)([`"'])?)|\/(?<option>([a-zA-Z]+))"
      $option_name = 'option'
      $value_name = 'value'

      if ($packageParameters -match $match_pattern ){
          $results = $packageParameters | Select-String $match_pattern -AllMatches
          $results.matches | % {
            $arguments.Add(
                $_.Groups[$option_name].Value.Trim(),
                $_.Groups[$value_name].Value.Trim())
        }
      }
      else
      {
          Throw "Package Parameters were found but were invalid (REGEX Failure)"
      }

      if($arguments.ContainsKey("exclude")) {
          Write-Host "exclude Argument Found"
          $exclude = $arguments["exclude"]
      }
      if($arguments.ContainsKey("64dir")) {
          Write-Host "64Dir Argument Found"
          $64dir = $arguments["64dir"]
      }
      if($arguments.ContainsKey("32dir")) {
          Write-Host "32Dir Argument Found"
          $32dir = $arguments["32dir"]
      }

  } else {
      Write-Debug "No Package Parameters Passed in"
  }

  $scriptDir = $(Split-Path -parent $MyInvocation.MyCommand.Definition)
  
  $packageName = 'jre8'
  # Modify these values -----------------------------------------------------
  # Find download URLs at http://www.java.com/en/download/manual.jsp
  $url = 'https://javadl.oracle.com/webapps/download/AutoDL?BundleId=248240_ce59cff5c23f4e2eaf4e778a117d4c5b'
  $checksum32 = '32EB91BC7933A1E99FB1416E60523ECFDE0811E5CDEB74B7877F457BF6DFEA3E'
  $url64 = 'https://javadl.oracle.com/webapps/download/AutoDL?BundleId=248242_ce59cff5c23f4e2eaf4e778a117d4c5b'
  $checksum64 = 'F583134252923916F89136C36EC9358B8C99C9A539AA9FAB4EB45806613A6C43'
  $oldVersion = '8.0.3610.9'
  $version = '8.0.3710.11'
  #--------------------------------------------------------------------------

  if ($64dir) { $64dir = "INSTALLDIR=`"$64dir`""; echo "64 dir detected at $64dir";}
  if ($32dir) { $32dir = "INSTALLDIR=`"$32dir`""; echo "32 dir detected at $32dir";}
  $homepath = $version -replace "(\d+\.\d+)\.(\d\d)(.*)",'jre1.$1_$2'
  $installerType = 'exe'
  $installArgs = "/s $32dir REBOOT=0 SPONSORS=0 AUTO_UPDATE=0"
  $installArgs64 = "/s $64dir REBOOT=0 SPONSORS=0 AUTO_UPDATE=0"
  $osBitness = Get-ProcessorBits
  $cachepath = "$env:temp\$packagename\$version"
  Write-Host "The software license has changed for Java and this software must be licensed for general business use. Please ensure your licensing is compliant before installing." -ForegroundColor white -BackgroundColor red
  #This checks to see if current version is already installed
  Write-Output "Checking to see if local install is already up to date..."
  try{
  $checkreg64 = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion | Where-Object { $_.DisplayName -like '*Java 8*' -and ([Version]$_.DisplayVersion) -eq $version} -ErrorAction SilentlyContinue
  $checkreg32 = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion | Where-Object { $_.DisplayName -like '*Java 8*' -and ([Version]$_.DisplayVersion) -eq $version} -ErrorAction SilentlyContinue
  }catch{
  Write-Output "Registry check failed. This is commonly caused by corrupt keys (Do you have netbeans installed?)"
  }

    # Checks if JRE 32/64-bit in the same version is already installed and if the user excluded 32-bit Java.
    # Otherwise it downloads and installs it.
    # This is to avoid unnecessary downloads and 1603 errors.
    if ($checkreg32 -ne $null) 
    {
      Write-Output "Java Runtime Environment $version (32-bit) is already installed. Skipping download and installation"
    } 
    elseif ($exclude -ne "32") 
    {
      Write-Output "Downloading 32-bit installer"
      Get-ChocolateyWebFile -packageName $packageName -fileFullPath "$cachepath\JRE8x86.exe" -url $url -checksum $checksum32 -checksumType 'SHA256'
      Write-Output "Installing JRE $version 32-bit"
      Install-ChocolateyInstallPackage -packageName JRE8 -fileType $installerType -silentArgs $installArgs -file "$cachepath\JRE8x86.exe"
    } 
    else 
    {
      Write-Output "Java Runtime Environment $Version (32-bit) excluded for installation"
    }

    # Only check for the 64-bit version if the system is 64-bit

    if ($osBitness -eq 64) 
    {
      if ($checkreg64 -ne $null) 
      {
        Write-Output "Java Runtime Environment $version (64-bit) is already installed. Skipping download and installation"
      } 
      elseif ($exclude -ne "64") 
      {
        Write-Output "Downloading 64-bit installer"
        Get-ChocolateyWebFile -packageName $packageName -fileFullPath "$cachepath\JRE8x64.exe" -url64 $url64 -checksum64 $checksum64 -checksumType 'SHA256'
        Write-Output "Installing JRE $version 64-bit"
        Install-ChocolateyInstallPackage -packageName JRE8 -fileType $installerType -silentArgs $installArgs64 -file64 "$cachepath\JRE8x64.exe"

       # Install-ChocolateyPackage $packageName $installerType $installArgs64 -url64bit "$env:temp\chocolatey\$packagename\$version\JRE8x64.exe" -checksum64 $checksum64 -checksumtype64 'sha256'
      } 
      else 
      {
        Write-Output "Java Runtime Environment $Version (64-bit) excluded for installation"
      }
    }
  
  #Uninstalls the previous version of Java if either version exists
  Write-Output "Searching if the previous version exists..."
  $checkoldreg64 = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, PSChildName | Where-Object { $_.DisplayName -like '*Java 8*' -and ([Version]$_.DisplayVersion) -eq $oldversion} -ErrorAction SilentlyContinue
  $checkoldreg32 = Get-ItemProperty HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, PSChildName | Where-Object { $_.DisplayName -like '*Java 8*' -and ([Version]$_.DisplayVersion) -eq $oldversion} -ErrorAction SilentlyContinue
 
  if($checkoldreg32 -ne $null) 
  {
     Write-Warning "Uninstalling JRE version $oldVersion 32bit"
     $32 = $checkoldreg32.PSChildName
     Start-ChocolateyProcessAsAdmin "/qn /norestart /X$32" -exeToRun "msiexec.exe" -validExitCodes @(0,1605,3010)
  }
  if($checkoldreg64 -ne $null)
  {
     Write-Warning "Uninstalling JRE version $oldVersion $osBitness bit" #Formatted weird because this is used if run on a x86 install
     $64 = $checkoldreg64.PSChildName
     Start-ChocolateyProcessAsAdmin "/qn /norestart /X$64" -exeToRun "msiexec.exe" -validExitCodes @(0,1605,3010)
  }
  $64dir = $null
  $32dir = $null
} catch {
  #Write-ChocolateyFailure $packageName $($_.Exception.Message)
  throw
}
C:\ProgramData\chocolatey\lib\keepass.install\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop';

$toolsDir = "$(Split-Path -Parent $MyInvocation.MyCommand.Definition)"

$packageArgs = @{
    packageName    = $env:ChocolateyPackageName
    file           = Join-Path -Path $toolsDir -ChildPath 'KeePass-Setup.exe'
    fileType       = 'EXE'
    silentArgs     = '/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-'
    validExitCodes = @(0)
}

Install-ChocolateyInstallPackage @packageArgs
C:\ProgramData\chocolatey\lib\Kindle\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop';

$packageArgs = @{
  packageName   = $env:ChocolateyPackageName
  fileType      = 'exe'
  url           = 'https://kindleforpc.s3.amazonaws.com/65535/KindleForPC-installer-1.40.65535.exe'
  checksum      = '03d4ca7a54ea01b1c0405e26e31008ef70ee19c1b13957badb661898528f724b'
  checksumType  = 'sha256'
  silentArgs    = '/S'
  validExitCodes= @(0)
}

Install-ChocolateyPackage @packageArgs
C:\ProgramData\chocolatey\lib\microsoft-windows-terminal\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop';

$toolsDir       = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$fileName       = "$toolsDir\Microsoft.WindowsTerminal_1.17.11461.0_8wekyb3d8bbwe.msixbundle"
$version        = "1.17.11461.0"
$PreRelease     = "False"

$WindowsVersion=[Environment]::OSVersion.Version
if ($WindowsVersion.Major -ne "10") {
  throw "This package requires Windows 10."
}
#The .msixbundle format is not supported on Windows 10 version 1709 and 1803. https://docs.microsoft.com/en-us/windows/msix/msix-1709-and-1803-support
$IsCorrectBuild=[Environment]::OSVersion.Version.Build
if ($IsCorrectBuild -lt "18362") {
  throw "This package requires at least Windows 10 version 1903/OS build 18362.x."
}

$AppxPackageName = "Microsoft.WindowsTerminal"

if ($PreRelease -match "True") {
  $AppxPackageName += "Preview"
}

[version]$AppxVer = (Get-AppxPackage -Name $AppxPackageName -AllUsers -PackageTypeFilter Bundle).Version

if ($AppxVer -gt [version]$version) {
  # you can't install an older version of an installed appx package, you'd need to remove it first
  Write-Warning "The installed $version version is newer than this package version, it may have autoupdated on your current OS..."
 } elseif ($AppxVer -Match [version]$version) {
    if($env:ChocolateyForce) {
      # you can't install the same version of an appx package, you need to remove it first
      Write-Host Removing already installed version first.
      Remove-AppxPackage -AllUsers -Package (Get-AppxPackage -Name $AppxPackageName -AllUsers -PackageTypeFilter Bundle)
    } else {
    Write-Host The $version version of Windows-Terminal is already installed. If you want to reinstall use --force
    return
  }
}

Add-ProvisionedAppPackage -Online -SkipLicense -PackagePath $fileName
C:\ProgramData\chocolatey\lib\netfx-4.7.2\tools\ChocolateyInstall.ps1
$version = '4.7.2'
$arguments = @{
    PackageName = "netfx-$version"
    Release = 461808
    Version = $version
    ProductNameWithVersion = "Microsoft .NET Framework $version"
    Url = 'https://download.visualstudio.microsoft.com/download/pr/1f5af042-d0e4-4002-9c59-9ba66bcf15f6/089f837de42708daacaae7c04b7494db/ndp472-kb4054530-x86-x64-allos-enu.exe'
    Checksum = '5CB624B97F9FD6D3895644C52231C9471CD88AACB57D6E198D3024A1839139F6'
    ChecksumType = 'sha256'
}

Install-DotNetFramework @arguments
C:\ProgramData\chocolatey\lib\notepadplusplus.install\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

if (Test-Path "$env:TEMP\npp.running") {
  $programRunning = Get-Content -Path "$env:TEMP\npp.running"
  Remove-Item "$env:TEMP\npp.running"
}

# Temporary code until we have at least one version with the before modify script
$process = Get-Process "Notepad++*" -ea 0

if ($process) {
  $processPath = $process | Where-Object { $_.Path } | Select-Object -First 1 -ExpandProperty Path
  Write-Host "Found Running instance of Notepad++. Stopping processes..."
  $process | Stop-Process
  $programRunning = $processPath
}


$toolsPath = Split-Path -parent $MyInvocation.MyCommand.Definition

$packageArgs = @{
  packageName    = $env:ChocolateyPackageName
  fileType       = 'exe'
  file           = "$toolsPath\npp.8.5.4.Installer.exe"
  file64         = "$toolsPath\npp.8.5.4.Installer.x64.exe"
  softwareName   = 'Notepad\+\+*'
  silentArgs     = '/S'
  validExitCodes = @(0)
}

Install-ChocolateyInstallPackage @packageArgs

Get-ChildItem $toolsPath\*.exe | ForEach-Object { Remove-Item $_ -ea 0; if (Test-Path $_) { Set-Content "$_.ignore" '' } }

$installLocation = Get-AppInstallLocation $packageArgs.softwareName
if (!$installLocation)  {  Write-Warning "Can't find $PackageName install location"; return }

Write-Host "$packageName installed to '$installLocation'"
Install-BinFile -Path "$installLocation\notepad++.exe" -Name 'notepad++'

if ($programRunning -and (Test-Path $programRunning)) {
  Write-Host "Running stopped program"
  Start-Process $programRunning
}
C:\ProgramData\chocolatey\lib\notepadplusplus\tools\chocolateyInstall.ps1
#Install-VirtualPackage 'notepadplusplus.commandline' 'notepadplusplus.install'
C:\ProgramData\chocolatey\lib\OpenSSL.Light\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path $MyInvocation.MyCommand.Definition

$pp = Get-PackageParameters
$silentArgs =  '/silent','/sp-','/suppressmsgboxes'
$silentArgs += '/DIR="{0}"' -f $( if ($pp.InstallDir) { $pp.InstallDir } else { "$Env:ProgramFiles\OpenSSL" } )

$packageArgs = @{
  packageName    = 'OpenSSL.Light'
  fileType       = 'exe'
  file           = "$toolsPath\Win32OpenSSL_Light-3_1_1.exe"
  file64         = "$toolsPath\Win64OpenSSL_Light-3_1_1.exe"
  softwareName   = 'OpenSSL*Light*'
  silentArgs     = $silentArgs
  validExitCodes = @(0)
}

Install-ChocolateyInstallPackage @packageArgs
Remove-Item -Force -ea 0 "$toolsPath\*.exe","$toolsPath\*.ignore"

$installLocation = Get-AppInstallLocation $packageArgs.softwareName
if (!$installLocation)  { Write-Warning "Can't find install location, PATH not updated"; return }
Write-Host "Installed to '$installLocation'"

Install-ChocolateyPath -PathToInstall "$installLocation\bin" -PathType Machine
C:\ProgramData\chocolatey\lib\perfview\tools\chocolateyinstall.ps1
$name = 'PerfView'
$url = 'https://github.com/microsoft/perfview/releases/download/v3.1.3/PerfView.exe'
$checksum ='D8D5E541B4939348AA72704AAF29E0362B7F5ECA3C62825BFA57422B05B35821'
$toolsDir = "$(Split-Path -Parent $MyInvocation.MyCommand.Definition)"

Get-ChocolateyWebFile -PackageName PerfView -FileFullPath "$toolsDir\PerfView.exe" -url $url -checksum $checksum -checksumType 'sha256'
C:\ProgramData\chocolatey\lib\pester\chocolateyInstall.ps1
[CmdletBinding()]
param ( )

end {
    $modulePath = Join-Path -Path $env:ProgramFiles -ChildPath WindowsPowerShell\Modules
    $targetDirectory = Join-Path -Path $modulePath -ChildPath Pester
    $scriptRoot = Split-Path -Path $MyInvocation.MyCommand.Path -Parent
    $sourceDirectory = Join-Path -Path $scriptRoot -ChildPath Tools

    if ($PSVersionTable.PSVersion.Major -ge 5) {
        $manifestFile = Join-Path -Path $sourceDirectory -ChildPath Pester.psd1
        $manifest = Test-ModuleManifest -Path $manifestFile -WarningAction Ignore -ErrorAction Stop
        $targetDirectory = Join-Path -Path $targetDirectory -ChildPath $manifest.Version.ToString()
    }

    Update-Directory -Source $sourceDirectory -Destination $targetDirectory

    $binPath = Join-Path -Path $targetDirectory -ChildPath bin
    Install-ChocolateyPath $binPath

    if ($PSVersionTable.PSVersion.Major -lt 4) {
        $modulePaths = [Environment]::GetEnvironmentVariable('PSModulePath', 'Machine') -split ';'
        if ($modulePaths -notcontains $modulePath) {
            Write-Verbose -Message "Adding '$modulePath' to PSModulePath."

            $modulePaths = @(
                $modulePath
                $modulePaths
            )

            $newModulePath = $modulePaths -join ';'

            [Environment]::SetEnvironmentVariable('PSModulePath', $newModulePath, 'Machine')
            $env:PSModulePath += ";$modulePath"
        }
    }
}

begin {
    function Update-Directory {
        [CmdletBinding()]
        param (
            [Parameter(Mandatory = $true)]
            [string] $Source,

            [Parameter(Mandatory = $true)]
            [string] $Destination
        )

        $Source = $PSCmdlet.GetUnresolvedProviderPathFromPSPath($Source)
        $Destination = $PSCmdlet.GetUnresolvedProviderPathFromPSPath($Destination)

        if (-not (Test-Path -LiteralPath $Destination)) {
            $null = New-Item -Path $Destination -ItemType Directory -ErrorAction Stop
        }

        try {
            $sourceItem = Get-Item -LiteralPath $Source -ErrorAction Stop
            $destItem = Get-Item -LiteralPath $Destination -ErrorAction Stop

            if ($sourceItem -isnot [System.IO.DirectoryInfo] -or $destItem -isnot [System.IO.DirectoryInfo]) {
                throw 'Not Directory Info'
            }
        }
        catch {
            throw 'Both Source and Destination must be directory paths.'
        }

        $sourceFiles = Get-ChildItem -Path $Source -Recurse |
            Where-Object -FilterScript { -not $_.PSIsContainer }

        foreach ($sourceFile in $sourceFiles) {
            $relativePath = Get-RelativePath $sourceFile.FullName -RelativeTo $Source
            $targetPath = Join-Path -Path $Destination -ChildPath $relativePath

            $sourceHash = Get-FileHash -Path $sourceFile.FullName
            $destHash = Get-FileHash -Path $targetPath

            if ($sourceHash -ne $destHash) {
                $targetParent = Split-Path -Path $targetPath -Parent

                if (-not (Test-Path -Path $targetParent -PathType Container)) {
                    $null = New-Item -Path $targetParent -ItemType Directory -ErrorAction Stop
                }

                Write-Verbose -Message "Updating file $relativePath to new version."
                Copy-Item -Path $sourceFile.FullName -Destination $targetPath -Force -ErrorAction Stop
            }
        }

        $targetFiles = Get-ChildItem -Path $Destination -Recurse |
            Where-Object -FilterScript { -not $_.PSIsContainer }

        foreach ($targetFile in $targetFiles) {
            $relativePath = Get-RelativePath $targetFile.FullName -RelativeTo $Destination
            $sourcePath = Join-Path -Path $Source -ChildPath $relativePath

            if (-not (Test-Path $sourcePath -PathType Leaf)) {
                Write-Verbose -Message "Removing unknown file $relativePath from module folder."
                Remove-Item -LiteralPath $targetFile.FullName -Force -ErrorAction Stop
            }
        }

    }

    function Get-RelativePath {
        param ( [string] $Path, [string] $RelativeTo )
        return $Path -replace "^$([regex]::Escape($RelativeTo))\\?"
    }

    function Get-FileHash {
        param ([string] $Path)

        if (-not (Test-Path -LiteralPath $Path -PathType Leaf)) {
            return $null
        }

        $item = Get-Item -LiteralPath $Path
        if ($item -isnot [System.IO.FileSystemInfo]) {
            return $null
        }

        $stream = $null

        try {
            $sha = [System.Security.Cryptography.SHA256CryptoServiceProvider]::Create()
            $stream = $item.OpenRead()
            $bytes = $sha.ComputeHash($stream)
            return [convert]::ToBase64String($bytes)
        }
        finally {
            if ($null -ne $stream) {
                $stream.Close()
            }
            if ($null -ne $sha) {
                $sha.Clear()
            }
        }
    }
}
C:\ProgramData\chocolatey\lib\plantuml\tools\chocolateyInstall.ps1
$ErrorActionPreference = 'Stop'

$toolsPath = Split-Path $MyInvocation.MyCommand.Definition
. $toolsPath\helper.ps1

Update-SessionEnvironment   # Java might have been installed as dependency

$java_path, $javaw_path = Get-JavaPaths
$java_args = '-Dfile.encoding=UTF-8 -jar "{0}"' -f "$toolsPath\plantuml.jar"
Write-Host "Java path: $(Split-Path $javaw_path)"
Write-Host "Java args: $java_args"

$pp = Get-PackageParameters

Install-PumlToolsShortcut
Install-PumlBinaryW
Install-PumlBinary
if (!$pp.NoShortcuts) { Install-PumlDesktopShortcuts }
C:\ProgramData\chocolatey\lib\powershell-core\tools\chocolateyinstall.ps1
$ErrorActionPreference = 'Stop';

$packageName= 'powershell-core'
$fileType = 'msi'
$toolsDir   = "$(Split-Path -parent $MyInvocation.MyCommand.Definition)"
$Version = '7.3.6'

# Flag whether we're being invoked by AU module
[bool] $runningAU = (Test-Path Function:\au_GetLatest)

if (-not $runningAU) {
  Try {
    [Version]$Version
    $InstallFolder = "$env:ProgramFiles\PowerShell\$($version.split('.')[0])"
    If (Test-Path "$InstallFolder\pwsh.exe")
    {
      If ((get-command "$InstallFolder\pwsh.exe").version -ge [version]$Version)
      {
        Write-output "The version of PowerShell in this package ($Version) is already installed by another means, marking package as installed"
        Exit 0
      }
    }  
  }
  Catch {
    Write-output "Note: This is a prelease package"
    $PreleasePackage = $true
    $InstallFolder = "$env:ProgramFiles\PowerShell\$($version.split('.')[0])-preview"
  }
}


$packageArgs = @{
  packageName   = $packageName
  unzipLocation = $toolsDir
  fileType      = $fileType
  url64      = 'https://github.com/PowerShell/PowerShell/releases/download/v7.3.6/PowerShell-7.3.6-win-x64.msi'
  checksum64    = '758e130dc13708a72cee29db0b8efd987376a4a4a22114c3b00d50cf7295d35e'
  checksumType64= 'sha256'
  url           = 'https://github.com/PowerShell/PowerShell/releases/download/v7.3.6/PowerShell-7.3.6-win-x86.msi'
  checksum      = '0d295f1ae6b6f0a5531ac33df0a98126175312fc85252c77738d38cf28aa18ee'
  checksumType  = 'sha256'
  silentArgs    = '/qn', '/norestart', "/l*v `"$($env:TEMP)\$($packageName).$($env:chocolateyPackageVersion).MsiInstall.log`"" # ALLUSERS=1 DISABLEDESKTOPSHORTCUT=1 ADDDESKTOPICON=0 ADDSTARTMENU=0
  validExitCodes= @(0, 3010, 1641)
  softwareName  = "PowerShell-7.*"
}

$pp = Get-PackageParameters

$pp.Keys.ForEach({
switch -RegEx ($_) {
'^CleanUpPath$'
  {
    Write-Host "/CleanUpSystemPath was used, removing all PowerShell Core path entries before installing"
    & "$toolsDir\Reset-PWSHSystemPath.ps1" -PathScope Machine, User -RemoveAllOccurances
    break
  }

'^(ADD_PATH)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(REGISTER_MANIFEST)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(ENABLE_PSREMOTING)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(ADD_FILE_CONTEXT_MENU_RUNPOWERSHELL)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(USE_MU)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

'^(ENABLE_MU)(=0|1)?"?$'
  { $packageArgs.silentArgs += ,($Matches[1] + @('=1',$Matches[2])[$Matches[2] -ne $null]); break }

default { Write-Error 'Parameter not recognized, halting...' -ErrorAction Stop } 
}})

if ($pp.Keys -notlike '*USE_MU*') { $packageArgs.silentArgs += ,"USE_MU=0" }
if ($pp.Keys -notlike '*ENABLE_MU*') { $packageArgs.silentArgs += ,"ENABLE_MU=0" }

Write-Warning "If you started this package under PowerShell core, replacing an in-use version may be unpredictable, require multiple attempts or produce errors."

Install-ChocolateyPackage @packageArgs

Write-Output "************************************************************************************"
Write-Output "*  INSTRUCTIONS: Your system default WINDOWS PowerShell version has not been changed."
Write-Output "*   PowerShell CORE $version, was installed to: `"$installfolder`""
If ($PreleasePackage) {
Write-Output "*   To start PowerShell Core PRERELEASE $version, at a prompt execute:"
Write-Output "*      `"$installfolder\pwsh.exe`""
Write-Output "*   IMPORTANT: Prereleases are not put on your path, nor made the default version of CORE."
}
else {
Write-Output "*   To start PowerShell Core $version, at a prompt or the start menu execute:"
Write-Output "*      `"pwsh.exe`""
Write-Output "*   Or start it from the desktop or start menu shortcut installed by this package."
Write-Output "*   This is your new default version of PowerShell CORE (pwsh.exe)."
}
Write-Output "************************************************************************************"

Write-Output "**************************************************************************************"
Write-Output "*  As of OpenSSH 0.0.22.0 Universal Installer, a script is distributed that allows   *"
Write-Output "*  setting the default shell for openssh. You could call it with code like this:     *"
Write-Output "*    If (Test-Path `"$env:programfiles\openssh-win64\Set-SSHDefaultShell.ps1`")         *"
Write-Output "*      {& `"$env:programfiles\openssh-win64\Set-SSHDefaultShell.ps1`" [PARAMETERS]}     *"
Write-Output "*  Learn more with this:                                                             *"
Write-Output "*    Get-Help `"$env:programfiles\openssh-win64\Set-SSHDefaultShell.ps1`"               *"
Write-Output "*  Or here:                                                                          *"
Write-Output "*    https://github.com/DarwinJS/ChocoPackages/blob/main/openssh/readme.md         *"
Write-Output "**************************************************************************************"
C:\ProgramData\chocolatey\lib-bad\brave\1.57.57\tools\chocolateyInstall.ps1
$toolsPath = Split-Path $MyInvocation.MyCommand.Definition
. $toolsPath\helpers.ps1

$packageArgs = @{
  packageName = $env:ChocolateyPackageName
  url         = 'https://github.com/brave/brave-browser/releases/download/v1.57.57/BraveBrowserStandaloneSilentSetup32.exe'
  checksum    = 'DC54CE0B264829256A60CA2D2D93368FFA8851CC50B9E8673789F85425D5BC01'
  checksumType= 'sha256'
  file64      = "$toolsPath\BraveBrowserStandaloneSilentSetup.exe"
}

[version]$softwareVersion = '1.57.57'

Write-Host "Checking already installed version..."
$installedVersion = Get-InstalledVersion

if ($installedVersion -and ($softwareVersion -lt $installedVersion)) {
  Write-Warning "Skipping installation because a later version than $softwareVersion is installed."
}
elseif ($installedVersion -and ($softwareVersion -eq $installedVersion)) {
  Write-Warning "Skipping installation because version $softwareVersion is already installed."
}
elseif ((Get-OSArchitectureWidth -compare 32) -or ($env:ChocolateyForceX86 -eq $true)) {
  Install-ChocolateyPackage @packageArgs
} else {
  Install-ChocolateyInstallPackage @packageArgs
}

Remove-Item $toolsPath\*.exe -ea 0
C:\Temp\ChocolateyCache\ChocolateyScratch\brave\1.57.57\tools\chocolateyInstall.ps1
$toolsPath = Split-Path $MyInvocation.MyCommand.Definition
. $toolsPath\helpers.ps1

$packageArgs = @{
  packageName = $env:ChocolateyPackageName
  url         = 'https://github.com/brave/brave-browser/releases/download/v1.57.57/BraveBrowserStandaloneSilentSetup32.exe'
  checksum    = 'DC54CE0B264829256A60CA2D2D93368FFA8851CC50B9E8673789F85425D5BC01'
  checksumType= 'sha256'
  file64      = "$toolsPath\BraveBrowserStandaloneSilentSetup.exe"
}

[version]$softwareVersion = '1.57.57'

Write-Host "Checking already installed version..."
$installedVersion = Get-InstalledVersion

if ($installedVersion -and ($softwareVersion -lt $installedVersion)) {
  Write-Warning "Skipping installation because a later version than $softwareVersion is installed."
}
elseif ($installedVersion -and ($softwareVersion -eq $installedVersion)) {
  Write-Warning "Skipping installation because version $softwareVersion is already installed."
}
elseif ((Get-OSArchitectureWidth -compare 32) -or ($env:ChocolateyForceX86 -eq $true)) {
  Install-ChocolateyPackage @packageArgs
} else {
  Install-ChocolateyInstallPackage @packageArgs
}

Remove-Item $toolsPath\*.exe -ea 0
