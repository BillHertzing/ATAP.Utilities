# install all drivers, choco packages, PowerShell modules, and Registry Settings
- name: Install it All
  hosts: all
  gather_facts: false
  tasks:
  #   # BIOS settings (per host)
  #   # utat022 - setup NCMe on PCIE ( PCIEX15(G4) Configuration ->Dual M.2 SSD
  #   # utat022 - Advanced -> SA -? graphics Primary Dispaly from Auto to PCIE # setup simultaneous GPU card in PCIE slot and the Intel IRIS integerated graphics
  #   # utat022 - Advanced->APM Configuration->Power On By PCI-E ->Enabled ## enables WakeOnLan
  #   # check for and run Windows updates
  #   - name: WindowsUpdateAndReboot
  #     ansible.windows.win_updates:
  #       name: WindowsUpdateAndReboot
  #       state: installed
  #       reboot: true
  #   # Need to add a way to keep the remote computer from going to sleep
  #  # selectHigh performance power plan (never sleeps)
  #  # - name:PreventSleeping

  #   # Windows Features
  #   - name: Microsoft-Hyper-V-All
  #     ansible.windows.win_optional_feature:
  #       name: Microsoft-Hyper-V-All
  #       state: present

  #   - name: Install Microsoft Subsystem for Linux
  #     ansible.windows.win_optional_feature:
  #       name: Microsoft-Windows-Subsystem-Linux
  #       state: present
  #     register: wsl_status

  #   - name: Reboot if installing Linux Subsytem as feature requires it
  #     ansible.windows.win_reboot:
  #     when:
  #       wsl_status.reboot_required

  #   # ToDo: set WSL2 as default

  #   # base chocolatey package and configuration
  #   - name: install chocolatey
  #     win_chocolatey:
  #       name: chocolatey
  #       state: present
  #   - name: configure chocolatey cache location
  #     win_chocolatey_config:
  #       name: cachelocation
  #       state: present
  #       value: "{{ chocolateycachelocation }}"
  #   # configure chocolatey to allow community packages ()'allowglobalconfirmation,allowemptychecksums,allowemptychecksumssecure,allowinsecureconfirmation,allowmultipleversions')
  #   - name: allow global confirmation when installing packages and their dependencies
  #     win_chocolatey_feature:
  #       name: allowglobalconfirmation
  #       state: disabled
  #   # configure chocolatey to install community extensions
  #   - name: install chocolatey-core.extension
  #     win_chocolatey:
  #       name: chocolatey-core.extension
  #       state: present


    # install the  chocolatey packages
    # - name: install the chocolatey packages
    #   win_chocolatey:
    #     name: "{{ item.name }}"
    #     # version: '{{ item.version }}'
    #     allow_prerelease: "{{ 'true' if (item.allowprerelease == 'true') else 'false'}}"
    #     state: "{{ 'absent' if (action_type == 'uninstall') else 'present'}}"
    #     # {% if item.addedparameters is defined and item.addedparameters|length %}
    #     # 'package_params: ' "{{ item.addedparameters }}"
    #     # {% endif %}
    #   failed_when: false # setting this means if one package fails, the loop will continue. you can remove it if you don't want that behaviour.
    #   loop:
    #     # drivers for utat022
    #     - {name: nvidia-display-driver, version: latest, allowprerelease: false, addedparameters: ,  Notes:} # minimal set of nvidea display fdriver apps
        # - { name: geforce-game-ready-driver, version: latest, allowprerelease: false, addedparameters: ,  Notes:} # bloatware, use nvidia-display-driver instead
        # - {name: geforce-experience, version: latest, allowprerelease: false, addedparameters: ,  Notes:} # need to investigate if needed
        #- {name: razer-synapse-3graph, version: latest, allowprerelease: false, addedparameters: ,  Notes:}
        # drivers for ncat016
        # - {name: logitechgaming, version: latest, allowprerelease: false, addedparameters:  } # for ncat016

        # $pkgs = gc c:\dropbox\whertzing\github\atap.iac\chocolateypackageinfo.yml| convertfrom-yaml
        # $pkgkeys = [system.collections.arraylist]($pkgs.keys)
        # copy addedparamter scriptblock
        # foreach ($pk in $pkgkeys) {"  - {name: $pk, version: latest, allowprerelease: false, addedparameters: $(. $addedparametersscriptblock $($p[$pk]).addedparamters)"}

        # Things that have to happen first
        # Install powershell core role
        #- {name: powershell-core, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vcredist-all, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: pester, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that obsolete version can be removed, settings and associations can be made per user
        #- {name: samsung-magician, version: latest, allowprerelease: false, addedparameters: , }

        # Things that make setting up a new computer easier if done first
        #- {name: autoruns, version: latest, allowprerelease: false, addedparameters: , } # investigate - throwing a side-by-side error during installation - something about a broken manifest
        #- {name: es, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that it can be run under a named service account, and configuration setting made per user
        #- {name: everything, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: googlechrome, version: latest, allowprerelease: false, addedparameters: , } # needs to be a role, with selenium to click on 'login to google', 'turn on sync', and maybe "grant an extension access to the microphone"
        #- {name: perfview, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: powertoys, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: sysinternals, version: latest, allowprerelease: false, addedparameters: , }

        # Get Visual Studio code (VSC) up and running
        #- {name: visualstudio-installer, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that settings and associations can be made per user
        #- {name: vscode-codespellchecker, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-csharp, version: latest, allowprerelease: false, addedparameters: , }
        #  # deprecated - {name: vscode-csharpextensions, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-drawio, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-editorconfig, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-gitattributes, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-gitignore, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-gitlens, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-icons, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-vsliveshare, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-markdownlint, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-mssql, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-powershell, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-prettier, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-ruby, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-test-explorer, version: latest, allowprerelease: false, addedparameters: , }
        ## - { name: vscode-test-explorer-liveshare, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vscode-yaml, version: latest, allowprerelease: false, addedparameters: , }

        # Things that are nice to have if done early
        #- {name: steam, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that settings and associations can be made per user
        #- {name: steam-client, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that settings and associations can be made per user

       # order irrelevant
        #- {name: 7zip, version: latest, allowprerelease: false, addedparameters: , }  # move to a role so that associations can be made per user
        ## - {name: adoptopenjdkjre, version: latest, allowprerelease: false, addedparameters: , } # this package needs to be moved to the JavascriptInterpreterWindows role
        #- {name: audacity, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: audacity-ffmpeg, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: audacity-lame, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: autohotkey, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: beyondcompare, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that license can be added
        #- {name: blender, version: latest, allowprerelease: false, addedparameters: , } # investigate why this seemsto have hanged when being run the first time
        #- {name: brave, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: carbon, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: choco-package-list-backup, version: latest, allowprerelease: false, addedparameters: , }  # need to set configuration options
        #- {name: cinebench, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: cpu-z, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: cura-new, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: dbachecks, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: dbatools, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: discord, version: latest, allowprerelease: false, addedparameters: , }  # move to a role so that it can do first login per user. as installed it autostarts.
        #- {name: docfx, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: dotultimate, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that license can be added, configuration changes, and first login
        #- {name: element-desktop, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: fiddler, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: firefox, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: flyway.commandline, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: freevideoeditor, version: latest, allowprerelease: false, addedparameters: , } # installs to 'FlashIntegro' see if there are package parameters to support installation to a different path : default to 'VSDC'
        #- {name: fusionplusplus, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: gh, version: latest, allowprerelease: false, addedparameters: , } # move to a role to allow for configuration setings
        #- {name: gimp, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: git, version: latest, allowprerelease: false, addedparameters: , } # move to a role to allow for configuration setings
        #- {name: gitter, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: gopro-quik, version: latest, allowprerelease: false, addedparameters: , } # investigate - installation hung here
        #- {name: gpg4win, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: gpu-z, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: grammarly, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: grammarly-chrome, version: latest, allowprerelease: false, addedparameters: , } # role with selenium to see if it has been installed from a sync, but needs to get installed if the networkd computers don't have it (assuming it is part of an Ansible group)
        #- {name: grammarly-for-windows, version: latest, allowprerelease: false, addedparameters: , } # role with selenium to see if it has been installed from a sync, but needs to get installed if the networkd computers don't have it (assuming it is part of an Ansible group)  See chatgpt history. 'mic access via WebAPI'
        #- {name: graphviz, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: hwinfo, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: ilspy, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that associations can be made per user
        #- {name: invoke-build, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that symbolic links can be made per user
        #- {name: jetbrains-rider, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that license can be added
        #- {name: keep-chrome, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: keepass, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: linqpad, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: linqpad6, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: linqpad7, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: msbuild-structured-log-viewer, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: msys2, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: mysql, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: mysql.workbench, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: ngrok, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: nmap, version: latest, allowprerelease: false, addedparameters: , } # investiggate - installation hung here
        #- {name: nordvpn, version: latest, allowprerelease: false, addedparameters: , } # requires restart and then login after installation
        #- {name: notepadplusplus, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that settings and associations can be made per user
        #- {name: nssm, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: nuget.commandline, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: nugetpackageexplorer, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that settings and associations can be made per user
        #- {name: office365proplus, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that license can be added
        #- {name: openssl.light, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: pdq-inventory, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: plantuml, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: plaster, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: postman, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: pushbullet, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that settings and associations can be made per user
        #- {name: putty, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: putty.portable, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: resharper-platform, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that license can be added
        #- {name: ruby, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that multiple interpreters can be supported
        #- {name: rufus, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: sentinel, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: sharex, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that settings and associations can be made per user
        #- {name: speedtest, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: sql-server-management-studio, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: sqlite, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: temurinjre, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that multiple interpreters can be supported
        #- {name: tineye-chrome, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: vault, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that settings and associations can be made per user
        #- {name: vlc, version: latest, allowprerelease: false, addedparameters: , } # move to a role so that associations can be made per user
        #- {name: wireshark, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: xunit, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: xnviewmp, version: latest, allowprerelease: false, addedparameters: , }
        #- {name: zoom, version: latest, allowprerelease: false, addedparameters: , }

   # $mods = gc c:\dropbox\whertzing\github\atap.iac\powershellmoduleinfo.yml| convertfrom-yaml
   # $modkeys = [system.collections.arraylist]($mods.keys) | sort
   # foreach ($m in $modkeys) {"  - {name: $m, version: latest }"}

   # - name: Trust the PSGallery
   # Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
   # ensure the win_psmodule uses the latest TLS protocol for downloading [Net.ServicePointManager]::SecurityProtocol = "tls12"

    #- name: install the modules defined for each group
    #  community.windows.win_psmodule:
    #    name: "{{ item.name }}"
    #    state: "{{ 'absent' if (action_type == 'uninstall') else 'present'}}"
    #    # version: "{{ item.version }}"
    #    allow_prerelease: "{{ item.allowprerelease }}"
    #  loop:
    #    - { name: assert, version: latest, allowprerelease: false }
    #    - { name: chocolateyget, version: latest, allowprerelease: false }
    #    - { name: cimcmdlets, version: latest, allowprerelease: false }
    #    - { name: computermanagementdsc, version: latest, allowprerelease: false }
    #    - { name: dbachecks, version: latest, allowprerelease: false }
    #    - { name: dbatools, version: latest, allowprerelease: false }
    #    - { name: invokebuild, version: latest, allowprerelease: false }
    #    - { name: microsoft.powershell.archive, version: latest, allowprerelease: false }
    #    - { name: microsoft.powershell.diagnostics, version: latest, allowprerelease: false }
    #    - { name: microsoft.powershell.host, version: latest, allowprerelease: false }
    #    - { name: microsoft.powershell.management, version: latest, allowprerelease: false }
    #    - { name: microsoft.powershell.operation.validation, version: latest, allowprerelease: false }
    #    - { name: microsoft.powershell.secretmanagement, version: latest, allowprerelease: false }
    #    - { name: microsoft.powershell.secretstore, version: latest, allowprerelease: false }
    #    - { name: microsoft.powershell.security, version: latest, allowprerelease: false }
    #    - { name: microsoft.powershell.utility, version: latest, allowprerelease: false }
    #    - { name: microsoft.wsman.management, version: latest, allowprerelease: false }
    #    - { name: nuget, version: latest, allowprerelease: false }
    #    - { name: packagemanagement, version: latest, allowprerelease: false }
    #    - { name: pester, version: latest, allowprerelease: false }
    #    - { name: plaster, version: latest, allowprerelease: false }
    #    - { name: platyps, version: latest, allowprerelease: false }
    #    - { name: powershell-yaml, version: latest, allowprerelease: false }
    #    - { name: powershellget, version: latest, allowprerelease: false }
    #    - { name: psdepend, version: latest, allowprerelease: false }
    #    - { name: psdesiredstateconfiguration, version: latest , allowprerelease: false}
    #    - { name: psdiagnostics, version: latest, allowprerelease: false }
    #    - { name: psdscresources, version: latest, allowprerelease: false }
    #    - { name: psframework, version: latest, allowprerelease: false }
    #    - { name: psneo4j, version: latest, allowprerelease: false }
    #    - { name: psreadline, version: latest, allowprerelease: false }
    #    - { name: psscriptanalyzer, version: latest, allowprerelease: false }
    #    - { name: secretmanagement.hashicorp.vault.kv, version: latest, allowprerelease: false }
    #    - { name: secretmanagement.keepass, version: latest, allowprerelease: false }
    #    - { name: sqlserver, version: latest, allowprerelease: false }
    #    - { name: threadjob, version: latest, allowprerelease: false }

        # Define and Trust the ATAP.Utilities production repository
        #  Set-PSRepository -Name ATAPProduction -InstallationPolicy Trusted -SourceLocation $global:settings[$global:configrootkeys['RepositoryNuGetFilesystemProductionPackagePathConfigRootKey']]
        #  #  ISSUE: Set-PSRepository requires the  -SourceLocation and ScriptSourceLocation to tbe the same and requires '\'s ''
        #  have to fix hostsettings
        # - Add all production ATAP utilities modules

        # Create local users (real people)
        # create whertzing

      # $rs = gc c:\dropbox\whertzing\github\atap.iac\registrysettingsinfo.yml| convertfrom-yaml
      # $rskeys = [system.collections.arraylist]($rs.keys) | sort
      # $user =  [system.collections.arraylist]::new()
      # $machine =  [system.collections.arraylist]::new()
      # foreach ($r in $rskeys) { if ($($rs[$r]).path -match 'hkcu'){$user += "      - $r"} else {$machine += "      - $r"}}
      # write-output       "user"
      # write-output       $user
      # write-output       "machine"
      # write-output       $machine

    # - name: load registry settings information json file
    #   set_fact:
    #     registry_properties: "{{ lookup('file', '/mnt/c/Dropbox/whertzing/GitHub/ATAP.Utilities/src/ATAP.IAC.Ansible/public/DefaultRegistrySettingsInfo.yml') | from_yaml }}"
    # - name: set registry values machine wide
    #   win_regedit:
    #     path: "{{ registry_properties[item]['path'] }}"
    #     name: "{{ registry_properties[item]['name'] }}"
    #     data: "{{ registry_properties[item]['data'] | default(none) }}"
    #     type: "{{ registry_properties[item]['type'] | default('dword') }}"
    #   loop:
    #     - DisableCortana
        #- DisableGameDVR
        #- DisableTelemetry
        #- EnableAutoTray
        ##- LaunchEdgeInIncognitoByDefault

    # [Stop Microsoft Edge from Opening on Startup: 4 Easy Ways](https://windowsreport.com/stop-microsoft-edge-from-opening-on-startup-windows-11/)
    # - disableEdgePreLoader
    # - disableEdgeAllowPrelaunch
    # - disableEdgeStartupBoost
    # - disableEdgeUpdateService
    # - disableEdgeUpdatemService
    # - disableMicrosoftNews
    # - disableMicrosoftWidgets
    # - disableMicrosoftMoviesAndTV
    # - disableBeyondCompareClipboardCompare
    # - disable User Access Control (UAC) for all members of the administrators group
    #     Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "EnableLUA"
    #     $admins = Get-LocalGroupMember -Group "Administrators"
    #     foreach ($admin in $admins) {
    #         Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "EnableLUA" -Value 0
    #     }

    # - name: set registry values per user
    #   win_regedit:
    #     path: "{{ registry_properties[item]['path'] }}"
    #     name: "{{ registry_properties[item]['name'] }}"
    #     data: "{{ registry_properties[item]['data']|default(none) }}"
    #     type: "{{ registry_properties[item]['type']|default('dword') }}"
    #     # ansible_become_user: whertzing
    #   loop:
    #     - ExplorerNavPaneShowAllFolders
    #     - ExplorerShowFileExt
    #     - ExplorerShowHiddenFilesAndFolders
    #     - ExplorerShowHiddenOSFiles
    #     - HideSyncProviderNotifications
    #     - RemoveShortcutFromNewShortcutFileName
    #     - StopAutomaticInstallationOfSuggestedWindows11Apps

        #- explorerdefaulttodetailsview
        #- pin terminal to taskbar
        #- pin VSC to taskbar
        #- pin Explorer to taskbar
        #- pin chrome to taskbar
        #- pin Brave to taskbar
        #- pin Everything to taskbar
        #- pin Notepad++ to taskbar
        #- pin Discord to taskbar
        # - remove Microsoft Store from taskbar
        # - remove Edge from Taskbar- remove teams/char from taskbar
        # - remove Edge from Desktop
        # - set UAC notification level
        # - disable microsoft Teams

    # ansible roles
    - name: include the following role on all the hosts in windowshosts
      include_role:
        name: "{{ item }}"
      loop:
        - roles/DittoClipboardManagerWindows
        #- roles/PythonInterpreterWindows
        #- roles/JavaInterpreterWindows
        #- roles/RubyInterpreterWindows
        #- roles/IISServerWindows
        #- roles/SQLServerWindows
        #- roles/MySQLWindows
        #- roles/JenkinsController
        #- roles/JenkinsAgentWindows
        #- roles/npcapWindows
        #    only available as an .exe installer download from https://npcap.com/dist/npcap-1.76.exe (use latest) then run .\npcap-1.76.exe as an administrator
        #    npcap installs as a service, but the companion servervice npcap-wifi is instaled but no started by default - change the service so it runs at hoststartup
        #- roles/WiresharkWindows
        #    Wireshark requires the  NPCAP software,
        #    login and select ethernet or ethernet-wifi  as initial interface to capture from
        #- roles/PDQAgentWindows
        #- roles/GitWindows
        #- roles/GitLFSWindows
        #   need to add GFitLFS to downloads and install it https://git-lfs.com/
        #   git lfs install
        #   git lfs track "*.safetensors"
        #   git lfs track "*.checkpoint"
        #   git add .gitattributes
        #   To use: git add file.psd
        #   To use: git commit -m "Add design file"
        #   To use: f:
        #   git push origin main
        #- roles/GitHubWindows
        #    add the user and passsword values via login or configuration file

        #- roles/AcronisCyberProtectHomeOfficeWindows # Backup Software, License required
        #  download AcronisCyberProtectHomeOffice.exe from ...

        #- roles/CobianReflectorBackupSoftwareWindows # Backup Software,Fre
        #  download crSetup-2.4.00.exe from [CobianSoftDownloadPage](https://www.cobiansoft.com/download.php?id=1)
        #  unblock
        #  scan for virus
        #  Install as administrator to "C:\Program Files\Cobian Reflector"
        #  Currently install as a service using System account, and autostart the interface. Will need a service account
        #  Eventually setup to allow remote communications with  laptop
        #  Set the temporary folder per-host (utat022 = F:\Temp\CobianReflectorBackup)
        #  Set the safe mirror folder per-host (utat022 = H:\CobianReflectorSafeMirror)
        #  Per-host tasks:
        #    For host utat022
        #      ToDo: figure out incremental backup and do it nightly, then delete after a full backup
        #      New Task -> HydrusBackupFull
        #        File->Source->Directory -> H:\Hydrus\
        #        File->Destination->Directory -> C:\Dropbox\HydrusBackup
        #        Weekly on Monday at 01:16am
        #        Split the archive into 512MB chunks

        #- roles/hydrus-networkWindows # Image database and tagger
        #    only install on one machine, that has the image files database local on an SSD
        #    choco install hydrus-network (will install to C:\Program Files\Hydrus Network\hydrus_client.exe
        #    options:
        #      (per user?)
        #      External programs C:\Users\whertzing\AppData\Local\BraveSoftware\Brave-Browser\Application\brave.exe "path%"
        #      (per host)
        #        for utat022
        #        identify the location of the database folder $HydrusDatabaseDirectory (for utat022, that is H:\Hydrus\HydrusDatabase )
        #        identify the location of the media files $HydrusMediaDirectory (for utat022, that is H:\HydrusThumbnailImages)
        #        identify the location of the thumbnails folder $HydrusThumbnailsDirectory (for utat022, that is H:\Hydrus\HydrusThumbnailImages )
        #    Create a new shortcut in the start folder that will start hydrus pointing to the database and thumbnails location
        #    The following command must be run with elevated permission
        #    New-ShortcutWithParameter -TargetPath "C:\Program Files\Hydrus Network\hydrus_client.exe" -ShortcutPath 'C:\Program Files\Hydrus Network\hydrus_client(utat022).lnk' -Parameter '-d H:\Hydrus\HydrusDatabase'
        #    pin the shortcut to the taskbar
        #    eventually Allow incoming request to hydrus-network through host firewall and network router
        #    Backups done with Cobian Reflecter
        #      setup scheduled task to incrementally backup everything nightly, to $HydrusBackupDirectory (for all hosts, C:\Dropbox\HydrusBackup)
        #      setup scheduled task to weekly periodically fsck the database and image dir
        #      setup scheduled task to weekly periodically validate the backups
        #      setup scheduled task to weekly create full backup and delete incrementals

        #- roles/StableDiffusionWindows
        #    download SDXL base model
        #    download SDXL refiner model
        #    download SDXL VAE model
        #    setup and activate venv
        #    upgrade diffusers
        #    pip install transformers, accelerate,watermark,safetensors

        #- roles/ComfyUIWindows  # AIArtCreator http://127/0/0/1:8188
        #    setup and activate venv
        #    New-NetFirewallRule -Name "AllowPort8188Inbound" -DisplayName "Allow Inbound on Port 8188" -Enabled True -Direction Inbound -Protocol TCP -LocalPort 8188 -Action Allow -Profile 'Private'
        #    New-NetFirewallRule -Name "AllowPort8188Outbound" -DisplayName "Allow Outbound on Port 8188" -Enabled True -Direction Outbound -Protocol TCP -RemotePort 8188 -Action Allow -Profile 'Private'
        #    install ComfyUI-Impact-pack           # Multiple new custom nodes
        #    install ComfyUI-Manager               # Will install missing custom nodes
        #    install ComfyUI_Custom_Nodes_AlekPet  # multiple nodes including one that will visualize the prompt text

        #- roles/xnviewmp   # tagging/viewing SW - best for showing metadata
        #    download installer from "https://download.xnview.com/XnViewMP-win-x64.exe"
        #    setup and activate venv
        #    Run startup wizard
        #    Add `Browse with XnViewMP context  menu' and run association tool
        #    xnView settings in registry or under user's folder
        #    Add `Browse with XnViewMP context menu' and run association tool
        #    xnView settings in registry or under user's folder


        #- roles/sdTaggingHelperWindows # cropping/tagging/viewing SW (mostly cropping)
        #    git clone https://github.com/arenasys/sd-tagging-helper.git
        #    install and activate venv
        #    pip3  install pillow pyqt5==5.15.7
        #    Input image directory has to have pre-exisitng tag file; run this powershell script in the input directory
        #      $tags = [system.collections.arraylist]::new();$( gci *.jpg) | %{$fh =$_;$base = $fh.basename;[void]$tags.clear();$tags.Add($(get-content "$base.txt" -ErrorAction SilentlyContinue));[void]$tags.Add('JoAnn2');$fh.fullname;$fh.basename;$tags;"$base.txt"} Set-Content -Path "$base.txt" -Value $tags}
        #     start.bat in sd-tagging-helper

        # - roles/pictureflowWindows
        #  raw input directory  "camera uploads'"
        #  move N latest files to "raw input directory"
        #  input to Hydrus, tag with hydrus client
        #  further tag with xnviewmp (optional)
        #  inport to hydrus DB and client files
        #  backup and verify hyrdus DB and clientimages

        #- roles/LoraCreationWindows
        #  curate images in Hydrus
        #  export images and tags to F:AI/ImageDataset/<nameOfDataset>/0tagged
        #  crop images, save to F:AI/ImageDataset/<nameOfDataset>/1cropped

        #- roles/SD.NextWindows  # AIArtCreator http://127/0/0/1:7860


  ### Things to add
  # Powershell scripts to run
  # per-machine
  # - Setup host profiles and global files
  # Per user
  # - disable password expiration on windows 11 machines (for all users)
  #   - wmic UserAccount set PasswordExpires=False
  # - mapusersshellfolders
  # - SetupExplorerQuickView shortcuts
  # - Setup user profiles
  # Dropbox - per host and per user select specific folders to 'make available offline' (whertzing, Pictures, Videso, Notepad++   )
  # Stop Windows Search indexing, remove any exisitng indexes
  # Notepad++
  #   - set location of configuration files to the dropbox location
  #   - set file associations
  #   - add spell checker plugin
  #   - add (per user) spell dictionaries
  #   - set (per user) editing options like wordwrap and column width
  # 7Zip
  #   - set all file associations, exclude .cab, .iso .vhd .vhdx,
  # VLC - set videos file types association
  # ILSpy -set associations for .dll files
  # do not start OneDrive on system startup - can be done with autoruns, TBD do it with ansilbe 'currnet\version\Run'
  # do not start BCClipboard on system startup - can be done with autoruns, TBD -doit with ansible
  # do not start the scheduled task '\onedrive Reporting Task'- can be done with autoruns
  # do not start the scheduled task '\oneDriveg Standalone Update TaskTask'- can be done with autoruns
  # do not start the service 'Edgeupdate' on system startup - can be done with autoruns
  # do not start the service 'Edgeupdatem' on system startup - can be done with autoruns
  # do not start the service 'MicrosoftEdgeElevationService' on system startup - can be done with autoruns
  # do not run the program EdgeAutoLaunch on system startup - can be done with autoruns TBD do it  with ansible - 'CurrentVersion\run'
  # Setup profiles
  # Configure Everything options "Double quote copy as path",, "aopen path with double click in path column"
  # Login to Steam accunt billhertzing S2V, then get 2FA code from gmail
  # Install AOEIV from steam library
  # Pushbullet - login with Google Chrome link
  # Everything "double click  path to open folder in Explorer" and "put double quaotes around path when copying complete path"
  # ShareX - kotkeys conflict if onedrive is started before sharex, solved by turning off OneDrive . Settings: Paths->Use Custom Screenshots folder : C:\Dropbox\whertzing\ShareX\Screenshots  Set Theme to light
  # SpyderX - calibrate monitor/GPU after installation
  # BeyondCompare - add license, found at "C:\Dropbox\Downloads\CD Keys\BeyondCompare V4 License.txt.txt"
  # PowershellPro - add License. Found in file at "C:\Dropbox\Downloads\powershell Pro VSC Bundle 2021-05-06 license.txt"
  # JetBrains Rider - add license
  # Rider Ultimate - enter license
  # ServiceStack - enter license
  # FreeVideoEditor VSDC - enter license
  # Grammerly - sign in to account:
  # VSC - sign in via github to turn on settings sync
  # VSC - add common workspaces to the taskbar icon
  # VSC - add user settings to new system, especially spell words
  # VSC - extension for Github Copilot
  # VSC - extension for Github Copilot Voice
  # VSC - extension for DGML viewer (not in chcolatey) DGMLViewer by Allen Simonsen
  # VSC - extension for ILSpy viewer (not in chcolatey) ILSpy by Allen Simonsen
  # Terminal -change the default profile GUID to be the GUID of the Powershell Core profile. Settings at "C:\Users\whertzing\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState\settings.json"
  # Run Samsung magician against all SSD drives, do a diagnostics scan, get benchmark for performance, do performance optimization, check Overprovisioning, check S.M.A.R.T results
  # Firewall rules module, to allow roles to define the firewall rules they need
  # Download/Install/Setup Microsoft Enhance Voice recognition
  # Discord:

  # Install Ubuntu onto WSl2
  # $distroToInstall = Read-Host -Prompt 'Distro to install' : accept default 'ubuntu'
  # wsl --install $distroToInstall
  # wsl --set-default-version 2
  # Settings and Windows scheduled tassk needed to setup communications into WSL container

  # Plex server and Fred's Videos

  # LoRA Training role (https://github.com/city96/dataset-webui) (http://127.0.0.1:8080/)
  # dataset-webui
  # clone repository `git clone https://github.com/city96/dataset-webui.git`
  # cd dataset-webui
  # Create venv
  # python -m venv venv
  # venv\Scripts\activate
  # download python requirements:
  # pip install -r requirements.txt
  # start webserver `python3 webserver.py`
  # Allow incoming requesty to "dataset-webui" through the Firewall
  #   $PortNumber = 8080
  #   $ServiceName = "dataset-webui"
  #   New-NetFirewallRule -Name "$ServiceName-Inbound" -DisplayName "Allow $ServiceName Incoming" -Enabled True -Direction Inbound -Protocol TCP -LocalPort $PortNumber -Action Allow
  # browse to UI at http://127.0.0.1:8080/
  # create directory structure

  # Pinning a program to the taskbar seems pretty complicated, requiring a PS script and knowledge of where the executable is placed
  # and also  differs per user pr machine wide (where the .lnk isplaced)
  # TBD - write the PS script, and deploy thhe contaning package to the target host before trying to pin anything - maybe make it a role, and have that role be a dependency for any rolethat wants t pin an app

    # if needed to change a local user password
    #   net user <username> <password>
    # add local user to group
    #    net localgroup <group_name> <UserLoginName> /add
    # elevate a user to administrator and run a command
    #    runas /user:<adminusername> "command to run" # e.g. "net localgroup Administrators <nonadmnusername> /add"
    #  create a new local group
    #    net localgroup <groupname> /add

    #     selectHigh balanced power plan (never sleeps)


  vars:
    chocolateycachelocation: "C:/Temp/ChocolateyCache"

    #
