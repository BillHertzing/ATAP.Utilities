<Project >

  <!-- Solution wide default location of the version file for all projects in the solution -->
  <!-- Can be overridden if desired by a property of the same name in a project file for an assembly -->
  <PropertyGroup>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <!-- Solution wide default location of the version file for all projects in the solution -->
    <!-- Can be overridden if desired by a property of the same name in a project file for an assembly -->
    <VersionFile Condition=" '$(VersionFile)' == '' ">$(MSBuildProjectDirectory)\properties\AssemblyInfo.cs</VersionFile>
    <!-- Solution wide default location of the lock file for the UpdatePackageVersion tasks for all projects in the solution -->
    <!-- Can be overridden if desired by a property of the same name in a project file for an assembly -->
    <UpdatePackageVersionLockFilePath Condition=" '$(UpdatePackageVersionLockFilePath)' == '' ">$(MSBuildProjectDirectory)\$(MSBuildProjectName).UpdatePackageVersion.lock</UpdatePackageVersionLockFilePath>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;netstandard2.1;net5.0;</TargetFrameworks>
    <RuntimeIdentifiers>win10-x64;linux-x64</RuntimeIdentifiers>
    <LangVersion>latest</LangVersion>
    <!--
    <TargetFramework>netstandard2.1</TargetFramework>
    <TargetFrameworks>net47;netstandard2.1;netcoreapp3.1</TargetFrameworks>
	-->
  </PropertyGroup>


  <!-- Nullable Reference Type support solution-wide -->
  <PropertyGroup>
    <Nullable>enable</Nullable>
  </PropertyGroup>


  <!-- solution-wide properties to include in every project -->
  <PropertyGroup>
    <!-- specify the root directory of the solution, relative to the location where the current project is found -->
    <!-- when msbuild is run by Visual Studio 15.8.2, ($(MSBuildRuntimeType) != 'Core') the property $(SolutionDir) is already defined at this point, so this line is not executed -->
    <!-- when msbuild is run by dotnet command, ($(MSBuildRuntimeType) == 'Core') the property $(SolutionDir) is not defined at this point, so this line is executed -->
    <!-- ToDo: if this line is executed, SolutionDir may be either one or two dirs up-->
    
    <!-- the result is that the $(SolutionDir) is set properly regardless of the $(MSBuildRuntimeType) -->
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)\..\..\</SolutionDir>

    <!-- Directory where all of the custom build tools are stored -->
    <SolutionBuildToolsBaseDir Condition=" '$(SolutionBuildToolsBaseDir)' == '' ">$(SolutionDir)Build\</SolutionBuildToolsBaseDir>

    <!-- bring in the build tasks extensions defined in the MSBuild.Community project-->
    <MSBuildCommunityTasksPath>$(SolutionBuildToolsBaseDir)MSBuildTasks.*\build</MSBuildCommunityTasksPath>

    <!-- bring in the build tasks extensions defined in the ATAP.Utilities.BuildTooling project-->
    <!-- ATAPBuildToolingConfiguration is normally set to Release; use Debug if developing the BuildTooling assemblies and scripts -->
    <ATAPBuildToolingConfiguration>Debug</ATAPBuildToolingConfiguration>
    <!-- ATAPBuildToolingDebugVerbosity controls the level of details the Debug mode logging. If ATAPBuildToolingConfiguration is not Debug, this setting has no effect -->
    <!-- valid values for ATAPBuildToolingDebugVerbosity are trace -->
    <ATAPBuildToolingDebugVerbosity>Trace</ATAPBuildToolingDebugVerbosity>
    <ATAPUtilitiesBuildToolingTargetsPath>$(SolutionBuildToolsBaseDir)ATAP.Utilities.BuildTooling.0.1.0.1\build\</ATAPUtilitiesBuildToolingTargetsPath>
    <ATAPUtilitiesBuildToolingTasksPath>$(SolutionBuildToolsBaseDir)ATAP.Utilities.BuildTooling.0.1.0.1\build</ATAPUtilitiesBuildToolingTasksPath>
    <ATAPUtilitiesBuildToolingTasksAssembly Condition=" '$(MSBuildRuntimeType)' == 'Core'">$(ATAPUtilitiesBuildToolingTasksPath)\$(ATAPBuildToolingConfiguration)\netstandard2.0\ATAP.Utilities.BuildTooling.CSharp.dll</ATAPUtilitiesBuildToolingTasksAssembly>
    <ATAPUtilitiesBuildToolingTasksAssembly Condition=" '$(MSBuildRuntimeType)' != 'Core'">$(ATAPUtilitiesBuildToolingTasksPath)\$(ATAPBuildToolingConfiguration)\net471\ATAP.Utilities.BuildTooling.CSharp.dll</ATAPUtilitiesBuildToolingTasksAssembly>

    <!-- The Roslyn Code Analyzers for FxCop Rules should be installed as a Nuget Package at the Solution level, per this article https://docs.microsoft.com/en-us/visualstudio/code-quality/install-fxcop-analyzers?view=vs-2019 -->
    <!-- Per this article https://docs.microsoft.com/en-us/visualstudio/code-quality/roslyn-analyzers-overview?view=vs-2019#nuget-package-versus-vsix-extension the legacy post-build code analysis tools should be turned off -->
    <RunCodeAnalysis>false</RunCodeAnalysis>
  </PropertyGroup>

  <!-- NuGet Package information for all assemblies in the solution -->
  <PropertyGroup>
    <Company></Company>
    <Copyright>William Hertzing</Copyright>
    <Authors>William Hertzing</Authors>
    <Product>ATAP.Utilities</Product>
    <ProductName>ATAP.Utilities</ProductName>
    <RepositoryUrl>https://github.com/BillHertzing/ATAP.Utilities</RepositoryUrl>
    <RepositoryType>GitHub</RepositoryType>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>www.project.url</PackageProjectUrl>
    <PackageIconUrl>www.icon.url</PackageIconUrl>
    <PackageTags>Testing, experimental, alpha, ATAP, ATAP.Utilities</PackageTags>
    <PackageReleaseNotes>Initial implementation/test of ATAP.Utilities Nuget packaging</PackageReleaseNotes>
  </PropertyGroup>

  <!-- NuGet Local Feed location, using an environment variable and fallback -->
  <PropertyGroup>
    <NuGetLocalFeedPath Condition=" '$(NuGetLocalFeedPath)' == '' ">C:\Dropbox\NuGetLocalFeed</NuGetLocalFeedPath>
  </PropertyGroup>

  <!-- Set MSBuild output verbosity and warnings to ignore-->
  <PropertyGroup>
    <NoWarn>1602;1603;1701;1705;8600;8602;8603;8618;8625</NoWarn>

  </PropertyGroup>

  <!-- Release Configuration compilation symbols, flags and build options -->
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DefineConstants>RELEASE;</DefineConstants>
  </PropertyGroup>

  <!-- ReleaseWithTrace Configuration compilation symbols, flags and build options -->
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='ReleaseWithTrace|AnyCPU'">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DefineConstants>RELEASE;TRACE;</DefineConstants>
  </PropertyGroup>

  <!-- Debug Configuration compilation symbols, flags and build options -->
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DefineConstants>DEBUG;TRACE;</DefineConstants>
  </PropertyGroup>

  <!-- .NET Standard any version references, compilation flags and build options -->
  <PropertyGroup Condition="$(TargetFramework.Contains('netstandard'))">
    <DefineConstants>NETSTANDARD</DefineConstants>
  </PropertyGroup>

  <!-- .NET Standard 2.0 references, compilation flags and build options -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'netstandard2.0'">
    <DefineConstants>NETSTANDARD2_0</DefineConstants>
  </PropertyGroup>

  <!-- .NET Standard 2.1 references, compilation flags and build options -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'netstandard2.1'">
    <DefineConstants>NETSTANDARD2_1</DefineConstants>
  </PropertyGroup>

  <!-- .NET Core references, compilation flags and build options -->
  <PropertyGroup Condition="$(TargetFramework.Contains('netcore'))">
    <DefineConstants>NETCORE;</DefineConstants>
  </PropertyGroup>

  <!-- .NET Core 2.0 references, compilation flags and build options -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'netcoreapp2.0'">
    <DefineConstants>NETCOREAPP2_0</DefineConstants>
  </PropertyGroup>

  <!-- .NET Core 2.1 references, compilation flags and build options -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'netcoreapp2.1'">
    <DefineConstants>NETCOREAPP2_1</DefineConstants>
  </PropertyGroup>

  <!-- .NET Core 3.0 references, compilation flags and build options -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'netcoreapp3.0'">
    <DefineConstants>NETCOREAPP3_0</DefineConstants>
  </PropertyGroup>

  <!-- .NET Core 3.1 references, compilation flags and build options -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'netcoreapp3.1'">
    <DefineConstants>NETCOREAPP3_1</DefineConstants>
  </PropertyGroup>

  <!-- .NET Framework, compilation flags and build options -->
  <PropertyGroup Condition="$(TargetFramework.Contains('net'))">
    <DefineConstants>NETFULL</DefineConstants>
  </PropertyGroup>

  <!-- .NET 45 references, compilation flags and build options -->
  <PropertyGroup Condition="$(TargetFramework.Contains('net45'))">
    <DefineConstants>NET45</DefineConstants>
  </PropertyGroup>

  <!-- .NET 46 references, compilation flags and build options -->
  <PropertyGroup Condition="$(TargetFramework.Contains('net46'))">
    <DefineConstants>NET46</DefineConstants>
  </PropertyGroup>

  <!-- .NET 47 references, compilation flags and build options -->
  <PropertyGroup Condition="$(TargetFramework.Contains('net47'))">
    <DefineConstants>NET47</DefineConstants>
  </PropertyGroup>

  <!-- .NET 471 references, compilation flags and build options -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'net471' ">
    <DefineConstants>NET471</DefineConstants>
  </PropertyGroup>

  <!-- .NET 472 references, compilation flags and build options -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'net472' ">
    <DefineConstants>NET472</DefineConstants>
  </PropertyGroup>

  <!-- .NET 48 references, compilation flags and build options -->
  <PropertyGroup Condition="$(TargetFramework.Contains('net48'))">
    <DefineConstants>NET48</DefineConstants>
  </PropertyGroup>

  <!-- .NET 471 solution-wide items to include in every project -->
  <ItemGroup Condition=" '$(TargetFramework)' == 'net471' ">
  </ItemGroup>

  <!-- Demonstrate the difference between a msbuild run from inside Visual Studio, and a msbuild called from dotnet CLI
       Replace Never with Clean -->
  <Target Name="HighlightDifferencesBetweenMSBuild" BeforeTargets="Clean">
    <Message  Text="MSBuildRuntimeType = $(MSBuildRuntimeType)" />
    <Message Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'" Text="SolutionDir undefined or null"/>
    <Message Condition="$(SolutionDir) != '' And $(SolutionDir) != '*Undefined*'" Text="SolutionDir =$(SolutionDir)"/>
  </Target>

  <!--
  <ItemGroup>
    <Analyzer Include="..\..\packages\xunit.analyzers.0.7.0\analyzers\dotnet\cs\xunit.analyzers.dll" />
  </ItemGroup>

  <Import Project="..\..\packages\xunit.core.2.3.1\build\xunit.core.targets" Condition="Exists('..\..\packages\xunit.core.2.3.1\build\xunit.core.targets')" />
  -->

</Project>
