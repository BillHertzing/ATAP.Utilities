using System;
using System.Collections.Generic;
using System.Text;
using ATAP.Utilities.StronglyTypedId;

namespace ATAP.Utilities.GenerateProgram {

  public record GResourceUnitId<TValue> : AbstractStronglyTypedId<TValue>, IGResourceUnitId<TValue> where TValue : notnull {}
  public record GResourceUnit<TValue> : IGResourceUnit<TValue> where TValue : notnull {
    public GResourceUnit(string gName, string gRelativePath = default, string gFileSuffix = default,
      Dictionary<IGResourceItemId<TValue>, IGResourceItem<TValue>> gResourceItems = default,
      IGPatternReplacement<TValue>? gPatternReplacement = default,
      IGComment<TValue>? gComment  = default
    ) {
      GName = gName ?? throw new ArgumentNullException(nameof(gName));
      GRelativePath = gRelativePath == default ? "Resources" : gRelativePath;
      GFileSuffix = gFileSuffix == default ? ".resx" : gFileSuffix;
      GResourceItems = gResourceItems == default ? new Dictionary<IGResourceItemId<TValue>, IGResourceItem<TValue>>() : gResourceItems;
      GPatternReplacement = gPatternReplacement;
      GComment = gComment;
      Id = new GResourceUnitId<TValue>();
    }

    public string GName { get; init; }
    public string GRelativePath { get; init; }
    public string GFileSuffix { get; init; }
    public Dictionary<IGResourceItemId<TValue>, IGResourceItem<TValue>> GResourceItems { get; init; }
    public IGPatternReplacement<TValue>? GPatternReplacement { get; init; }
    public IGComment<TValue>? GComment { get; init; }
    public  IGResourceUnitId<TValue> Id { get; init; }
    public static string Header { get; } = "<!-- " + StringConstants.AutoGeneratedHeaderCommentTextStringDefault + " -->";
  }
}








