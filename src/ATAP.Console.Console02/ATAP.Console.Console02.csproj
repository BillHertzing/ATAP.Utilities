<Project Sdk="Microsoft.NET.Sdk">

  <!-- Creates an executable Project -->
  <PropertyGroup>
    <OutputType>Exe</OutputType>
  </PropertyGroup>

  <!-- This project will run under the following target frameworks -->
  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
    <TargetFrameworks>net5.0;</TargetFrameworks>
  </PropertyGroup>

  <!-- The Assembly will be packed into a NuGet Package on every build -->
  <PropertyGroup>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IsPackable>true</IsPackable>
  </PropertyGroup>

  <!-- Describes the current stage in the development/Release lifecycle for this Assembly -->
  <PropertyGroup>
    <!-- Current Lifecycle stage for this assembly -->
    <PackageLifeCycleStage>Development</PackageLifeCycleStage>
    <!-- NuGet Package Label for the Nuget Package if the LifecycleStage is not Production-->
    <!-- However, if the LifecycleStage is Production, the NuGet Package Label is ignored, but MSBuild expects a non-null value  -->
    <PackageLabel>Alpha</PackageLabel>
  </PropertyGroup>

  <!-- The current version of this assembly -->
  <PropertyGroup>
    <!-- Assembly, File, and Package Information for this assembly-->
    <!-- Build and revision are created based on date-->
    <MajorVersion>0</MajorVersion>
    <MinorVersion>1</MinorVersion>
    <PatchVersion>0</PatchVersion>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\ATAP.Console.Console02.StringConstants\ATAP.Console.Console02.StringConstants.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Logging\ATAP.Utilities.Logging.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Loader.Interfaces\ATAP.Utilities.Loader.Interfaces.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Loader.StringConstants\ATAP.Utilities.Loader.StringConstants.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Loader\ATAP.Utilities.Loader.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Serializer.StringConstants\ATAP.Utilities.Serializer.StringConstants.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Serializer.Interfaces\ATAP.Utilities.Serializer.Interfaces.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Serializer\ATAP.Utilities.Serializer.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.DataBaseManagement\ATAP.Utilities.DatabaseManagement.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Persistence.Interfaces\ATAP.Utilities.Persistence.Interfaces.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Persistence.StringConstants\ATAP.Utilities.Persistence.StringConstants.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.GenericHost.Extensions\ATAP.Utilities.GenericHost.Extensions.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Configuration.Extensions\ATAP.Utilities.Configuration.Extensions.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.Reactive.Extensions\ATAP.Utilities.Reactive.Extensions.csproj" />
    <ProjectReference Include="..\ATAP.Services.ConsoleSink.Interfaces\ConsoleSink.Interfaces.csproj" />
    <ProjectReference Include="..\ATAP.Services.ConsoleSource.Interfaces\ConsoleSource.Interfaces.csproj" />
    <ProjectReference Include="..\ATAP.Services.ConsoleMonitor.Interfaces\ConsoleMonitor.Interfaces.csproj" />
    <ProjectReference Include="..\ATAP.Services.ConsoleSink\ConsoleSink.csproj" />
    <ProjectReference Include="..\ATAP.Services.ConsoleSource\ConsoleSource.csproj" />
    <ProjectReference Include="..\ATAP.Services.ConsoleMonitor\ConsoleMonitor.csproj" />
    <ProjectReference Include="..\ATAP.Services.Timers.Interfaces\Timers.Interfaces.csproj" />
    <ProjectReference Include="..\ATAP.Services.Timers\Timers.csproj" />
    <ProjectReference Include="..\ATAP.Services.GenerateProgram.Interfaces\ATAP.Services.GenerateProgram.Interfaces.csproj" />
    <ProjectReference Include="..\ATAP.Services.GenerateProgram.StringConstants\ATAP.Services.GenerateProgram.StringConstants.csproj" />
    <ProjectReference Include="..\ATAP.Services.GenerateProgram\ATAP.Services.GenerateProgram.csproj" />
    <ProjectReference Include="..\ATAP.Utilities.GenerateProgram.Interfaces\ATAP.Utilities.GenerateProgram.Interfaces.csproj" />
  </ItemGroup>

  <!-- Reactive Extensions -->
  <ItemGroup>
    <PackageReference Include="System.Reactive" />
  </ItemGroup>

  <!-- print MSBuild debugging information -->
  <Target Name="PrintMSBuildDebuggingInformationForDynamicShims" BeforeTargets="Build">
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="Running Target PrintMSBuildDebuggingInformationForDynamicShims before _InnerBuild" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="Configuration = $(Configuration)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="OutputPath = $(OutputPath)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="OutDir = $(OutDir)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="PublishDir = $(PublishDir)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="TargetDir = $(TargetDir)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="PluginsRelativeDir = $(PluginsRelativeDir)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="PluginsDir = $(PluginsDir)" />
  </Target>

  <!-- For Console or Service projects which use dynamically loaded modules (aka Shims) -->
  <!-- Publish (which will build if necessary) all of the Serializer shims, for all Run-time identifiers for the ISerializerConfigurableAbstract DI-injected service to a Plugins subdirectory of the Outputdir after build -->
  <Target Name="PublishSerializerShims" AfterTargets="Build">
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="Running Target PublishSerializerShims" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="PluginsDir = $(PluginsDir)" />
    <!-- Todo: Analysis if it is better to search for projects that match a magic pattern, or specify every dynamically loaded module used by this console or service -->
    <ItemGroup>
      <SerializerShimsProjects Include="$(ProjectDir)..\**\*Serializer.Shim.*\*Serializer.Shim.*.csproj" />
    </ItemGroup>
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="SerializerShimsProjects = @(SerializerShimsProjects)" />
    <!-- Workaround: list every Serializer shim explicitly-->
    <MSBuild Projects="..\ATAP.Utilities.Serializer.Shim.SystemTextJson\ATAP.Utilities.Serializer.Shim.SystemTextJson.csproj" Targets="PublishAll" Properties="Configuration=$(Configuration);PublishDir=$(PluginsDir)" />
    <MSBuild Projects="..\ATAP.Utilities.Serializer.Shim.Newtonsoft\ATAP.Utilities.Serializer.Shim.Newtonsoft.csproj" Targets="PublishAll" Properties="Configuration=$(Configuration);PublishDir=$(PluginsDir)" />
  </Target>

  <!-- Copy all of the Serializer shims, for all Run-time identifiers for the ISerializerConfigurableAbstract DI-injected service to a serializers subdirectory of the Outputdir before build -->
  <Target Name="CopySerializerShims" AfterTargets="PublishSerializerShims">
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="Running Target CopySerializerShims" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="PluginsDir = $(PluginsDir)" />
    <ItemGroup>
      <SerializerShimsRuntimeFiles Include="$(ProjectDir)..\**\*Serializer.Shim.*\bin\$(Configuration)\net5.0\*Serializer.Shim.*.*" />
    </ItemGroup>
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="SourceFiles = @(SerializerShimsRuntimeFiles)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="DestinationFolder = $(PluginsDir)" />
    <Copy
      SourceFiles = "@(SerializerShimsRuntimeFiles)" DestinationFolder="$(PluginsDir)\" SkipUnchangedFiles="true" />
  </Target>

  <!-- Publish (which will build if necessary) all all of the Serializer SubModule shims, for all Run-time identifiers for the ISerializerConfigurableAbstract DI-injected service to a serializers subdirectory of the Outputdir before build -->
  <Target Name="PublishSerializerSubModulesShims" AfterTargets="Build">
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="Running Target PublishSerializerSubModulesShims" />
    <ItemGroup>
      <SerializerSubModulesShimProjects Include="$(ProjectDir)..\**\*JsonConverter.Shim.SystemTextJson\*JsonConverter.Shim.SystemTextJson.csproj" />
    </ItemGroup>
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="SerializerSubModulesShimProjects = @(SerializerSubModulesShimProjects)" />
    <!-- ToDo: figure out how to MSBuild with target PublishAll for each element of the SerializerSubModuleShimProjects array-->
    <!-- Workaround: list -->
    <MSBuild Projects="..\ATAP.Utilities.Serializer.Shim.SystemTextJson\ATAP.Utilities.Serializer.Shim.SystemTextJson.csproj" Targets="PublishAll" Properties="Configuration=$(Configuration);PublishDir=$(PluginsDir)" />
    <MSBuild Projects="..\ATAP.Utilities.Serializer.Shim.Newtonsoft\ATAP.Utilities.Serializer.Shim.Newtonsoft.csproj" Targets="PublishAll" Properties="Configuration=$(Configuration);PublishDir=$(PluginsDir)" />
  </Target>

  <!-- copy all of the Serializer SubModule shims, for all Serializer Shims, for all Run-time identifiers for the ISerializerConfigurableAbstract DI-injected service to a serializers subdirectory of the Outputdir before build -->
  <Target Name="CopySerializerSubModulesShims" AfterTargets="PublishSerializerSubModulesShims">
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="Running Target CopySerializerSubModulesShims" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="PluginsDir = $(PluginsDir)" />
    <!-- Magic pattern for JsonConverters to be used with the SystemTextJson shim -->
    <ItemGroup>
      <JsonConverterRuntimeFiles Include="$(ProjectDir)..\**\*JsonConverter.Shim.SystemTextJson\bin\$(Configuration)\net5.0\*JsonConverter.Shim.SystemTextJson.*" />
    </ItemGroup>
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="SourceFiles = @(JsonConverterRuntimeFiles)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="DestinationFolder = $(PluginsDir)" />
    <Copy
      SourceFiles = "@(JsonConverterRuntimeFiles)" DestinationFolder="$(PluginsDir)\" SkipUnchangedFiles="true" />
  </Target>


  <!-- Publish all Plugin libraries and shims, for all Run-time identifiers, to a plugins subdirectory of the Outputdir before build-->
  <!--
    <Target Name="BuildPlugin" BeforeTargets="Build">
    <MSBuild Projects="..\MyPlugin\MyPlugin.csproj" Targets="Publish" Properties="Configuration=$(Configuration);PublishDir=$(OutputPath)/Plugins/" />
  </Target>
  -->

  <!-- ServiceStack ORMLite (database) utilities -->
  <ItemGroup>
    <PackageReference Include="ServiceStack" />
    <PackageReference Include="ServiceStack.ORMLite" />
    <PackageReference Include="ServiceStack.OrmLite.SqlServer" />
  </ItemGroup>

  <!-- Packages necessary to run the ASP.Net Core Generic Host and web server hosts Server -->
  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Configuration" />
    <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine" />
    <PackageReference Include="Microsoft.Extensions.Configuration.EnvironmentVariables" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" />
    <PackageReference Include="Microsoft.Extensions.Hosting" />
    <PackageReference Include="Microsoft.Extensions.Localization" />
    <PackageReference Include="Microsoft.Extensions.Logging" />
  </ItemGroup>

  <!-- Package to extend Microsoft.Extensions.DependencyInjection with scan and Decorate methods -->
  <ItemGroup>
    <PackageReference Include="Scrutor" />
  </ItemGroup>

  <!-- Packages to implement Serilog as logging provider -->
  <ItemGroup>
    <PackageReference Include="Serilog" />
    <PackageReference Include="Serilog.Settings.Configuration" />
    <PackageReference Include="Serilog.Enrichers.Thread" />
    <PackageReference Include="Serilog.Exceptions" />
    <PackageReference Include="Serilog.Extensions.Hosting" />
    <PackageReference Include="Serilog.Sinks.Console" />
    <PackageReference Include="Serilog.Sinks.Debug" />
    <PackageReference Include="Serilog.Sinks.File" />
    <PackageReference Include="Serilog.Sinks.Seq" />
    <PackageReference Include="SerilogAnalyzer" />
    <!--    <PackageReference Include="Serilog.AspNetCore" /> -->
  </ItemGroup>

  <!-- Packages to add Serilog and SEQ as Microsoft.Extensions.Logging providers -->
  <ItemGroup>
    <PackageReference Include="Serilog.Extensions.Logging" />
    <PackageReference Include="Seq.Extensions.Logging" />
  </ItemGroup>

  <!-- Plugin Framework -->
  <ItemGroup>
    <PackageReference Include="McMaster.NETCore.Plugins" />
  </ItemGroup>

  <!-- Testing detection of Design-Time builds under VS Code (Omnisharp) -->
  <Target Name="DetectDesignTimeBuild">
    <PropertyGroup Condition="'$(DesignTimeBuild)' == 'true' OR ('$(BuildingProject)' != '' AND'$(BuildingProject)' != 'true')">
      <_DesignTimeBuild>true</_DesignTimeBuild>
    </PropertyGroup>
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="DesignTimeBuild = $(DesignTimeBuild)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="BuildingProject = $(BuildingProject)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Importance="High" Text="_DesignTimeBuild = $(_DesignTimeBuild)" />
  </Target>

</Project>
