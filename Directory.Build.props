<!-- Specify the "UpdateVersionIfNecessary target to be built first-->
<Project InitialTargets="UpdateVersionIfNecessary">

  <!-- Last publicly released version information for all projects in the solution -->
  <PropertyGroup>
    <SolutionMajorVersion>0</SolutionMajorVersion>
    <SolutionMinorVersion>0</SolutionMinorVersion>
    <SolutionPatchVersion>0</SolutionPatchVersion>
    <VersionFile>properties/AssemblyInfo.cs</VersionFile>
  </PropertyGroup>
  
  <!-- Build Rules for all projects in the solution -->
  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net471</TargetFrameworks>
    <LangVersion>latest</LangVersion>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <!--
    <TargetFramework>net47</TargetFramework>
    <TargetFramework>net471</TargetFramework>
    <TargetFramework>netcoreapp2.0</TargetFramework>
    <TargetFramework>netstandard2.0</TargetFramework>
  	<TargetFrameworks>netcoreapp2.0;net471</TargetFrameworks>
    <TargetFrameworks>netstandard2.0;net471</TargetFrameworks>
	-->
  </PropertyGroup>

  <!-- solution-wide properties to include in every project -->
  <PropertyGroup>
    <!-- root directory of the solution, relative to the location where builds take place -->
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">..\..\</SolutionDir>
    <!-- Directory where all of the custom build tools are stored -->
    <SolutionBuildToolsBaseDir Condition=" '$(SolutionBuildToolsBaseDir)' == '' ">$(SolutionDir).build\</SolutionBuildToolsBaseDir>
    <!-- bring in the build tasks extensions defined in the MSBuild.Community project-->
    <MSBuildCommunityTasksPath>$(SolutionBuildToolsBaseDir)MSBuildTasks.*\build</MSBuildCommunityTasksPath>
    <!-- bring in the build tasks extensions defined in the ATAP.Utilities.BuildTooling project-->
    <!-- ATAPBuildToolingConfiguration is normally set to Release; use Debug if developing the BuildTooling assemblies and scripts -->
	  <ATAPBuildToolingConfiguration>Debug</ATAPBuildToolingConfiguration>
    <ATAPUtilitiesBuildToolingPath>$(SolutionBuildToolsBaseDir)ATAP.Utilities.BuildTooling.0.1.0.1\build</ATAPUtilitiesBuildToolingPath>
    <TaskAssembly Condition=" '$(MSBuildRuntimeType)' == 'Core'">$(ATAPUtilitiesBuildToolingPath)\$(ATAPBuildToolingConfiguration)\netstandard*\ATAP.Utilities.BuildTooling.dll</TaskAssembly>
    <TaskAssembly Condition=" '$(MSBuildRuntimeType)' != 'Core'">$(ATAPUtilitiesBuildToolingPath)\$(ATAPBuildToolingConfiguration)\net471\ATAP.Utilities.BuildTooling.dll</TaskAssembly>
  </PropertyGroup>
  <UsingTask TaskName="ATAP.Utilities.BuildTooling.GetVersion" AssemblyFile="$(TaskAssembly)" />
  <UsingTask TaskName="ATAP.Utilities.BuildTooling.SetVersion" AssemblyFile="$(TaskAssembly)" />

  <!-- NuGet Package information for all assemblies in the solution -->
  <PropertyGroup>
    <Company>ATAP Technology, Inc.</Company>
    <Copyright>ATAP Technology, Inc.</Copyright>
    <Authors>William Hertzing</Authors>
    <Product>ATAP.Utilities</Product>
    <ProductName>ATAP.Utilities</ProductName>
    <RepositoryType>GitHub</RepositoryType>
    <RepositoryUrl>https://github.com/BillHertzing/ATAP.Utilities</RepositoryUrl>
    <PackageLicenseUrl>https://opensource.org/licenses/MIT</PackageLicenseUrl>
    <PackageProjectUrl>www.project.url</PackageProjectUrl>
    <PackageIconUrl>www.icon.url</PackageIconUrl>
    <PackageTags>Testing, experimental, alpha, ATAP, ATAP.Utillities</PackageTags>
    <PackageReleaseNotes>Initial implementation/test of ATAP.Utilities Nuget packaging</PackageReleaseNotes>
  </PropertyGroup>
     
  <!-- NuGet Local Feed location, using an environment variable and fallback -->
  <PropertyGroup>
    <NuGetLocalFeedPath Condition=" '$(NuGetLocalFeedPath)' == '' ">C:\Dropbox\NuGetLocalFeed</NuGetLocalFeedPath> 
  </PropertyGroup>


  <!-- Release Configuration compilation symbols, flags and build options -->
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DefineConstants>RELEASE;</DefineConstants>
  </PropertyGroup>

  <!-- Debug Configuration compilation symbols, flags and build options -->
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <NoWarn>1701;1702;1705,NU1701</NoWarn>
  </PropertyGroup>

  <!-- .NET Standard 2.0 references, compilation flags and build options -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'netstandard2.0'">
    <DefineConstants>NETCORE;NETSTANDARD;NETSTANDARD2_0</DefineConstants>
  </PropertyGroup>

  <!-- .NET Standard 2.0 solution-wide items to include in every project -->
  <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' ">
  </ItemGroup>

  <!-- .NET Core 2.0 references, compilation flags and build options -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'netcoreapp2.0'">
    <DefineConstants>NETCORE;</DefineConstants>
  </PropertyGroup>

  <!-- .NET Core 2.0 solution-wide items to include in every project -->
  <ItemGroup Condition=" '$(TargetFramework)' == 'netcoreapp2.0' ">
  </ItemGroup>

  <!-- .NET 47  references, compilation flags and build options -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'net47'">
    <DefineConstants>NET47;NETFULL</DefineConstants>
  </PropertyGroup>

  <!-- .NET 47 solution-wide items to include in every project -->
  <ItemGroup Condition=" '$(TargetFramework)' == 'net47' ">
  </ItemGroup>
  
  <!--
  <ItemGroup>
    <Analyzer Include="..\..\packages\xunit.analyzers.0.7.0\analyzers\dotnet\cs\xunit.analyzers.dll" />
  </ItemGroup>
  
  <Import Project="..\..\packages\xunit.core.2.3.1\build\xunit.core.targets" Condition="Exists('..\..\packages\xunit.core.2.3.1\build\xunit.core.targets')" />
  -->

</Project>
