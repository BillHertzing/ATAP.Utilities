using System;
using System.Collections.Generic;
using System.Text;
using ATAP.Utilities.Philote;

namespace ATAP.Utilities.GenerateProgram {
  public class GCompilationUnit {
    public GCompilationUnit(string gName = default, string gRelativePath=default, string gFileSuffix=default, Dictionary<Philote<GUsing>, GUsing> gUsings = default,
      Dictionary<Philote<GUsingGroup>, GUsingGroup> gUsingGroups = default,
      Dictionary<Philote<GNamespace>, GNamespace> gNamespaces = default,
      GPatternReplacement gPatternReplacement = default,
    GComment gComment = default
      ) {
      GName = gName == default ? "" : gName;
      GRelativePath = gRelativePath == default ? "" : gRelativePath;
      GFileSuffix = gFileSuffix == default ? ".cs" : gFileSuffix;
      GUsings = gUsings == default ? new Dictionary<Philote<GUsing>, GUsing>() : gUsings;
      GUsingGroups = gUsingGroups == default ? new Dictionary<Philote<GUsingGroup>, GUsingGroup>() : gUsingGroups;
      GNamespaces = gNamespaces == default ? new Dictionary<Philote<GNamespace>, GNamespace>() : gNamespaces;
      GPatternReplacement = gPatternReplacement == default? new GPatternReplacement() : gPatternReplacement;
      GComment = gComment == default? new GComment() : gComment;
      Philote = new Philote<GCompilationUnit>();
    }

    public string GName { get; }
    public Dictionary<Philote<GUsingGroup>, GUsingGroup> GUsingGroups { get; }
    public Dictionary<Philote<GUsing>, GUsing> GUsings { get; }
    public Dictionary<Philote<GNamespace>, GNamespace> GNamespaces { get; }
    public string GRelativePath { get; }
    public string GFileSuffix { get; }
    public GPatternReplacement GPatternReplacement { get; }
    public GComment GComment { get; }
    public Philote<GCompilationUnit> Philote { get; }
    public static string Header { get; } = "// "+StringConstants.AutoGeneratedHeaderCommentTextStringDefault;
  }
}

